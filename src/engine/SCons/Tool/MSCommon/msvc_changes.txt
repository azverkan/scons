The Visual Studio support has been totally revamped. Instead of using registry
magic, we use the .bat files available for each version of visual studio. This
is simpler (does not depend on the version of the compiler), more reliable, and
just plain better.

Specification
=============

Tested versions
---------------

The following versions have been succesfully tested:
  - VS 2008 (express), 32 bits
  - VS 2005 (express), 32 bits
  - VS 2003 (.Net, pro), 32 bits

Detection
---------

All tools related to the ms toolchain are detected through the same method:
  - detect the .bat configuration file (vsvarsall.bat/vsvars32.bat
    depending on the version) from the registry
  - if registry does not return anything useful, use the VS*COMNTOOLS env
    variable.

A version is detected only when the .bat file actually exists on the
filesystem.  Once the .bat file is found, it is executed through a clean
environment, and its output is parsed to get the variables
PATH/LIB/LIBPATH/INCLUDE. Those variables are then added to env['ENV']

By default, the most recent detected version is set, and can be queried in
env['MSVS_VERSION'] *after* the tool initialization. The version can be forced
by setting the MSVS_VERSION variable *before* initializing the tool.

SDK
---

Separate SDKs are only supported for the following versions:
        - Platform SDK 2003 R1 and R2
        - Windows SDK. I tried the following versions: 6.0, 6.0A (SDK delivered
          with VS 2008 express) and 6.1 (Windows SDK 2008).

Previous SDKs are not available anymore on MS website, so I could not test
them. I believe VS 6 has its own SDK included, as well as VS 2003 .Net. The SDK
is set *after* the msvs tool.

The version of the SDK can be controlled by the scons variable:

    MSSDK_DIR:      If set, specifies the directory location of the
                    SDK to be used.

    MSSDK_VERSION:  If set, specifies the version of the SDK to be used.

If neither of these is set, MSVS_VERSION is used to pick an appropriate
default.

Architecture
------------

env['MSVS_ARCH'] = 'x86'
                   'amd64'

If not set, the selection logic defaults to x86. Cross compiling has been
disabled, filtering out values not included in version.SUPPORTED_ARCH.
(No tests made with cross compiling.)

Fundamental changes
===================

env["ENV"] has been expanded a bit on windows:
  - add %SystemRoot%\system32 in the path for windows
  - add COMSPEC (needed by the .bat file execution)

Internals
=========

The code can be found in the MSVCCommon submodule:
  - findloc: find the product dir from the registry or the shell environment
        - versions: query the system for available versions of the VS suite on
          the system
        - misc: high level functions, *candidates* for the public API.
        - sdk: specifics to the SDK detection.
        - defaults: default values to use for the paths, to use instead of the
          whole env parsing which can be quite slow, but less reliable. Still
          experimental, may be removed
  - envhelpers: functions to execute a VS .bat file, parse its output,
    and get the variables with modified values.

At this point, no function should be considered public, the exact API is not
good yet.
