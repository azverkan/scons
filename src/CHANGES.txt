r __COPYRIGHT__
# __FILE__ __REVISION__ __DATE__ __DEVELOPER__


                 SCons - a software construction tool

                            Change Log



RELEASE 0.95 - XXX

  NOTE:  This is a pre-release of 0.96 for testing purposes.  When 0.96
  is released, all these changes will be listed as 0.96 changes.

  From Chad Austin:

  - Make the CacheDir() directory if it doesn't already exist.

  - Allow construction variable substitutions in $LIBS specifications.

  - Allow the emitter argument to a Builder() to be or expand to a list
    of emitter functions, which will be called in sequence.

  - Suppress null values in construction variables like $LIBS that use
    the internal _concat() function.

  - Remove .dll files from the construction variables searched for
    libraries that can be fed to Win32 compilers.

  From Chad Austin and Christoph Wiedemann:

  - Add support for a $RPATH variable to supply a list of directories
    to search for shared libraries when linking a program.  Used by
    the GNU and IRIX linkers (gnulink and sgilink).

  From Charles Crain:

  - Restore the ability to do construction variable substitutions in all
    kinds of *PATH variables, even when the substitution returns a Node
    or other object.

  From Tom Epperly:

  - Allow the Java() Builder to take more than one source directory.

  From Ralf W. Grosse-Kunstleve:

  - Have SConsignFile() use, by default, a custom "dblite.py" that we can
    control and guarantee to work on all Python versions (or nearly so).

  From Jonathan Gurley:

  - Add support for the newer "ifort" versions of the Intel Fortran
    Compiler for Linux.

  From Bob Halley:

  - Make the new *FLAGS variable type work with copied Environments.

  From Chris Hoeppler:

  - Initialize the name of a Scanner.Classic scanner correctly.

  From James Juhasz:

  - Add support for the .dylib shared library suffix and the -dynamiclib
    linker option on Mac OS X.

  From Steven Knight:

  - Add an Execute() method for executing actions directly.

  - Support passing environment override keyword arguments to Command().

  - Fix use of $MSVS_IGNORE_IDE_PATHS, which was broken when we added
    support for $MSVS_USE_MFC_DIRS last release.

  - Make env.Append() and env.Prepend() act like the underlying Python
    behavior when the variable being appended to is a UserList object.

  - Fix a regression that prevented the Command() global function in
    0.95 from working with command-line strings as actions.

  - Fix checking out a file from a source code management system when
    the env.SourceCode() method was called with an individual file name
    or node, not a directory name or node.

  - Enhance the Task.make_ready() method to create a list of the
    out-of-date Nodes for the task for use by the wrapping interface.

  - Allow Scanners to pull the list of suffixes from the construction
    environment when the "skeys" keyword argument is a string containing
    a construction variable to be expanded.

  - Support new $CPPSUFFIXES, $DSUFFIXES $FORTRANSUFFIXES, and
    $IDLSUFFIXES.  construction variables that contain the default list
    of suffixes to be scanned by a given type of scanner, allowing these
    suffix lists to be easily added to or overridden.

  - Speed up Node creation when calling a Builder by comparing whether two
    Environments are the same object, not if their underlying dictionaries
    are equivalent.

  - Add a --debug=explain option that reports the reason(s) why SCons
    thinks it must rebuild something.

  - Add support for functions that return platform-independent Actions
    to Chmod(), Copy(), Delete(), Mkdir(), Move() and Touch() files
    and/or directories.  Like any other Actions, the returned Action
    object may be executed directly using the Execute() global function
    or env.Execute() environment method, or may be used as a Builder
    action or in an env.Command() action list.

  - Add support for the strfunction argument to all types of Actions:
    CommandAction, ListAction, and CommandGeneratorAction.

  - Speed up turning file system Nodes into strings by caching the
    values after we're finished reading the SConscript files.

  - Have ParseConfig() recognize and supporting adding the -Wa, -Wl,
    and -Wp, flags to ASFLAGS, LINKFLAGS and CPPFLAGS, respectively.

  - Change the .sconsign format and the checks for whether a Node is
    up-to-date to make dependency checks more efficient and correct.

  - Add wrapper Actions to SCons.Defaults for $ASCOM, $ASPPCOM, $LINKCOM,
    $SHLINKCOM, $ARCOM, $LEXCOM and $YACCCOM.  This makes it possible
    to replace the default print behavior with a custom strfunction()
    for each of these.

  - When a Node has been built, don't walk the whole tree back to delete
    the parents's implicit dependencies, let returning up the normal
    Taskmaster descent take care of it for us.

  - Add documented support for separate target_scanner and source_scanner
    arguments to Builder creation, which allows different scanners to
    be applied to source files

  - Don't re-install or (re-generate) .h files when a subsidiary #included
    .h file changes.  This eliminates incorrect circular dependencies
    with .h files generated from other source files.

  - Slim down the internal Sig.Calculator class by eliminating methods
    whose functionality is now covered by Node methods.

  - Document use of the target_factory and source_factory keyword
    arguments when creating Builder objects.  Enhance Dir Nodes so that
    they can be created with user-specified Builder objects.

  - Don't blow up with stack trace when the external $PATH environment
    variable isn't set.

  - Make Builder calls return lists all the time, even if there's only
    one target.  This keeps things consistent and easier to program to
    across platforms.

  - Add a Flatten() function to make it easier to deal with the Builders
    all returning lists of targets, not individual targets.

  - Performance optimizations in Node.FS.__doLookup().

  - Man page fixes:  formatting typos, misspellings, bad example.

  - User's Guide fixes: Fix the signatures of the various example
    *Options() calls.  Triple-quote properly a multi-line Split example.

  - User's Guide additions:  Chapter describing File and Directory
    Nodes.  Section describing declarative nature of SCons functions in
    SConscript files.  Better organization and clarification of points
    raised by Robert P. J. Day.  Chapter describing SConf (Autoconf-like)
    functionality.  Chapter describing how to install Python and
    SCons.  Chapter describing Java builds.

  From Chris Murray:

  - Add a .win32 attribute to force file names to expand with
    Windows backslash path separators.

  - Fix escaping file names on command lines when the expansion is
    concatenated with another string.

  - Add support for Fortran 90 and Fortran 95.  This adds $FORTRAN*
    variables that specify a default compiler, command-line, flags,
    etc. for all Fortran versions, plus separate $F90* and $F95*
    variables for when different compilers/flags/etc. must be specified
    for different Fortran versions.

  - Have individual tools that create libraries override the default
    $LIBPREFIX and $LIBSUFFIX values set by the platform.  This makes
    it easier to use Microsoft Visual Studio tools on a CygWin platform.

  From Gary Oberbrunner:

  - Add a --debug=presub option to print actions prior to substitution.

  - Add a warning upon use of the override keywords "targets" and
    "sources" when calling Builders.  These are usually mistakes which
    are otherwise silently (and confusingly) turned into construction
    variable overrides.

  - Try to find the ICL license file path name in the external environment
    and the registry before resorting to the hard-coded path name.

  - Add support for fetching command-line keyword=value arguments in
    order from an ARGLIST list.

  - Avoid stack traces when trying to read dangling symlinks.

  - Treat file "extensions" that only contain digits as part of the
    file basename.  This supports version numbers as part of shared
    library names, for example.

  - Avoid problems when there are null entries (None or '') in tool
    lists or CPPPATH.

  - Add an example and explanation of how to use "tools = ['default', ..."
    when creating a construction environment.

  - Add a section describing File and Directory Nodes and some of their
    attributes and methods.

  - Have ParseConfig() add a returned -pthread flag to both $CCFLAGS
    and $LINKFLAGS.

  - Fix some test portability issues on Mac OS X (darwin).

  From Simon Perkins:

  - Fix a bug introduced in building shared libraries under MinGW.

  From Kevin Quick:

  - Handling SCons exceptions according to Pythonic standards.

  - Fix test/chained-build.py on systems that execute within one second.

  - Fix tests on systems where 'ar' warns about archive creation.

  From Anthony Roach:

  - Fix use of the --implicit-cache option with timestamp signatures.

  - If Visual Studio is installed, assume the C/C++ compiler, the linker
    and the MIDL compiler that comes with it are available, too.

  - Better error messages when evaluating a construction variable
    expansion yields a Python syntax error.

  - Change the generation of PDB files when using Visual Studio from
    compile time to link time.

  From sam th:

  - Allow SConf.CheckLib() to search a list of libraries, like the
    Autoconf AC_SEARCH_LIBS macro.

  - Allow the env.WhereIs() method to take a "reject" argument to
    let it weed out specific path names.

  From Christoph Wiedemann:

  - Add new Moc() and Uic() Builders for more explicit control over
    Qt builds, plus new construction variables to control them:
    $QT_AUTOSCAN, $QT_DEBUG, $QT_MOCCXXPREFIX, $QT_MOCCXXSUFFIX,
    $QT_MOCHPREFIX, $QT_MOCHSUFFIX, $QT_UICDECLPREFIX, $QT_UICDECLSUFFIX,
    $QT_UICIMPLPREFIX, $QT_UICIMPLSUFFIX and $QT_UISUFFIX.

  - Add a new single_source keyword argument for Builders that enforces
    a single source file on calls to the Builder.



RELEASE 0.95 - Mon, 08 Mar 2004 06:43:20 -0600

  From Chad Austin:

  - Replace print statements with calls to sys.stdout.write() so output
    lines stay together when -j is used.

  - Add portability fixes for a number of tests.

  - Accomodate the fact that Cygwin's os.path.normcase() lies about
    the underlying system being case-sensitive.

  - Fix an incorrect _concat() call in the $RCINCFLAGS definition for
    the mingw Tool.

  - Fix a problem with the msvc tool with Python versions prior to 2.3.

  - Add support for a "toolpath" Tool() and Environment keyword that
    allows Tool modules to be found in specified local directories.

  - Work around Cygwin Python's silly fiction that it's using a
    case-sensitive file system.

  - More robust handling of data in VCComponents.dat.

  - If the "env" command is available, spawn commands with the more
    general "env -" instead of "env -i".

  From Kerim Borchaev:

  - Fix a typo in a msvc.py's registry lookup:  "VCComponents.dat", not
    "VSComponents.dat".

  From Chris Burghart:

  - Fix the ability to save/restore a PackageOption to a file.

  From Steve Christensen:

  - Update the MSVS .NET and MSVC 6.0/7.0 path detection.

  From David M. Cooke:

  - Make the Fortran scanner case-insensitive for the INCLUDE string.

  From Charles Crain:

  - If no version of MSVC is detected but the tool is specified,
    use the MSVC 6.0 paths by default.

  - Ignore any "6.1" version of MSVC found in the registry; this is a
    phony version number (created by later service packs?) and would
    throw off the logic if the user had any non-default paths configure.

  - Correctly detect if the user has independently configured the MSVC
    "include," "lib" or "path" in the registry and use the appropriate
    values.  Previously, SCons would only use the values if all three
    were set in the registry.

  - Make sure side-effect nodes are prepare()d before building their
    corresponding target.

  - Preserve the ability to call BuildDir() multiple times with the
    same target and source directory arguments.

  From Andy Friesen:

  - Add support for the Digital Mars "D" programming language.

  From Scott Lystig Fritchie:

  - Fix the ability to use a custom _concat() function in the
    construction environment when calling _stripixes().

  - Make the message about ignoring a missing SConscript file into a
    suppressable Warning, not a hard-coded sys.stderr.write().

  - If a builder can be called multiple times for a target (because
    the sources and overrides are identical, or it's a builder with the
    "multi" flag set), allow the builder to be called through multiple
    environments so long as the builders have the same signature for
    the environments in questions (that is, they're the same action).

  From Bob Halley:

  - When multiple targets are built by a single action, retrieve all
    of them from cache, not just the first target, and exec the build
    command if any of the targets isn't present in the cache.

  From Zephaniah Hull:

  - Fix command-line ARGUMENTS with multiple = in them.

  From Steven Knight:

  - Fix EnsureSConsVersion() so it checks against the SCons version,
    not the Python version, on Pythons with sys.version_info.

  - Don't swallow the AttributeError when someone uses an expansion like
    $TARGET.bak, so we can supply a more informative error message.

  - Fix an odd double-quote escape sequence in the man page.

  - Fix looking up a naked drive letter as a directory (Dir('C:')).

  - Support using File nodes in the LIBS construction variable.

  - Allow the LIBS construction variable to be a single string or File
    node, not a list, when only one library is needed.

  - Fix typos in the man page:  JAVACHDIR => JARCHDIR; add "for_signature"
    to the __call__() example in the "Variable Substitution" section.

  - Correct error message spellings of "non-existant" to "non-existent."

  - When scanning for libraries to link with, don't append $LIBPREFIXES
    or $LIBSUFFIXES values to the $LIBS values if they're already present.

  - Add a ZIPCOMPRESSION construction variable to control whether the
    internal Python action for the Zip Builder compresses the file or
    not.  The default value is zipfile.ZIP_DEFLATED, which generates
    a compressed file.

  - Refactor construction variable expansion to support recursive
    expansion of variables (e.g. CCFLAGS = "$CCFLAGS -g") without going
    into an infinite loop.  Support this in all construction variable
    overrides, as well as when copying Environments.

  - Fix calling Configure() from more than one subsidiary SConscript file.

  - Fix the env.Action() method so it returns the correct type of
    Action for its argument(s).

  - Fix specifying .class files as input to JavaH with the .class suffix
    when they weren't generated using the Java Builder.

  - Make the check for whether all of the objects going into a
    SharedLibrary() are shared work even if the object was built in a
    previous run.

  - Supply meaningful error messages, not stack traces, if we try to add
    a non-Node as a source, dependency, or ignored dependency of a Node.

  - Generate MSVS Project files that re-invoke SCons properly regardless
    of whether the file was built via scons.bat or scons.py.
    (Thanks to Niall Douglas for contributing code and testing.)

  - Fix TestCmd.py, runtest.py and specific tests to accomodate being
    run from directories whose paths include white space.

  - Provide a more useful error message if a construction variable
    expansion contains a syntax error during evaluation.

  - Fix transparent checkout of implicit dependency files from SCCS
    and RCS.

  - Added new --debug=count, --debug=memory and --debug=objects options.
    --debug=count and --debug=objects only print anything when run
    under Python 2.1 or later.

  - Deprecate the "overrides" keyword argument to Builder() creation
    in favor of using keyword argument values directly (like we do
    for builder execution and the like).

  - Always use the Builder overrides in substitutions, not just if
    there isn't a target-specific environment.

  - Add new "rsrcpath" and "rsrcdir" and attributes to $TARGET/$SOURCE,
    so Builder command lines can find things in Repository source
    directories when using BuildDir.

  - Fix the M4 Builder so that it chdirs to the Repository directory
    when the input file is in the source directory of a BuildDir.

  - Save memory at build time by allowing Nodes to delete their build
    environments after they've been built.

  - Add AppendUnique() and PrependUnique() Environment methods, which
    add values to construction variables like Append() and Prepend()
    do, but suppress any duplicate elements in the list.

  - Allow the 'qt' tool to still be used successfully from a copied
    Environment.  The include and library directories previously ended up
    having the same string re-appended to the end, yielding an incorrect
    path name.

  - Supply a more descriptive error message when the source for a target
    can't be found.

  - Initialize all *FLAGS variables with objects do the right thing with
    appending flags as strings or lists.

  - Make things like ${TARGET.dir} work in *PATH construction variables.

  - Allow a $MSVS_USE_MFC_DIRS construction variable to control whether
    ATL and MFC directories are included in the default INCLUDE and
    LIB paths.

  - Document the dbm_module argument to the SConsignFile() function.

  From Vincent Risi:

  - Add support for the bcc32, ilink32 and tlib Borland tools.

  From Anthony Roach:

  - Supply an error message if the user tries to configure a BuildDir
    for a directory that already has one.

  - Remove documentation of the still-unimplemented -e option.

  - Add -H help text listing the legal --debug values.

  - Don't choke if a construction variable is a non-string value.

  - Build Type Libraries in the target directory, not the source
    directory.

  - Add an appendix to the User's Guide showing how to accomplish
    various common tasks in Python.

  From Greg Spencer:

  - Add support for Microsoft Visual Studio 2003 (version 7.1).

  - Evaluate $MSVSPROJECTSUFFIX and $MSVSSOLUTIONSUFFIX when the Builder
    is invoked, not when the tool is initialized.

  From Christoph Wiedemann:

  - When compiling Qt, make sure the moc_*.cc files are compiled using
    the flags from the environment used to specify the target, not
    the environment that first has the Qt Builders attached.



RELEASE 0.94 - Fri, 07 Nov 2003 05:29:48 -0600

  From Hartmut Goebel:

  - Add several new types of canned functions to help create options:
    BoolOption(), EnumOption(), ListOption(), PackageOption(),
    PathOption().

  From Steven Knight:

  - Fix use of CPPDEFINES with C++ source files.

  - Fix env.Append() when the operand is an object with a __cmp__()
    method (like a Scanner instance).

  - Fix subclassing the Environment and Scanner classes.

  - Add BUILD_TARGETS, COMMAND_LINE_TARGETS and DEFAULT_TARGETS variables.

  From Steve Leblanc:

  - SGI fixes:  Fix C++ compilation, add a separate Tool/sgic++.py module.

  From Gary Oberbrunner:

  - Fix how the man page un-indents after examples in some browsers.

  From Vincent Risi:

  - Fix the C and C++ tool specifications for AIX.



RELEASE 0.93 - Thu, 23 Oct 2003 07:26:55 -0500

  From J.T. Conklin:

  - On POSIX, execute commands with the more modern os.spawnvpe()
    function, if it's available.

  - Scan .S, .spp and .SPP files for C preprocessor dependencies.

  - Refactor the Job.Parallel() class to use a thread pool without a
    condition variable.  This improves parallel build performance and
    handles keyboard interrupts properly when -j is used.

  From Charles Crain:

  - Add support for a JARCHDIR variable to control changing to a
    directory using the jar -C option.

  - Add support for detecting Java manifest files when using jar,
    and specifying them using the jar m flag.

  - Fix some Python 2.2 specific things in various tool modules.

  - Support directories as build sources, so that a rebuild of a target
    can be triggered if anything underneath the directory changes.

  - Have the scons.bat and scons.py files look for the SCons modules
    in site-packages as well.

  From Christian Engel:

  - Support more flexible inclusion of separate C and C++ compilers.

  - Use package management tools on AIX and Solaris to find where
    the comilers are installed, and what version they are.

  - Add support for CCVERSION and CXXVERSION variables for a number
    of C and C++ compilers.

  From Sergey Fogel:

  - Add test cases for the new capabilities to run bibtex and to rerun
    latex as needed.

  From Ralf W. Grosse-Kunstleve:

  - Accomodate anydbm modules that don't have a sync() method.

  - Allow SConsignFile() to take an argument specifying the DBM
    module to be used.

  From Stephen Kennedy:

  - Add support for a configurable global .sconsign.dbm file which
    can be used to avoid cluttering each directory with an individual
    .sconsign file.

  From John Johnson:

  - Fix (re-)scanning of dependencies in generated or installed
    header files.

  From Steven Knight:

  - The -Q option suppressed too many messages; fix it so that it only
    suppresses the Reading/Building messages.

  - Support #include when there's no space before the opening quote
    or angle bracket.

  - Accomodate alphanumeric version strings in EnsurePythonVersion().

  - Support arbitrary expansion of construction variables within
    file and directory arguments to Builder calls and Environment methods.

  - Add Environment-method versions of the following global functions:
    Action(), AddPostAction(), AddPreAction(), Alias(), Builder(),
    BuildDir(), CacheDir(), Clean(), Configure(), Default(),
    EnsurePythonVersion(), EnsureSConsVersion(), Environment(),
    Exit(), Export(), FindFile(), GetBuildPath(), GetOption(), Help(),
    Import(), Literal(), Local(), Platform(), Repository(), Scanner(),
    SConscriptChdir(), SConsignFile(), SetOption(), SourceSignatures(),
    Split(), TargetSignatures(), Tool(), Value().

  - Add the following global functions that correspond to the same-named
    Environment methods:  AlwaysBuild(), Command(), Depends(), Ignore(),
    Install(), InstallAs(), Precious(), SideEffect() and SourceCode().

  - Add the following global functions that correspond to the default
    Builder methods supported by SCons: CFile(), CXXFile(), DVI(), Jar(),
    Java(), JavaH(), Library(), M4(), MSVSProject(), Object(), PCH(),
    PDF(), PostScript(), Program(), RES(), RMIC(), SharedLibrary(),
    SharedObject(), StaticLibrary(), StaticObject(), Tar(), TypeLibrary()
    and Zip().

  - Rearrange the man page to show construction environment methods and
    global functions in the same list, and to explain the difference.

  - Alphabetize the explanations of the builder methods in the man page.

  - Rename the Environment.Environment class to Enviroment.Base.
    Allow the wrapping interface to extend an Environment by using its own
    subclass of Environment.Base and setting a new Environment.Environment
    variable as the calling entry point.

  - Deprecate the ParseConfig() global function in favor of a same-named
    construction environment method.

  - Allow the Environment.WhereIs() method to take explicit path and
    pathext arguments (like the underlying SCons.Util.WhereIs() function).

  - Remove the long-obsolete {Get,Set}CommandHandler() functions.

  - Enhance env.Append() to suppress null values when appropriate.

  - Fix ParseConfig() so it works regardless of initial construction
    variable values.

    Extend CheckHeader(), CheckCHeader(), CheckCXXHeader() and
    CheckLibWithHeader() to accept a list of header files that will be
    #included in the test.  The last one in the list is assumed to be
    the one being checked for.  (Prototype code contributed by Gerard
    Patel and Niall Douglas).

  - Supply a warning when -j is used and threading isn't built in to
    the current version of Python.

  - First release of the User's Guide (finally, and despite a lot
    of things still missing from it...).

  From Clark McGrew:

  - Generalize the action for .tex files so that it will decide whether
    a file is TeX or LaTeX, check the .aux output to decide if it should
    run bibtex, and check the .log output to re-run LaTeX if needed.

  From Bram Moolenaar:

  - Split the non-SCons-specific functionality from SConf.py to a new,
    re-usable Conftest.py module.

  From Gary Oberbrunner:

  - Allow a directory to be the target or source or dependency of a
    Depends(), Ignore(), Precious() or SideEffect() call.

  From Gerard Patel:

  - Use the %{_mandir} macro when building our RPM package.

  From Marko Rauhamaa:

  - Have the closing message say "...terminated because of errors" if
    there were any.

  From Anthony Roach:

  - On Win32 systems, only use "rm" to delete files if Cygwin is being
    used.   ("rm" doesn't understand Win32-format path names.)

  From Christoph Wiedemann:

  - Fix test/SWIG.py to find the Python include directory in all cases.

  - Fix a bug in detection of Qt installed on the local system.

  - Support returning Python 2.3 BooleanType values from Configure checks.

  - Provide an error message if someone mistakenly tries to call a
    Configure check from within a Builder function.

  - Support calling a Builder when a Configure context is still open.

  - Handle interrupts better by eliminating all try:-except: blocks
    which caught any and all exceptions, including KeyboardInterrupt.

  - Add a --duplicate= option to control how files are duplicated.



RELEASE 0.92 - Wed, 20 Aug 2003 03:45:28 -0500

  From Charles Crain and Gary Oberbrunner:

  - Fix Tool import problems with the Intel and PharLap linkers.

  From Steven Knight

  - Refactor the DictCmdGenerator class to be a Selector subclass.

  - Allow the DefaultEnvironment() function to take arguments and pass
    them to instantiation of the default construction environment.

  - Update the Debian package so it uses Python 2.2 and more closely
    resembles the currently official Debian packaging info.

  From Gerard Patel

  - When the yacc -d flag is used, take the .h file base name from the
    target .c file, not the source (matching what yacc does).



RELEASE 0.91 - Thu, 14 Aug 2003 13:00:44 -0500

  From Chad Austin:

  - Support specifying a list of tools when calling Environment.Copy().

  - Give a Value Nodes a timestamp of the system time when they're
    created, so they'll work when using timestamp-based signatures.

  - Add a DefaultEnvironment() function that only creates a default
    environment on-demand (for fetching source files, e.g.).

  - Portability fix for test/M4.py.

  From Steven Knight:

  - Tighten up the scons -H help output.

  - When the input yacc file ends in .yy and the -d flag is specified,
    recognize that a .hpp file (not a .h file) will be created.

  - Make builder prefixes work correctly when deducing a target
    from a source file name in another directory.

  - Documentation fixes: typo in the man page; explain up-front about
    not propagating the external environment.

  - Use "cvs co -d" instead of "cvs co -p >" when checking out something
    from CVS with a specified module name.  This avoids zero-length
    files when there is a checkout error.

  - Add an "sconsign" script to print the contents of .sconsign files.

  - Speed up maintaining the various lists of Node children by using
    dictionaries to avoid "x in list" searches.

  - Cache the computed list of Node children minus those being Ignored
    so it's only calculated once.

  - Fix use of the --cache-show option when building a Program()
    (or using any other arbitrary action) by making sure all Action
    instances have strfunction() methods.

  - Allow the source of Command() to be a directory.

  - Better error handling of things like raw TypeErrors in SConscripts.

  - When installing using "setup.py install --prefix=", suppress the
    distutils warning message about adding the (incorrect) library
    directory to your search path.

  - Correct the spelling of the "validater" option to "validator."
    Add a DeprecatedWarning when the old spelling is used.

  - Allow a Builder's emitter to be a dictionary that maps source file
    suffixes to emitter functions, using the suffix of the first file
    in the source list to pick the right one.

  - Refactor the creation of the Program, *Object and *Library Builders
    so that they're moved out of SCons.Defaults and created on demand.

  - Don't split SConscript file names on white space.

  - Document the SConscript function's "dirs" and "name" keywords.

  - Remove the internal (and superfluous) SCons.Util.argmunge() function.

  - Add /TP to the default CXXFLAGS for msvc, so it can compile all
    of the suffixes we use as C++ files.

  - Allow the "prefix" and "suffix" attributes of a Builder to be
    callable objects that return generated strings, or dictionaries
    that map a source file suffix to the right prefix/suffix.

  - Support a MAXLINELINELENGTH construction variable on Win32 systems
    to control when a temporary file is used for long command lines.

  - Make how we build .rpm packages not depend on the installation
    locations from the distutils being used.

  - When deducing a target Node, create it directly from the first
    source Node, not by trying to create the right string to pass to
    arg2nodes().

  - Add support for SWIG.

  From Bram Moolenaar:

  - Test portability fixes for FreeBSD.

  From Gary Oberbrunner:

  - Report the target being built in error messages when building
    multiple sources from different extensions, or when the target file
    extension can't be deduced, or when we don't have an action for a
    file suffix.

  - Provide helpful error messages when the arguments to env.Install()
    are incorrect.

  - Fix the value returned by the Node.prevsiginfo() method to conform
    to a previous change when checking whether a node is current.

  - Supply a stack trace if the Taskmaster catches an exception.

  - When using a temporary file for a long link line on Win32 systems,
    (also) print the command line that is being executed through the
    temporary file.

  - Initialize the LIB environment variable when using the Intel
    compiler (icl).

  - Documentation fixes:  better explain the AlwaysBuild() function.

  From Laurent Pelecq:

  - When the -debug=pdb option is specified, use pdb.Pdb().runcall() to
    call pdb directly, don't call Python recursively.

  From Ben Scott:

  - Add support for a platform-independent CPPDEFINES variable.

  From Christoph Wiedemann:

  - Have the g++ Tool actually use g++ in preference to c++.

  - Have the gcc Tool actually use gcc in preference to cc.

  - Add a gnutools.py test of the GNU tool chain.

  - Be smarter about linking: use $CC by default and $CXX only if we're
    linking with any C++ objects.

  - Avoid SCons hanging when a piped command has a lot of output to read.

  - Add QT support for preprocessing .ui files into .c files.



RELEASE 0.90 - Wed, 25 Jun 2003 14:24:52 -0500

  From Chad Austin:

  - Fix the _concat() documentation, and add a test for it.

  - Portability fixes for non-GNU versions of lex and yacc.

  From Matt Balvin:

  - Fix handling of library prefixes when the subdirectory matches
    the prefix.

  From Timothee Bessett:

  - Add an M4 Builder.

  From Charles Crain:

  - Use '.lnk' as the suffix on the temporary file for linking long
    command lines (necessary for the Phar Lap linkloc linker).

  - Save non-string Options values as their actual type.

  - Save Options string values that contain a single quote correctly.

  - Save any Options values that are changed from the default
    Environment values, not just ones changed on the command line or in
    an Options file.

  - Make closing the Options file descriptor exception-safe.

  From Steven Knight:

  - SCons now enforces (with an error) that construction variables
    must have the same form as valid Python identifiers.

  - Fix man page bugs: remove duplicate AddPostAction() description;
    document no_import_lib; mention that CPPFLAGS does not contain
    $_CPPINCFLAGS; mention that F77FLAGS does not contain $_F77INCFLAGS;
    mention that LINKFLAGS and SHLINKFLAGS contains neither $_LIBFLAGS
    nor $_LIBDIRFLAGS.

  - Eliminate a dependency on the distutils.fancy_getopt module by
    copying and pasting its wrap_text() function directly.

  - Make the Script.Options() subclass match the underlying base class
    implementation.

  - When reporting a target is up to date, quote the target like make
    (backquote-quote) instead of with double quotes.

  - Fix handling of ../* targets when using -U, -D or -u.

  From Steve Leblanc:

  - Don't update the .sconsign files when run with -n.

  From Gary Oberbrunner:

  - Add support for the Intel C Compiler (icl.exe).

  From Anthony Roach

  - Fix Import('*').

  From David Snopek

  - Fix use of SConf in paths with white space in them.

  - Add CheckFunc and CheckType functionality to SConf.

  - Fix use of SConf with Builders that return a list of nodes.

  From David Snopek and Christoph Wiedemann

  - Fix use of the SConf subsystem with SConscriptChdir().

  From Greg Spencer

  - Check for the existence of MS Visual Studio on disk before using it,
    to avoid getting fooled by leftover junk in the registry.

  - Add support for MSVC++ .NET.

  - Add support for MS Visual Studio project files (DSP, DSW,
    SLN and VCPROJ files).

  From Christoph Wiedemann

  - SConf now works correctly when the -n and -q options are used.



RELEASE 0.14 - Wed, 21 May 2003 05:16:32 -0500

  From Chad Austin:

  - Use .dll (not .so) for shared libraries on Cygwin; use -fPIC
    when compiling them.

  - Use 'rm' to remove files under Cygwin.

  - Add a PLATFORM variable to construction environments.

  - Remove the "platform" argument from tool specifications.

  - Propogate PYTHONPATH when running the regression tests so distutils
    can be found in non-standard locations.

  - Using MSVC long command-line linking when running Cygwin.

  - Portability fixes for a lot of tests.

  - Add a Value Node class for dependencies on in-core Python values.

  From Allen Bierbaum:

  - Pass an Environment to the Options validator method, and
    add an Options.Save() method.

  From Steve Christensen:

  - Add an optional sort function argument to the GenerateHelpText()
    Options function.

  - Evaluate the "varlist" variables when computing the signature of a
    function action.

  From Charles Crain:

  - Parse the source .java files for class names (including inner class
    names) to figure out the target .class files that will be created.

  - Make Java support work with Repositories and SConscriptChdir(0).

  - Pass Nodes, not strings, to Builder emitter functions.

  - Refactor command-line interpolation and signature calculation
    so we can use real Node attributes.

  From Steven Knight:

  - Add Java support (javac, javah, jar and rmic).

  - Propagate the external SYSTEMROOT environment variable into ENV on
    Win32 systems, so external commands that use sockets will work.

  - Add a .posix attribute to PathList expansions.

  - Check out CVS source files using POSIX path names (forward slashes
    as separators) even on Win32.

  - Add Node.clear() and Node.FS.Entry.clear() methods to wipe out a
    Node's state, allowing it to be re-evaluated by continuous
    integration build interfaces.

  - Change the name of the Set{Build,Content}SignatureType() functions
    to {Target,Source}Signatures().  Deprecate the old names but support
    them for backwards compatibility.

  - Add internal SCons.Node.FS.{Dir,File}.Entry() methods.

  - Interpolate the null string if an out-of-range subscript is used
    for a construction variable.

  - Fix the internal Link function so that it properly links or copies
    files in subsidiary BuildDir directories.

  - Refactor the internal representation of a single execution instance
    of an action to eliminate redundant signature calculations.

  - Eliminate redundant signature calculations for Nodes.

  - Optimize out calling hasattr() before accessing attributes.

  - Say "Cleaning targets" (not "Building...") when the -c option is
    used.

  From Damyan Pepper:

  - Quote the "Entering directory" message like Make.

  From Stefan Reichor:

  - Add support for using Ghostscript to convert Postscript to PDF files.

  From Anthony Roach:

  - Add a standalone "Alias" function (separate from an Environment).

  - Make Export() work for local variables.

  - Support passing a dictionary to Export().

  - Support Import('*') to import everything that's been Export()ed.

  - Fix an undefined exitvalmap on Win32 systems.

  - Support new SetOption() and GetOption() functions for setting
    various command-line options from with an SConscript file.

  - Deprecate the old SetJobs() and GetJobs() functions in favor of
    using the new generic {Set,Get}Option() functions.

  - Fix a number of tests that searched for a Fortran compiler using the
    external PATH instead of what SCons would use.

  - Fix the interaction of SideEffect() and BuildDir() so that (for
    example) PDB files get put correctly in a BuildDir().

  From David Snopek:

  - Contribute the "Autoscons" code for Autoconf-like checking for
    the existence of libraries, header files and the like.

  - Have the Tool() function add the tool name to the $TOOLS
    construction variable.

  From Greg Spencer:

  - Support the C preprocessor #import statement.

  - Allow the SharedLibrary() Builder on Win32 systems to be able to
    register a newly-built dll using regsvr32.

  - Add a Builder for Windows type library (.tlb) files from IDL files.

  - Add an IDL scanner.

  - Refactor the Fortran, C and IDL scanners to share common logic.

  - Add .srcpath and .srcdir attributes to $TARGET and $SOURCE.

  From Christoph Wiedemann:

  - Integrate David Snopek's "Autoscons" code as the new SConf
    configuration subsystem, including caching of values between
    runs (using normal SCons dependency mechanisms), tests, and
    documentation.



RELEASE 0.13 - Mon, 31 Mar 2003 20:22:00 -0600

  From Charles Crain:

  - Fix a bug when BuildDir(duplicate=0) is used and SConscript
    files are called from within other SConscript files.

  - Support (older) versions of Perforce which don't set the Windows
    registry.



RELEASE 0.12 - Thu, 27 Mar 2003 23:52:09 -0600

  From Charles Crain:

  - Added support for the Perforce source code management system.

  - Fix str(Node.FS) so that it returns a path relative to the calling
    SConscript file's directory, not the top-level directory.

  - Added support for a separate src_dir argument to SConscript()
    that allows explicit specification of where the source files
    for an SConscript file can be found.

  - Support more easily re-usable flavors of command generators by
    calling callable variables when strings are expanded.

  From Steven Knight:

  - Added an INSTALL construction variable that can be set to a function
    to control how the Install() and InstallAs() Builders install files.
    The default INSTALL function now copies, not links, files.

  - Remove deprecated features:  the "name" argument to Builder objects,
    and the Environment.Update() method.

  - Add an Environment.SourceCode() method to support fetching files
    from source code systems.  Add factory methods that create Builders
    to support BitKeeper, CVS, RCS, and SCCS.  Add support for fetching
    files from RCS or SCCS transparently (like GNU Make).

  - Make the internal to_String() function more efficient.

  - Make the error message the same as other build errors when there's a
    problem unlinking a target file in preparation for it being built.

  - Make TARGET, TARGETS, SOURCE and SOURCES reserved variable names and
    warn if the user tries to set them in a construction environment.

  - Add support for Tar and Zip files.

  - Better documentation of the different ways to export variables to a
    subsidiary SConscript file.  Fix documentation bugs in a tools
    example, places that still assumed SCons split strings on white
    space, and typos.

  - Support fetching arbitrary files from the TARGETS or SOURCES lists
    (e.g. ${SOURCES[2]}) when calculating the build signature of a
    command.

  - Don't silently swallow exceptions thrown by Scanners (or other
    exceptions while finding a node's dependent children).

  - Push files to CacheDir() before calling the superclass built()
    method (which may clear the build signature as part of clearing
    cached implicit dependencies, if the file has a source scanner).
    (Bug reported by Jeff Petkau.)

  - Raise an internal error if we attempt to push a file to CacheDir()
    with a build signature of None.

  - Add an explicit Exit() function for terminating early.

  - Change the documentation to correctly describe that the -f option
    doesn't change to the directory in which the specified file lives.
    
  - Support changing directories locally with SConscript directory
    path names relative to any SConstruct file specified with -f.
    This allows you to build in another directory by simply changing
    there and pointing at the SConstruct file in another directory.

  - Change the default SConscriptChdir() behavior to change to the
    SConscript directory while it's being read.

  - Fix an exception thrown when the -U option was used with no
    Default() target specified.

  - Fix -u so that it builds things in corresponding build directories
    when used in a source directory.

  From Lachlan O'Dea:

  - Add SharedObject() support to the masm tool.

  - Fix WhereIs() to return normalized paths.

  From Jeff Petkau:

  - Don't copy a built file to a CacheDir() if it's already there.

  - Avoid partial copies of built files in a CacheDir() by copying
    to a temporary file and renaming.

  From Anthony Roach:

  - Fix incorrect dependency-cycle errors when an Aliased source doesn't
    exist.



RELEASE 0.11 - Tue, 11 Feb 2003 05:24:33 -0600

  From Chad Austin:

  - Add support for IRIX and the SGI MIPSPro tool chain.

  - Support using the MSVC tool chain when running Cygwin Python.

  From Michael Cook:

  - Avoid losing signal bits in the exit status from a command,
    helping terminate builds on interrupt (CTRL+C).

  From Charles Crain:

  - Added new AddPreAction() and AddPostAction() functions that support
    taking additional actions before or after building specific targets.

  - Add support for the PharLap ETS tool chain.

  From Steven Knight:

  - Allow Python function Actions to specify a list of construction
    variables that should be included in the Action's signature.

  - Allow libraries in the LIBS variable to explicitly include the prefix
    and suffix, even when using the GNU linker.
    (Bug reported by Neal Becker.)

  - Use DOS-standard CR-LF line endings in the scons.bat file.
    (Bug reported by Gary Ruben.)

  - Doc changes:  Eliminate description of deprecated "name" keyword
    argument from Builder definition (reported by Gary Ruben).

  - Support using env.Append() on BUILDERS (and other dictionaries).
    (Bug reported by Bj=F6rn Bylander.)

  - Setting the BUILDERS construction variable now properly clears
    the previous Builder attributes from the construction Environment.
    (Bug reported by Bj=F6rn Bylander.)

  - Fix adding a prefix to a file when the target isn't specified.
    (Bug reported by Esa Ilari Vuokko.)

  - Clean up error messages from problems duplicating into read-only
    BuildDir directories or into read-only files.

  - Add a CommandAction.strfunction() method, and add an "env" argument
    to the FunctionAction.strfunction() method, so that all Action
    objects have strfunction() methods, and the functions for building
    and returning a string both take the same arguments.

  - Add support for new CacheDir() functionality to share derived files
    between builds, with related options --cache-disable, --cache-force,
    and --cache-show.

  - Change the default behavior when no targets are specified to build
    everything in the current directory and below (like Make).  This
    can be disabled by specifying Default(None) in an SConscript.

  - Revamp SCons installation to fix a case-sensitive installation
    on Win32 systems, and to add SCons-specific --standard-lib,
    --standalone-lib, and --version-lib options for easier user
    control of where the libraries get installed.

  - Fix the ability to directly import and use Platform and Tool modules
    that have been implicitly imported into an Environment().

  - Add support for allowing an embedding interface to annotate a node
    when it's created.

  - Extend the SConscript() function to accept build_dir and duplicate
    keyword arguments that function like a BuildDir() call.

  From Steve Leblanc:

  - Fix the output of -c -n when directories are involved, so it
    matches -c.

  From Anthony Roach:

  - Use a different shared object suffix (.os) when using gcc so shared
    and static objects can exist side-by-side in the same directory.

  - Allow the same object files on Win32 to be linked into either
    shared or static libraries.

  - Cache implicit cache values when using --implicit-cache.



RELEASE 0.10 - Thu, 16 Jan 2003 04:11:46 -0600

  From Derrick 'dman' Hudson:

  - Support Repositories on other file systems by symlinking or
    copying files when hard linking won't work.

  From Steven Knight:

  - Remove Python bytecode (*.pyc) files from the scons-local packages.

  - Have FunctionActions print a description of what they're doing
    (a representation of the Python call).

  - Fix the Install() method so that, like other actions, it prints
    what would have happened when the -n option is used.

  - Don't create duplicate source files in a BuildDir when the -n
    option is used.

  - Refactor the Scanner interface to eliminate unnecessary Scanner
    calls and make it easier to write efficient scanners.

  - Added a "recursive" flag to Scanner creation that specifies the
    Scanner should be invoked recursively on dependency files returned
    by the scanner.

  - Significant performance improvement from using a more efficient
    check, throughout the code, for whether a Node has a Builder.

  - Fix specifying only the source file to MultiStepBuilders such as
    the Program Builder.  (Bug reported by Dean Bair.)

  - Fix an exception when building from a file with the same basename as
    the subdirectory in which it lives.  (Bug reported by Gerard Patel.)

  - Fix automatic deduction of a target file name when there are
    multiple source files specified; the target is now deduced from just
    the first source file in the list.

  - Documentation fixes: better initial explanation of SConscript files;
    fix a misformatted "table" in the StaticObject explanation.

  From Steven Knight and Steve Leblanc:

  - Fix the -c option so it will remove symlinks.

  From Steve Leblanc:

  - Add a Clean() method to support removing user-specified targets
    when using the -c option.

  - Add a development script for running SCons through PyChecker.

  - Clean up things found by PyChecker (mostly unnecessary imports).

  - Add a script to use HappyDoc to create HTML class documentation.

  From Lachlan O'Dea:

  - Make the Environment.get() method return None by default.

  From Anthony Roach:

  - Add SetJobs() and GetJobs() methods to allow configuration of the
    number of default jobs (still overridden by -j).

  - Convert the .sconsign file format from ASCII to a pickled Python
    data structure.

  - Error message cleanups:  Made consistent the format of error
    messages (now all start with "scons: ***") and warning messages (now
    all start with "scons: warning:").  Caught more cases with the "Do
    not know how to build" error message.

  - Added support for the MinGW tool chain.

  - Added a --debug=includes option.



RELEASE 0.09 - Thu,  5 Dec 2002 04:48:25 -0600

  From Chad Austin:

  - Add a Prepend() method to Environments, to append values to
    the beginning of construction variables.

  From Matt Balvin:

  - Add long command-line support to the "lib" Tool (Microsoft library
    archiver), too.

  From Charles Crain:

  - Allow $$ in a string to be passed through as $.

  - Support file names with odd characters in them.

  - Add support for construction variable substition on scanner
    directories (in CPPPATH, F77PATH, LIBPATH, etc.).

  From Charles Crain and Steven Knight:

  - Add Repository() functionality, including the -Y option.

  From Steven Knight:

  - Fix auto-deduction of target names so that deduced targets end
    up in the same subdirectory as the source.

  - Don't remove source files specified on the command line!

  - Suport the Intel Fortran Compiler (ifl.exe).

  - Supply an error message if there are no command-line or
    Default() targets specified.

  - Fix the ASPPCOM values for the GNU assembler.
    (Bug reported by Brett Polivka.)

  - Fix an exception thrown when a Default() directory was specified
    when using the -U option.

  - Issue a warning when -c can't remove a target.

  - Eliminate unnecessary Scanner calls by checking for the
    existence of a file before scanning it.  (This adds a generic
    hook to check an arbitrary condition before scanning.)

  - Add explicit messages to tell when we're "Reading SConscript files
    ...," "done reading SConscript files," "Building targets," and
    "done building targets."  Add a -Q option to supress these.

  - Add separate $SHOBJPREFIX and $SHOBJSUFFIX construction variables
    (by default, the same as $OBJPREFIX and $OBJSUFFIX).

  - Add Make-like error messages when asked to build a source file,
    and before trying to build a file that doesn't have all its source
    files (including when an invalid drive letter is used on WIN32).

  - Add an scons-local-{version} package (in both .tar.gz and .zip
    flavors) to help people who want to ship SCons as a stand-alone
    build tool in their software packages.

  - Prevent SCons from unlinking files in certain situations when
    the -n option is used.

  - Change the name of Tool/lib.py to Tool/mslib.py.

  From Steven Knight and Anthony Roach:

  - Man page:  document the fact that Builder calls return Node objects.

  From Steve LeBlanc:

  - Refactor option processing to use our own version of Greg Ward's
    Optik module, modified to run under Python 1.5.2.

  - Add a ParseConfig() command to modify an environment based on
    parsing output from a *-config command.

  From Jeff Petkau:

  - Fix interpretation of '#/../foo' on Win32 systems.

  From Anthony Roach:

  - Fixed use of command lines with spaces in their arguments,
    and use of Nodes with spaces in their string representation.

  - Make access and modification times of files in a BuildDir match
    the source file, even when hard linking isn't available.

  - Make -U be case insensitive on Win32 systems.

  - Issue a warning and continue when finding a corrupt .sconsign file.

  - Fix using an alias as a dependency of a target so that if one of the
    alias' dependencies gets rebuilt, the resulting target will, too.

  - Fix differently ordered targets causing unnecessary rebuilds
    on case insensitive systems.

  - Use os.system() to execute external commands whenever the "env"
    utility is available, which is much faster than fork()/exec(),
    and fixes the -j option on several platforms.

  - Fix use of -j with multiple targets.

  - Add an Options() object for friendlier accomodation of command-
    line arguments.

  - Add support for Microsoft VC++ precompiled header (.pch) files,
    debugger (.pdb) files, and resource (.rc) files.

  - Don't compute the $_CPPINCFLAGS, $_F77INCFLAGS, $_LIBFLAGS and
    $_LIBDIRFLAGS variables each time a command is executed, define
    them so they're computed only as needed.  Add a new _concat
    function to the Environment that allows people to define their
    own similar variables.

  - Fix dependency scans when $LIBS is overridden.

  - Add EnsurePythonVersion() and EnsureSConsVersion() functions.

  - Fix the overly-verbose stack trace on ListBuilder build errors.

  - Add a SetContentSignatureType() function, allowing use of file
    timestamps instead of MD5 signatures.

  - Make -U and Default('source') fail gracefully.

  - Allow the File() and Dir() methods to take a path-name string as
    the starting directory, in addition to a Dir object.

  - Allow the command handler to be selected via the SPAWN, SHELL
    and ESCAPE construction variables.

  - Allow construction variables to be overridden when a Builder
    is called.

  From sam th:

  - Dynamically check for the existence of utilities with which to
    initialize Environments by default.



RELEASE 0.08 - Mon, 15 Jul 2002 12:08:51 -0500

  From Charles Crain:

  - Fixed a bug with relative CPPPATH dirs when using BuildDir().
    (Bug reported by Bob Summerwill.)

  - Added a warnings framework and a --warn option to enable or
    disable warnings.

  - Make the C scanner warn users if files referenced by #include
    directives cannot be found and --warn=dependency is specified.

  - The BUILDERS construction variable should now be a dictionary
    that maps builder names to actions.  Existing uses of lists,
    and the Builder name= keyword argument, generate warnings
    about use of deprecated features.

  - Removed the "shared" keyword argument from the Object and
    Library builders.
    
  - Added separated StaticObject, SharedObject, StaticLibrary and
    SharedLibrary builders.  Made Object and Library synonyms for
    StaticObject and StaticLibrary, respectively.

  - Add LIBS and LIBPATH dependencies for shared libraries.

  - Removed support for the prefix, suffix and src_suffix arguments
    to Builder() to be callable functions.

  - Fix handling file names with multiple dots.

  - Allow a build directory to be outside of the SConstruct tree.

  - Add a FindFile() function that searches for a file node with a
    specified name.

  - Add $CPPFLAGS to the shared-object command lines for g++ and gcc.

  From Charles Crain and Steven Knight:

  - Add a "tools=" keyword argument to Environment instantiation,
    and a separate Tools() method, for more flexible specification
    of tool-specific environment changes.

  From Steven Knight:

  - Add a "platform=" keyword argument to Environment instantiation,
    and a separate Platform() method, for more flexible specification
    of platform-specific environment changes.

  - Updated README instructions and setup.py code to catch an
    installation failure from not having distutils installed.

  - Add descriptions to the -H help text for -D, -u and -U so
    people can tell them apart.

  - Remove the old feature of automatically splitting strings
    of file names on white space.

  - Add a dependency Scanner for native Fortran "include" statements,
    using a new "F77PATH" construction variable.

  - Fix C #include scanning to detect file names with characters like
    '-' in them.

  - Add more specific version / build output to the -v option.

  - Add support for the GNU as, Microsoft masm, and nasm assemblers.

  - Allow the "target" argument to a Builder call to be omitted, in
    which case the target(s) are deduced from the source file(s) and the
    Builder's specified suffix.

  - Add a tar archive builder.

  - Add preliminary support for the OS/2 Platform, including the icc
    and ilink Tools.

  From Jeff Petkau:

  - Fix --implicit-cache if the scanner returns an empty list.

  From Anthony Roach:

  - Add a "multi" keyword argument to Builder creation that specifies
    it's okay to call the builder multiple times for a target.

  - Set a "multi" on Aliases so multiple calls will append to an Alias.

  - Fix emitter functions' use of path names when using BuildDir or
    in subdirectories.

  - Fix --implicit-cache causing redundant rebuilds when the header
    file list changed.

  - Fix --implicit-cache when a file has no implicit dependencies and
    its source is generated.

  - Make the drive letters on Windows always be the same case, so that
    changes in the case of drive letters don't cause a rebuild.

  - Fall back to importing the SCons.TimeStamp module if the SCons.MD5
    module can't be imported.

  - Fix interrupt handling to guarantee that a single interrupt will
    halt SCons both when using -j and not.

  - Fix .sconsign signature storage so that output files of one build
    can be safely used as input files to another build.

  - Added a --debug=time option to print SCons execution times.

  - Print an error message if a file can't be unlinked before being
    built, rather than just silently terminating the build.

  - Add a SideEffect() method that can be used to tell the build
    engine that a given file is created as a side effect of building
    a target.  A file can be specified as a side effect of more than
    one build comand, in which case the commands will not be executed
    simultaneously.

  - Significant performance gains from not using our own version of
    the inefficient stock os.path.splitext() method, caching source
    suffix computation, code cleanup in MultiStepBuilder.__call__(),
    and replicating some logic in scons_subst().

  - Add --implicit-deps-changed and --implicit-deps-unchanged options.

  - Add a GetLaunchDir() function.

  - Add a SetBuildSignatureType() function.

  From Zed Shaw:

  - Add an Append() method to Environments, to append values to
    construction variables.

  - Change the name of Update() to Replace().  Keep Update() as a
    deprecated synonym, at least for now.

  From Terrel Shumway:

  - Use a $PYTHON construction variable, initialized to sys.executable,
    when using Python to build parts of the SCons packages.

  - Use sys.prefix, not sys.exec_prefix, to find pdb.py.



RELEASE 0.07 - Thu,  2 May 2002 13:37:16 -0500

  From Chad Austin:

  - Changes to build SCons packages on IRIX (and other *NIces).

  - Don't create a directory Node when a file already exists there,
    and vice versa.

  - Add 'dirs' and 'names' keyword arguments to SConscript for
    easier specification of subsidiary SConscript files.

  From Charles Crain:

  - Internal cleanup of environment passing to function Actions.

  - Builders can now take arbitrary keyword arguments to create
    attributes to be passed to: command generator functions,
    FunctionAction functions, Builder emitter functions (below),
    and prefix/suffix generator functions (below).

  - Command generator functions can now return ANYTHING that can be
    converted into an Action (a function, a string, a CommandGenerator
    instance, even an ActionBase instance).

  - Actions now call get_contents() with the actual target and source
    nodes used for the build.

  - A new DictCmdGenerator class replaces CompositeBuilder to support
    more flexible Builder behavior internally.

  - Builders can now take an emitter= keyword argument.  An emitter
    is a function that takes target, source, and env argument, then
    return a 2-tuple of (new sources, new targets).  The emitter is
    called when the Builder is __call__'ed, allowing a user to modify
    source and target lists.

  - The prefix, suffix and src_suffix Builder arguments now take a
    callable as well a string.  The callable is passed the Environment
    and any extra Builder keyword arguments and is expected to return
    the appropriate prefix or suffix.

  - CommandActions can now be a string, a list of command + argument
    strings, or a list of commands (strings or lists).

  - Added shared library support.  The Object and Library Builders now
    take a "shared=1" keyword argument to specify that a shared object
    or shared library should be built.  It is an error to try to build
    static objects into a shared library or vice versa.

  - Win32 support for .def files has been added.  Added the Win32-specific
    construction variables $WIN32DEFPREFIX, $WIN32DEFSUFFIX,
    $WIN32DLLPREFIX and $WIN32IMPLIBPREFIX.  When building a .dll,
    the new construction variable $WIN32_INSERT_DEF, controls whether
    the appropriately-named .def file is inserted into the target
    list (if not already present).  A .lib file is always added to
    a Library build if not present in the list of targets.

  - ListBuilder now passes all targets to the action, not just the first.

  - Fix so that -c now deletes generated yacc .h files.

  - Builder actions and emitter functions can now be initialized, through
    construction variables, to things other than strings.

  - Make top-relative '#/dir' lookups work like '#dir'.

  - Fix for relative CPPPATH directories in subsidiary SConscript files
    (broken in 0.06).

  - Add a for_signature argument to command generators, so that
    generators that need to can return distinct values for the
    command signature and for executing the command.

  From Alex Jacques:

  - Create a better scons.bat file from a py2bat.py script on the Python
    mailing list two years ago (modeled after pl2bat.pl).

  From Steven Knight:

  - Fix so that -c -n does *not* remove the targets!

  - Man page:  Add a hierarchical libraries + Program example.

  - Support long MSVC linker command lines through a builder action
    that writes to a temporary file and uses the magic MSVC "link @file"
    argument syntax if the line is longer than 2K characters.

  - Fix F77 command-line options on Win32 (use /Fo instead of -o).

  - Use the same action to build from .c (lower case) and .C (upper
    case) files on case-insensitive systems like Win32.

  - Support building a PDF file directly from a TeX or LaTeX file
    using pdftex or pdflatex.

  - Add a -x option to runtest.py to specify the script being tested.
    A -X option indicates it's an executable, not a script to feed
    to the Python interpreter.

  - Add a Split() function (identical to SCons.Util.argmunge()) for use
    in the next release, when Builders will no longer automatically split
    strings on white space.

  From Steve Leblanc:

  - Add the SConscriptChdir() method.

  From Anthony Roach:

  - Fix --debug=tree when used with directory targets.

  - Significant internal restructuring of Scanners and Taskmaster.

  - Added new --debug=dtree option.

  - Fixes for --profile option.

  - Performance improvement in construction variable substitution.

  - Implemented caching of content signatures, plus added --max-drift
    option to control caching.

  - Implemented caching of dependency signatures, enabled by new
    --implicit-cache option.

  - Added abspath construction variable modifier.

  - Added $SOURCE variable as a synonym for $SOURCES[0].

  - Write out .sconsign files on error or interrupt so intermediate
    build results are saved.

  - Change the -U option to -D.  Make a new -U that builds just the
    targets from the local SConscript file.

  - Fixed use of sys.path so Python modules can be imported from
    the SConscript directory.

  - Fix for using Aliases with the -u, -U and -D options.

  - Fix so that Nodes can be passed to SConscript files.

  From Moshe Zadka:
  
  - Changes for official Debian packaging.



RELEASE 0.06 - Thu, 28 Mar 2002 01:24:29 -0600

  From Charles Crain:

  - Fix command generators to expand construction variables.

  - Make FunctionAction arguments be Nodes, not strings.

  From Stephen Kennedy:

  - Performance:  Use a dictionary, not a list, for a Node's parents.

  From Steven Knight:

  - Add .zip files to the packages we build.

  - Man page:  document LIBS, fix a typo, document ARGUMENTS.

  - Added RANLIB and RANLIBFLAGS construction variables.  Only use them
    in ARCOM if there's a "ranlib" program on the system.

  - Add a configurable CFILESUFFIX for the Builder of .l and .y files
    into C files.

  - Add a CXXFile Builder that turns .ll and .yy files into .cc files
    (configurable via a CXXFILESUFFIX construction variable).

  - Use the POSIX-standard lex -t flag, not the GNU-specific -o flag.
    (Bug reported by Russell Christensen.)

  - Fixed an exception when CPPPATH or LIBPATH is a null string.
    (Bug reported by Richard Kiss.)

  - Add a --profile=FILE option to make profiling SCons easier.

  - Modify the new DVI builder to create .dvi files from LaTeX (.ltx
    and .latex) files.

  - Add support for Aliases (phony targets).

  - Add a WhereIs() method for searching for path names to executables.

  - Add PDF and PostScript document builders.

  - Add support for compiling Fortran programs from a variety of
    suffixes (a la GNU Make):  .f, .F, .for, .FOR, .fpp and .FPP

  - Support a CPPFLAGS variable on all default commands that use the
    C preprocessor.

  From Steve Leblanc:

  - Add support for the -U option.

  - Allow CPPPATH, LIBPATH and LIBS to be specified as white-space
    separated strings.

  - Add a document builder to create .dvi files from TeX (.tex) files.

  From Anthony Roach:

  - Fix:  Construction variables with values of 0 were incorrectly
    interpolated as ''. 

  - Support env['VAR'] to fetch construction variable values.

  - Man page:  document Precious().



RELEASE 0.05 - Thu, 21 Feb 2002 16:50:03 -0600

  From Chad Austin:

  - Set PROGSUFFIX to .exe under Cygwin.

  From Charles Crain:

  - Allow a library to specified as a command-line source file, not just
    in the LIBS construction variable.

  - Compensate for a bug in os.path.normpath() that returns '' for './'
    on WIN32.

  - More performance optimizations:  cache #include lines from files,
    eliminate unnecessary calls.

  - If a prefix or suffix contains white space, treat the resulting
    concatenation as separate arguments.

  - Fix irregularities in the way we fetch DevStudio information from
    the Windows registry, and in our registry error handling.

  From Steven Knight:

  - Flush stdout after print so it intermixes correctly with stderr
    when redirected.

  - Allow Scanners to return a list of strings, and document how to
    write your own Scanners.

  - Look up implicit (scanned) dependencies relative to the directory
    of file being scanned.

  - Make writing .sconsign files more robust by first trying to write
    to a temp file that gets renamed.

  - Create all of the directories for a list of targets before trying
    to build any of the targets.

  - WIN32 portability fixes in tests.

  - Allow the list of variables exported to an SConscript file to be
    a UserList, too.

  - Document the overlooked LIBPATH construction variable.
    (Bug reported by Eicke Godehardt.)

  - Fix so that Ignore() ignores indirect, implicit dependencies
    (included files), not just direct dependencies.

  - Put the man page in the Debian distribution.

  - Run HTML docs through tidy to clean up the HTML (for Konqueror).

  - Add preliminary support for Unicode strings.

  - Efficiency:  don't scan dependencies more than once during the
    walk of a tree.

  - Fix the -c option so it doesn't stop removing targets if one doesn't
    already exist.
    (Bug reported by Paul Connell.)

  - Fix the --debug=pdb option when run on Windows NT.
    (Bug reported by Paul Connell.)

  - Add support for the -q option.

  From Steve Leblanc:

  - Add support for the -u option.

  - Add .cc and .hh file suffixes to the C Scanner.

  From Anthony Roach:

  - Make the scons script return an error code on failures.

  - Add support for using code to generate a command to build a target.



RELEASE 0.04 - Wed, 30 Jan 2002 11:09:42 -0600

  From Charles Crain:

  - Significant performance improvements in the Node.FS and
    Scanner subsystems.

  - Fix signatures of binary files on Win32 systems.

  - Allow LIBS and LIBPATH to be strings, not just arrays.

  - Print a traceback if a Python-function builder throws an exception.

  From Steven Knight:

  - Fix using a directory as a Default(), and allow Default() to
    support white space in file names for strings in arrays.

  - Man page updates:  corrected some mistakes, documented various
    missing Environment methods, alphabetized the construction
    variables and other functions, defined begin and end macros for
    the example sections, regularized white space separation, fixed
    the use of Export() in the Multiple Variants example.

  - Function action fixes:  None is now a successful return value.
    Exceptions are now reported.  Document function actions.

  - Add 'Action' and 'Scanner' to the global keywords so SConscript
    files can use them too.

  - Removed the Wrapper class between Nodes and Walkers.

  - Add examples using Library, LIBS, and LIBPATH.

  - The C Scanner now always returns a sorted list of dependencies
    so order changes don't cause unnecessary rebuilds.

  - Strip $(-$) bracketed text from command lines.  Use this to
    surround $_INCDIRS and $_LIBDIRS so we don't rebuild in response
    to changes to -I or -L options.

  - Add the Ignore() method to ignore dependencies.

  - Provide an error message when a nonexistent target is specified
    on the command line.

  - Remove targets before building them, and add an Environment
    Precious() method to override that.

  - Eliminate redundant calls to the same builder when the target is a
    list of targets:  Add a ListBuilder class that wraps Builders to
    handle lists atomically.  Extend the Task class to support building
    and updating multiple targets in a single Task.  Simplify the
    interface between Task and Taskmaster.

  - Add a --debug=pdb option to re-run SCons under the Python debugger.

  - Only compute a build signature once for each node.

  - Changes to our sys.path[] manipulation to support installation into
    an arbitrary --prefix value.

  From Steve Leblanc:

  - Add var=value command-line arguments.



RELEASE 0.03 - Fri, 11 Jan 2002 01:09:30 -0600

  From Charles Crain:

  - Performance improvements in the Node.FS and Sig.Calculator classes.

  - Add the InstallAs() method.

  - Execute commands through an external interpreter (sh, cmd.exe, or
    command.com) to handle redirection metacharacters.

  - Allow the user to supply a command handler.

  From Steven Knight:

  - Search both /usr/lib and /usr/local/lib for scons directories by
    adding them both to sys.path, with whichever is in sys.prefix first.

  - Fix interpreting strings of multiple white-space separated file names
    as separate file names, allowing prefixes and suffixes to be appended
    to each individually.

  - Refactor to move CompositeBuilder initialization logic from the
    factory wrapper to the __init__() method, and allow a Builder to
    have both an action and a src_builder (or array of them).

  - Refactor BuilderBase.__call__() to separate Node creation/lookup
    from initialization of the Node's builder information.

  - Add a CFile Builder object that supports turning lex (.l) and
    yacc (.y) files into .c files.

  - Document: variable interpretation attributes; how to propogate
    the user's environment variables to executed commands; how to
    build variants in multiple BuildDirs.

  - Collect String, Dict, and List type-checking in common utility
    routines so we can accept User{String,Dict,List}s all over.

  - Put the Action factory and classes into their own module.

  - Use one CPlusPlusAction in the Object Builder's action dictionary,
    instead of letting it create multiple identical instances.

  - Document the Install() and InstallAs() methods.

  From Steve Leblanc:

  - Require that a Builder be given a name argument, supplying a
    useful error message when it isn't.

  From Anthony Roach:

  - Add a "duplicate" keyword argument to BuildDir() that can be set
    to prevent linking/copying source files into build directories.

  - Add a "--debug=tree" option to print an ASCII dependency tree.

  - Fetch the location of the Microsoft Visual C++ compiler(s) from
    the Registry, instead of hard-coding the location.
    
  - Made Scanner objects take Nodes, not path names.
    
  - Have the C Scanner cache the #include file names instead of
    (re-)scanning the file each time it's called.

  - Created a separate class for parent "nodes" of file system roots,
    eliminating the need for separate is-parent-null checks everywhere.
    
  - Removed defined __hash__() and __cmp() methods from FS.Entry, in
    favor of Python's more efficient built-in identity comparisons.



RELEASE 0.02 - Sun, 23 Dec 2001 19:05:09 -0600

  From Charles Crain:

  - Added the Install(), BuildDir(), and Export() methods.

  - Fix the -C option by delaying setting the top of the FS tree.

  - Avoid putting the directory path on the libraries in the LIBS
    construction variable.

  - Added a GetBuildPath() method to return the full path to the
    Node for a specified string.

  - Fixed variable substitution in CPPPATH and LIBPATH.

  From Steven Knight:

  - Fixed the version comment in the scons.bat (the UNIX geek used
    # instead of @rem).

  - Fix to setup.py so it doesn't require a sys.argv[1] argument.

  - Provide make-like warning message for "command not found" and
    similar errors.

  - Added an EXAMPLES section to the man page.

  - Make Default() targets properly relative to their SConscript
    file's subdirectory.

  From Anthony Roach:

  - Documented CXXFLAGS, CXXCOM, and CPPPATH.

  - Fixed SCONS_LIB_DIR to work as documented.

  - Made Default() accept Nodes as arguments.

  - Changed Export() to make it easier to use.
  
  - Added the Import() and Return() methods.



RELEASE 0.01 - Thu Dec 13 19:25:23 CST 2001

A brief overview of important functionality available in release 0.01:

  - C and C++ compilation on POSIX and Windows NT.

  - Automatic scanning of C/C++ source files for #include dependencies.

  - Support for building libraries; setting construction variables
    allows creation of shared libraries.

  - Library and C preprocessor search paths.

  - File changes detected using MD5 signatures.

  - User-definable Builder objects for building files.

  - User-definable Scanner objects for scanning for dependencies.

  - Parallel build (-j) support.

  - Dependency cycles detected.

  - Linux packages available in RPM and Debian format.

  - Windows installer available.
