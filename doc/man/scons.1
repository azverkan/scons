.\" Copyright (c) 2001, 2002 Steven Knight
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included
.\" in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
.\" KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
.\" WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
.\" NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
.\" LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
.\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
.\" WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" __FILE__ __REVISION__ __DATE__ __DEVELOPER__
.\"
.\" ES - Example Start - indents and turns off line fill
.de ES
.RS
.nf
..
.\" EE - Example End - ends intend and turns line fill back on
.de EE
.RE
.fi
..
.TH SCONS 1 "January 2002"
.SH NAME
scons \- software constructor
.SH SYNOPSIS
.B scons
[
.IR options ...
]
[
.IR name = val ...
]
[
.IR targets ...
]
.SH DESCRIPTION

The 
.B scons 
utility builds software (or other files) by determining which
component pieces must be rebuilt and executing the necessary commands to
rebuild them.

By default, 
.B scons 
searches for a file named 
.IR SConstruct ,
.IR Sconstruct ,
or
.I sconstruct
(in that order) in the current directory and reads its
configuration from the first file found.  An alternate file name may be
specified via the 
.B -f
option. If the specified file is not
in the local directory, 
.B scons 
will internally change its working
directory (chdir) to the directory containing the file.

The configuration file specifies the files to be built, and
(optionally) the rules to build those files.  Reasonable default
rules exist for building common software components (executable
programs, object files, libraries), so that for simple software
projects, only the target and input files need be specified.

.B scons
can scan known input files automatically for dependency
information (for example, #include statements
in C or C++ files) and will rebuild dependent files appropriately
whenever any "included" input file changes. 
.B scons
supports the
ability to define new scanners for unknown input file types.

.B scons
is normally executed in a top-level directory containing a
.I SConstruct
file, specifying the target or targets to be built as
command-line arguments.  The command

.ES
scons .
.EE

will build all target files in or below the current directory 
.RI ( . ")."

.ES
scons /
.EE

will build all target files in or below the root directory (i.e.,
all files).  Specific targets may be supplied:

.ES
scons foo bar
.EE

Targets may be omitted from the command line,
in which case the targets specified
in the configuration file(s) as
.B Default
targets will be built:

.ES
scons
.EE

Specifying "cleanup" targets in configuration files is not
necessary.  The 
.B -c
flag removes all files
necessary to build the specified target:

.ES
scons -c .
.EE

to remove all target files, or:

.ES
scons -c build export
.EE

to remove target files under build and export.

A subset of a hierarchical tree may be built by
remaining at the top-level directory (where the 
.I SConstruct
file lives) and specifying the subdirectory as the target to be
built:

.ES
scons src/subdir
.EE

or by changing directory and invoking scons with the
.B -u
option, which traverses up the directory
hierarchy until it finds the 
.I SConstruct
file, and then builds
targets relatively to the current subdirectory:

.ES
cd src/subdir
scons -u .
.EE

.B scons
supports building multiple targets in parallel via a
.B -j
option that takes, as its argument, the number
of simultaneous tasks that may be spawned:

.ES
scons -j 4
.EE

builds four targets in parallel, for example.

Values of variables to be passed to the configuration file(s)
may be specified on the command line:

.ES
scons debug=1 .
.EE

These variables can be used in the configuration file(s) to modify
the build in any way.

.\" .B scons
.\" can maintain a cache of target (derived) files that can
.\" be shared between multiple builds.  When caching is enabled in a
.\" configuration file, any target files built by 
.\" .B scons
.\" will be copied
.\" to the cache.  If an up-to-date target file is found in the cache, it
.\" will be retrieved from the cache instead of being rebuilt locally.
.\" Caching behavior may be disabled and controlled in other ways by the
.\" .BR --cache-force , 
.\" .BR --cache-disable ,
.\" and
.\" .B --cache-show
.\" command-line options.  The
.\" .B --random
.\" option is useful whenever multiple builds may be
.\" trying to update the cache simultaneously.

.B scons
requires Python version 1.5.2 or later.
There should be no other dependencies or requirements to run
.B scons.

The default
.B scons
configuration assumes
use of the Microsoft Visual C++ compiler suite on WIN32 systems,
and assumes a C compiler named
.B cc
and a C++ compiler named
.B c++
(such as found in the GNU C compiler suite)
on any other type of system.
You may, of course, override these default values
by appropriate configuration of
Environment construction variables.

.SH OPTIONS
In general, 
.B scons 
supports the same command-line options as GNU
.BR make , 
and many of those supported by 
.BR cons .

.TP
-b
Ignored for compatibility with non-GNU versions of
.BR make.

.TP
-c, --clean, --remove
Clean up by removing all target files for which a construction
command is specified.

.\" .TP
.\" --cache-disable, --no-cache
.\" Disable caching.  Will neither retrieve files from cache nor flush
.\" files to cache.  Has no effect if use of caching is not specified
.\" in a configuration file.
.\"
.\" .TP
.\" --cache-force, --cache-populate
.\" Populate a cache by forcing any already-existing up-to-date
.\" target files to the cache, in addition to files built by this
.\" invocation.  This is useful to populate a new cache with
.\" appropriate target files, or to make available in the cache
.\" any target files recently built with caching disabled via the
.\" .B --cache-disable
.\" option.
.\"
.\" .TP
.\" --cache-show
.\" When retrieving a target file from a cache, show the command
.\" that would have been executed to build the file.  This produces
.\" consistent output for build logs, regardless of whether a target
.\" file was rebuilt or retrieved from cache.

.TP 
.RI "-C" " directory" ",  --directory=" directory
Change to the specified 
.I directory
before searching for the 
.IR SConstruct ,
.IR Sconstruct ,
or
.I sconstruct
file, or doing anything
else.  Multiple 
.B -C
options are interpreted
relative to the previous one, and the right-most
.B -C
option wins. (This option is nearly
equivalent to 
.BR "-f directory/SConstruct" ,
except that it will search for
.IR SConstruct ,
.IR Sconstruct , 
or
.I sconstruct
in the specified directory.)

.\" .TP
.\" -d
.\" Display dependencies while building target files.  Useful for
.\" figuring out why a specific file is being rebuilt, as well as
.\" general debugging of the build process.

.TP
.RI --debug= type
Debug the build process.
.I type
specifies what type of debugging:

.TP
.RI --debug=pdb
Re-run SCons under the control of the
.RI pdb
Python debugger.
The
.RI --debug=pdb
argument will be stripped from the command-line,
but all other arguments will be passed in-order
to the SCons invocation run by the debugger.

.TP
.RI --debug=tree
Print the dependency tree
after each top-level target is built.

.TP
-e, --environment-overrides
Variables from the execution environment override construction
variables from the configuration files.

.TP
.RI -f " file" ", --file=" file ", --makefile=" file ", --sconstruct=" file
Use 
.I file 
as the initial configuration
file. If 
.I file
is in another directory,
.B scons 
will change to that directory before building targets.

.TP 
-h, --help
Print a local help message for this build, if one is defined in
the configuration file(s), plus a line that describes the 
.B -H
option for command-line option help.  If no local help message
is defined, prints the standard help message about command-line
options.  Exits after displaying the appropriate message.

.TP
-H, --help-options
Print the standard help message about command-line options and
exit.

.TP
-i, --ignore-errors
Ignore all errors from commands executed to rebuild files.

.TP 
.RI -I " directory" ", --include-dir=" directory
Specifies a 
.I directory
to search for
imported Python modules.  If several 
.B -I
options
are used, the directories are searched in the order specified.

.TP
.RI -j " N" ", --jobs=" N
Specifies the number of jobs (commands) to run simultaneously.
If there is more than one 
.B -j 
option, the last one is effective.
.\" ??? If the 
.\" .B -j 
.\" option
.\" is specified without an argument,
.\" .B scons 
.\" will not limit the number of
.\" simultaneous jobs.

.TP
-k, --keep-going
Continue as much as possible after an error.  The target that
failed and those that depend on it will not be remade, but other
targets specified on the command line will still be processed.

.\" .TP
.\" .RI  -l " N" ", --load-average=" N ", --max-load=" N
.\" No new jobs (commands) will be started if
.\" there are other jobs running and the system load
.\" average is at least 
.\" .I N
.\" (a floating-point number).
.\"
.\" .TP
.\" --list-derived
.\" List derived files (targets, dependencies) that would be built,
.\" but do not build them.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]
.\"
.\" .TP
.\" --list-actions
.\" List derived files that would be built, with the actions
.\" (commands) that build them.  Does not build the files.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]
.\"
.\" .TP
.\" --list-where
.\" List derived files that would be built, plus where the file is
.\" defined (file name and line number).  Does not build the files.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]

.TP
-m
Ignored for compatibility with non-GNU versions of
.BR make .

.TP
-n, --just-print, --dry-run, --recon
No execute.  Print the commands that would be executed to build
any out-of-date target files, but do not execute the commands.

.\" .TP
.\" .RI -o " file" ", --old-file=" file ", --assume-old=" file
.\" Do not rebuild 
.\" .IR file ,
.\" and do
.\" not rebuild anything due to changes in the contents of
.\" .IR file .
.\" .TP 
.\" .RI --override " file"
.\" Read values to override specific build environment variables
.\" from the specified 
.\" .IR file .
.\" .TP
.\" -p
.\" Print the data base (construction environments,
.\" Builder and Scanner objects) that are defined
.\" after reading the configuration files.
.\" After printing, a normal build is performed
.\" as usual, as specified by other command-line options.
.\" This also prints version information
.\" printed by the 
.\" .B -v
.\" option.
.\"
.\" To print the database without performing a build do:
.\"
.\" .ES
.\" scons -p -q
.\" .EE

.TP
.RI --profile= file
Run SCons under the Python profile
and save the results in the specified
.IR file .
The results may be analyzed using the Python
pstats module.
.TP
-q, --question
Do not run any commands, or print anything.  Just return an exit
status that is zero if the specified targets are already up to
date, non-zero otherwise.

.\" .TP
.\" -r, -R, --no-builtin-rules, --no-builtin-variables
.\" Clear the default construction variables.  Construction
.\" environments that are created will be completely empty.
.\"
.\" .TP
.\" --random
.\" Build dependencies in a random order.  This is useful when
.\" building multiple trees simultaneously with caching enabled as a
.\" way to prevent multiple builds from simultaneously trying to build
.\" or retrieve the same target files.

.TP
-s, --silent, --quiet
Silent.  Do not print commands that are executed to rebuild
target files.

.TP
-S, --no-keep-going, --stop
Ignored for compatibility with GNU 
.BR make .

.TP
-t, --touch
Ignored for compatibility with GNU
.BR make .  
(Touching a file to make it
appear up-to-date is unnecessary when using 
.BR scons .)

.TP
-u, --up, --search-up
Walks up the directory structure until an 
.I SConstruct ,
.I Sconstruct
or 
.I sconstruct
file is found, and uses that
as the top of the directory tree. Only targets at or below the
current directory will be built.

.TP
-U
Works exactly the same way as the
.B -u
option except for the way default targets are handled.
When this option is used and no targets are specified on the command line,
all default targets are built, whether or not they are below the current
directory.

.TP
-v, --version
Print the 
.B scons
version, copyright information,
list of authors, and any other relevant information.
Then exit.

.TP
-w, --print-directory
Print a message containing the working directory before and
after other processing.

.TP
--no-print-directory
Turn off -w, even if it was turned on implicitly.

.\" .TP
.\" .RI --write-filenames= file
.\" Write all filenames considered into
.\" .IR file .
.\"
.\" .TP
.\" .RI -W " file" ", --what-if=" file ", --new-file=" file ", --assume-new=" file
.\" Pretend that the target 
.\" .I file 
.\" has been
.\" modified.  When used with the 
.\" .B -n
.\" option, this
.\" show you what would be rebuilt if you were to modify that file.
.\" Without 
.\" .B -n
.\" ... what? XXX
.\"
.\" .TP
.\" --warn-undefined-variables
.\" Warn when an undefined variable is referenced.
.\"
.\" .TP 
.\" .RI -Y " repository" ", --repository=" repository
.\" Search the specified repository for any input and target
.\" files not found in the local directory hierarchy.  Multiple
.\" .B -Y
.\" options may specified, in which case the
.\" repositories are searched in the order specified.

.SH CONFIGURATION FILE REFERENCE
.SS Construction Environments
A construction environment is the basic means by which the configuration
files communicate build information to 
.BR scons .
A new construction environment is created using the 
.B Environment 
function:

.ES
env = Environment()
.EE

Build rules are specified by calling builder methods on a construction
environment. The arguments to the builder methods are target (a list of
target files) and source (a list of source files). If a string is given
for target or source, then 
.B scons 
interprets it as a space delimited list
of files. The following are examples of calling a builder:

.ES
env.Program(target = 'bar', source = 'bar.c foo.c')
env.Program('bar', 'bar.c foo.c')
env.Program('bar', ['bar.c', 'foo.c'])
.EE

.B scons
provides the following builders:

.IP Object
Builds an object file from one or more C/C++ source files. Source files
must have one of the following extensions: .c, .C, .cc, .cpp, .cxx, .c++, .C++. 
The target object file prefix and suffix (if any) are automatically
added. Example:

.ES
env.Object(target = 'bar', source = 'bar.c')
.EE

.IP Program
Builds an executable given one or more object files or C/C++ source
files. If any C/C++ source files are given, then they will be automatically
compiled to object files. The executable prefix and suffix (if any) are
automatically added to the target. Example:

.ES
env.Program(target = 'bar', source = 'bar.c foo.o')
.EE

.IP Library
Builds a library given one or more object files or C/C++ source
files. If any C/C++ source files are given, then they will be automatically
compiled to object files. The library prefix and suffix (if any) are
automatically added to the target. Example:

.ES
env.Library(target = 'bar', source = 'bar.c foo.o')
.EE

.IP CFile
Builds a C source file given a lex (.l) or yacc (.y) input file.
The suffix specified by the $CFILESUFFIX construction variable
(.c by default)
is automatically added to the target
if it is not already present. Example:

.ES
env.CFile(target = 'foo.c', source = 'foo.l') # builds foo.c
env.CFile(target = 'bar', source = 'bar.y')   # builds bar.c
.EE

.IP CXXFile
Builds a C++ source file given a lex (.ll) or yacc (.yy) input file.
The suffix specified by the $CXXFILESUFFIX construction variable
(.cc by default)
is automatically added to the target
if it is not already present. Example:

.ES
env.CXXFile(target = 'foo.cc', source = 'foo.ll') # builds foo.cc
env.CXXFile(target = 'bar', source = 'bar.yy')   # builds bar.cc
.EE
.LP
C/C++ source files are automatically scanned for dependencies by 
.B scons
so the dependencies do not need to be provided. In addition, all builder
targets automatically depend on their sources. An explicit dependency can
be specified using the 
.B Depends 
method of a construction environment (see below).

Additional Environment methods include:

.TP
.RI Command( target ", " source ", " commands )
Executes a specific command
(or list of commands)
to build a target file or files.
This is more convenient
than defining a separate Builder object
for a single special-case build.

.ES
env.Command('foo.out', 'foo.in',
            "$FOO_BUILD < $SOURCES > $TARGET")
env.Command('bar.out', 'bar.in',
            ["rm -f $TARGET",
             "$BAR_BUILD < $SOURCES > $TARGET"])
.EE

.TP
.RI Copy([ key = val ", ...])"
Return a separate copy of a construction environment.
If there are any keyword arguments specified,
they are added to the returned copy,
overwriting any existing values
for the keywords.

.ES
env2 = env.Copy()
env3 = env.Copy(CCFLAGS = '-g')
.EE

.TP
.RI Depends( target ", " dependency )
Specifies an explicit dependency;
the target file(s) will be rebuilt
whenever the dependency file(s) has changed.
This should only be necessary
for cases where the dependency
is not caught by a Scanner
for the file.

.ES
env.Depends('foo', 'other-input-file-for-foo')
.EE

.TP
.RI Dictionary([ vars ])
Returns a dictionary object
containing copies of all of the
construction variables in the environment.
If there are any variable names specified,
only the specified construction
variables are returned in the dictionary.

.ES
dict = env.Dictionary()
cc_dict = env.Dictionary('CC', 'CCFLAGS', 'CCCOM')
.EE

.TP
.RI Ignore( target ", " dependency )
The specified dependency file(s)
will be ignored when deciding if
the target file(s) need to be rebuilt.

.ES
env.Ignore('foo', 'foo.c')
env.Ignore('bar', ['bar1.h', 'bar2.h'])
.EE

.TP
.RI Install( dir ", " source )
Installs one or more files in a destination directory.
The file names remain the same.

.ES
env.Install(dir = '/usr/local/bin', source = 'foo bar')
.EE

.TP
.RI InstallAs( target ", " source )
Installs one or more files as specific file names,
allowing changing a file name as part of the
installation.
It is an error if the target and source
list different numbers of files.

.ES
env.InstallAs(target = '/usr/local/bin/foo',
              source = 'foo_debug')
env.InstallAs(target = '../lib/libfoo.a ../lib/libbar.a',
              source = 'libFOO.a libBAR.a')
.EE

.TP
.RI Update( key = val ", [...])"
Updates the contents of an environment
with the specified keyword arguments.

.ES
env.Update(CCFLAGS = '-g', FOO = 'foo.xxx')
.EE

.SS Construction Variables

A construction environment has an associated dictionary of construction
variables that are used by built-in or user-supplied build rules. A number
of useful construction variables are automatically defined by scons for
each supported platform, and additional construction variables can be defined
by the user. The following is a list of the automatically defined construction
variables:

.IP AR
The static library archiver.

.IP ARFLAGS
General options passed to the static library archiver.

.IP ARCOM
The command line used to generate a static library from object files.

.IP BUILDERS
A list of the available builders.
[CFile, CXXFile, Object, Program, Library] by default.

.IP CC 
The C compiler.

.IP CCFLAGS 
General options that are passed to the C compiler.

.IP CCCOM 
The command line used to compile a C source file to an object file.

.IP CFILESUFFIX
The suffix for C source files.
This is used by the internal CFile builder
when generating C files from Lex (.l) or YACC (.y) input files.
The default suffix, of course, is
.IR .c .

.IP CPPPATH
The list of directories that the C preprocessor will search for include
directories. The C/C++ implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in CCFLAGS or CXXFLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in CPPPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(CPPPATH='#/include')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
include = Dir('include')
env = Environment(CPPPATH=include)
.EE

.IP CXX
The C++ compiler.

.IP CXXFILESUFFIX
The suffix for C++ source files.
This is used by the internal CXXFile builder
when generating C++ files from Lex (.ll) or YACC (.yy) input files.
The default suffix is
.IR .cc .

.IP CXXFLAGS 
General options that are passed to the C++ compiler.

.IP CXXCOM
The command line used to compile a C++ source file to an object file.

.IP ENV
A dictionary of environment variables
to use when invoking commands.
Note that, by default,
.B scons
does
.I not
propagate the environment in force when you
execute
.B scons
to the commands used to build target files.
This is so that builds will be guaranteed
repeatable regardless of the environment
variables set at the time
.B scons
is invoked.

If you want to propagate your
environment variables
to the commands executed
to build target files,
you must do so explicitly:

.ES
import os
env = Environment(ENV = os.environ)
.EE

.RS
Note that you can choose only to propagate
certain environment variables.
A common example is
the system
.B PATH
environment variable,
so that
.B scons
uses the same utilities
as the invoking shell (or other process):
.RE

.ES
import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})
.EE

.IP INCPREFIX
The prefix used to specify an include directory on the C compiler command
line.

.IP INCSUFFIX
The suffix used to specify an include directory on the C compiler command
line.

.IP LEX
The lexical analyzer generator.

.IP LEXFLAGS
General options passed to the lexical analyzer generator.

.IP LEXCOM
The command line used to call the lexical analyzer generator
to generate a source file.

.IP LIBDIRPREFIX
The prefix used to specify a library directory on the linker command line.

.IP LIBDIRSUFFIX
The suffix used to specify a library directory on the linker command line.

.IP LIBLINKPREFIX
The prefix used to specify a library to link on the linker command line.

.IP LIBLINKSUFFIX
The suffix used to specify a library to link on the linker command line.

.IP LIBPATH
The list of directories that will be searched for libraries.
The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in LINKFLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in LIBPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(LIBPATH='#/libs')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
libs = Dir('libs')
env = Environment(LIBPATH=libs)
.EE

.IP LIBPREFIX
The prefix used for library file names.

.IP LIBS
A list of one or more libraries
that will be linked with
any executable programs
created by this environment.

.IP LIBSUFFIX 
The suffix used for library file names.

.IP LINK
The linker.

.IP LINKFLAGS
General options passed to the linker.

.IP LINKCOM
The command line used to link object files into an executable.

.IP OBJPREFIX 
The prefix used for object file names.

.IP OBJSUFFIX 
The suffix used for object file names.

.IP PROGPREFIX
The prefix used for executable file names.

.IP PROGSUFFIX
The suffix used for executable file names.

.IP RANLIB
The archive indexer.

.IP RANLIBFLAGS
General options passed to the archive indexer.

.IP SCANNERS
A list of the available implicit dependency scanners. [CScan] by default.

.IP YACC
The parser generator.

.IP YACCFLAGS
General options passed to the parser generator.

.IP YACCCOM
The command line used to call the parser generator
to generate a source file.

.LP
Construction variables can be retrieved and set using the 
.B Dictionary 
method of the construction environment:

.ES
dict = env.Dictionary()
dict["CC"] = "cc"
.EE

Construction variables can also be passed to the construction environment
constructor:

.ES
env = Environment(CC="cc")
.EE

or when copying a construction environment using the 
.B Copy 
method:

.ES
env2 = env.Copy(CC="cl.exe")
.EE

.SS Other Functions

.B scons
also provides various additional functions,
not associated with a construction environment,
that configuration files can use:

.TP
.RI BuildDir( build_dir ", " src_dir ", [" duplicate ])
This specifies a build directory to use for all derived files.  
.I build_dir
specifies the build directory to be used for all derived files that would
normally be built under
.IR src_dir .
Multiple build directories can be set up for multiple build variants, for
example. 
.B scons
will link or copy (depending on the platform) all the source files into the
build directory if 
.I duplicate
is set to 1 (the default). If 
.I duplicate
is set to 0, then 
.B scons 
will not copy or link any source files, which may cause build problems in
certain situations (e.g. C source files that are generated by the
build). 
.IR duplicate =0
is usually safe, and is always more efficient than 
.IR duplicate =1.

.TP 
.RI Default( targets )
This specifies a list of default targets. Default targets will be built by
.B scons
if no explicit targets are given on the command line. Multiple targets can
be specified either as a space delimited string of target file names or as
separate arguments.
Target names with white space may be be enclosed in an
array to prevent the string from being split into
separate file names.
.BR Default ()
will also accept the return value of any of the construction environment
builder methods.
Example:

.ES
Default('foo', 'bar', 'baz', ['file with whitespace'])
.EE

.TP
.RI Dir( name ", [" directory ])
This returns an object that represents a given directory 
.IR name . 
.I name
can be a relative or absolute path. 
.I directory
is an optional directory that will be used as the parent directory. 

.TP
.RI Export( vars )
This tells 
.B scons
to export a list of variables from the current
configuration file to all other configuration files. The exported variables
are kept in a global collection, so subsequent exports
will over-write previous exports that have the same name. 
Multiple variable names can be passed to
.BR Export ()
in a space delimited string or as seperate arguments. Example:

.ES
Export("env")
.EE

.TP 
.RI File( name ", [" directory ])
This returns an object that represents a given file 
.IR name . 
.I name
can be a relative or absolute path. 
.I directory
is an optional directory that will be used as the parent directory. 

.TP
.RI Help( text )
This specifies help text to be printed if the 
.B -h 
argument is given to
.BR scons .
.B scons
will exit after printing out the help text.

.TP 
.RI Import( vars )
This tells 
.B scons
to import a list of variables into the current configuration file. This
will import variables that were exported with
.BR Export ()
or in the 
.I exports
argument to 
.BR SConscript ().
Variables exported by 
.BR SConscript ()
have precedence. Multiple variable names can be passed to 
.BR Import ()
in a space delimited string or as seperate arguments. Example:

.ES
Import("env")
.EE

.TP
.RI Return( vars )
This tells
.B scons
what variable(s) to use as the return value(s) of the current configuration
file. These variables will be returned to the "calling" configuration file
as the return value(s) of 
.BR SConscript ().
Multiple variable names can be passed to 
.BR Return ()
in a space delimited string or as seperate arguments. Example:

.ES
Return("foo")
.EE

.TP
.RI SConscript( script ", [" exports ])
This tells
.B scons
to execute
.I script
as a configuration file. The optional 
.I exports
argument provides a list of variable names to export to
.IR script ". " exports
can also be a space delimited string of variables names. 
.I script
must use the
.BR Import ()
function to import the variables. Any variables returned by 
.I script 
using 
.BR Return ()
will be returned by the call to
.BR SConscript (). 
Examples:

.ES
SConscript('dir/SConscript')
foo = SConscript('subdir/SConscript', "env")
.EE

.TP 
.RI SetCommandHandler( function )

This registers a user
.I function
as the handler
for interpreting and executing command-line strings.
The function must expect three arguments:

.ES
def commandhandler(cmd, args, env):
.EE

.I cmd
is the path to the command to be executed.
.I args
is that arguments to the command.
.I env
is a dictionary of the environment variables
in which the command should be executed.

.SH EXTENDING SCONS
.SS Builder Objects
.B scons
can be extended by adding new builders to a construction
environment using the 
.B Builder 
function. Builder accepts the following
arguments:

.IP name
The name of the builder. This will be the
name of the construction environment method
used to create an instance of the builder.

.IP action
The command line string used to build the target from the source. 
.B action
can also be a dictionary
mapping source file name suffixes to
any combination of command line strings
(if the builder should accept multiple source file extensions),
Python functions,
or Action objects
(see the next section).

.IP prefix 
The prefix that will be prepended to the target file name.

.IP suffix
The suffix that will be appended to the target file name.

.IP src_suffix
The expected source file name suffix.

.IP src_builder
Specifies a builder to use when a source file name suffix does not match
any of the suffixes of the builder. Using this argument produces a
multi-stage builder.

.IP generator
A function that returns a list of command lines that will be executed to build
the target(s) from the source(s). The command lines must be returned as
lists, where the first element of the list is the executable, and the other
elements in the list are the arguments that will be passed to the
executable. The 
.I generator
and
.I action
arguments must not both be used for the same Builder. The generator function
should take 3 arguments:
.I source 
- a list of source nodes, 
.I target
- a list of target nodes,
.I env
- the construction environment. Example:

.ES
def g(env, source, target):
	return [["gcc", "-c", "-o"] + target + source] 

b = Builder(name="Object", generator=g)
.EE

.SS Action Objects

The Builder function will turn its
.B action
keyword argument into an appropriate
internal Action object.
Occasionally, it may be more efficient
to create an explicit Action object
and use it to initialize multiple
Builder objects,
rather than let each separate Builder object
create a separate Action.

The Action method takes a single argument
and returns an appropriate object for the action
represented by the type of the argument:

.IP Action
If the argument is already an Action object,
the object is simply returned.

.IP String
If the argument is a string,
a command-line Action is returned.

.ES
Action('$CC -c -o $TARGET $SOURCES')
.EE

.IP Function
If the argument is a Python function,
a function Action is returned.
The Python function takes three keyword arguments,
.B target
(the name of the target file),
.B source
(the name of the source file)
and
.BR env
(the construction environment
used for building the target file).
The
.B target
and
.B source
arguments may be lists of strings if there is
more than one target file or source file.
.IP
The function should return
.B 0
or
.B None
to indicate a successful build of the target file(s).
The function may raise an exception
or return a non-zero exit status
to indicate an unsuccessful build.

.ES
def build_it(target = None, source = None, env = None):
    # build the target from the source
    return 0
 
a = Action(build_it)
.EE

.IP List
If the argument is a list,
then a list of Action objects is returned.
An Action object is created as necessary
for each element in the list.
.PP
If the action argument is not one of the above,
None is returned.

.SS Variable Substitution

Before executing a command,
.B scons
performs construction variable interpolation on the strings that make up
the command line of builders.
Variables are introduced by a
.B $
prefix.
Besides construction variables, scons provides the following
variables for each command execution:

.IP TARGET
The file name of the target being built, or the file name of the first 
target if multiple targets are being built.

.IP TARGETS
The file names of all targets being built.

.IP SOURCES
The file names of the sources of the build command.
.LP 
For example, given the construction variable CC='cc', targets=['foo'], and
sources=['foo.c', 'bar.c']:
.ES
action='$CC -c -o $TARGET $SOURCES'
.EE
would produce the command line:
.ES
cc -c -o foo foo.c bar.c
.EE
Variable names may be surrounded by curly braces ({})
to separate the name from the trailing characters.
Within the curly braces, a variable name may have
a Python slice subscript appended to select one
or more items from a list.
In the previous example, the string:
.ES
${SOURCES[1]}
.EE
would produce:
.ES
bar.c
.EE
Additionally, a variable name may
have the following special
modifiers appended within the enclosing curly braces
to modify the interpolated string:

.IP base
The base path of the file name,
including the directory path
but excluding any suffix.

.IP dir
The name of the directory in which the file exists.

.IP file
The file name,
minus any directory portion.

.IP filebase
Just the basename of the file,
minus any suffix
and minus the directory.

.IP suffix
Just the file suffix.

.LP
For example, the specified target will
expand as follows for the corresponding modifiers:

.ES
$TARGET              => sub/dir/file.x
${TARGET.base}       => sub/dir/file
${TARGET.dir}        => sub/dir
${TARGET.file}       => file.x
${TARGET.filebase}   => file
${TARGET.suffix}     => .x
.EE

.LP
The special pseudo-variables
.R $(
and
.R $)
may be used to surround parts of a command line
that may change
.I without
causing a rebuild--that is,
which are not included in the signature
of target files built with this command.
All text between
.R $(
and
.R $)
will be removed from the command line
before it is added to file signatures,
and the
.R $(
and
.R $)
will be removed before the command is executed.
For example, the command line:

.ES
echo Last build occurred $( $TODAY $). > $TARGET
.EE

.LP
would execute the command:

.ES
echo Last build occurred $TODAY. > $TARGET
.EE

.LP
but the command signature added to any target files would be:

.ES
echo Last build occurred  . > $TARGET
.EE

.SS Scanner Objects

You can use the
.B Scanner
function to define
objects to scan
new file types for implicit dependencies.
Scanner accepts the following arguments:

.IP name
The name of the Scanner.
This is mainly used
to identify the Scanner internally.

.IP argument
An optional argument that, if specified,
will be passed to the scanner function.

.IP skeys
An optional list that can be used to
determine which scanner should be used for
a given Node.
In the usual case of scanning for file names,
this array can be a list of suffixes
for the different file types that this
Scanner knows how to scan.

.IP function
A Python function that will process
the Node (file)
and return a list of strings (file names)
representing the implicit
dependencies found in the contents.
The function takes three arguments:

    def scanner_function(node, env, arg):

The
.B node
argument is the internal
SCons node representing the file.
Use
.B str(node)
to fetch the name of the file, and
.B node.get_contents()
to fetch contents of the file.

The
.B env
argument is the construction environment for the scan.
Fetch values from it using the
.B env.Dictionary()
method.

The
.B arg
argument is the argument supplied
when the scanner was created.

.SH EXAMPLES

To help you get started using SCons,
here is a brief overview of some common tasks:

.SS Basic Compilation From a Single Source File

.ES
env = Environment()
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Basic Compilation From Multiple Source Files

.ES
env = Environment()
env.Program(target = 'foo', source = 'f1.c f2.c f3.c')
.EE

.SS Setting a Compilation Flag

.ES
env = Environment(CCFLAGS = '-g')
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Search The Local Directory For .h Files

Note:  You do
.I not
need to specify -I options by hand.
SCons will construct the right -I options from CPPPATH.

.ES
env = Environment(CPPPATH = ['.'])
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Search Multiple Directories For .h Files

.ES
env = Environment(CPPPATH = ['include1', 'include2'])
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Building a Library

.ES
env = Environment()
env.Library(target = 'mylib', source = 'l1.c l2.c')
.EE

.SS Linking a Local Library Into a Program

.ES
env = Environment(LIBS = 'mylib', LIBPATH = ['.'])
env.Library(target = 'mylib', source = 'l1.c l2.c')
env.Program(target = 'prog', source = 'p1.c p2.c')
.EE

.SS Defining Your Own Builder Object

You
.I must
specify a "name" keyword argument for the builder,
as that becomes the Environment method name
you use to call the builder.
Notice also that you can leave off the target file suffix,
and the builder will add it automatically.

.ES
bld = Builder(name = 'PDFBuilder',
              action = 'pdftex < $SOURCES > $TARGET'
              suffix = '.pdf',
              src_suffix = '.tex')
env = Environment(BUILDERS = [bld])
env.PDFBuilder(target = 'foo.pdf', source = 'foo.tex')

# The following creates "bar.pdf" from "bar.tex"
env.PDFBuilder(target = 'bar', source = 'bar')
.EE

.SS Defining Your Own Scanner Object

.ES
import re

include_re = re.compile(r'^include\\s+(\\S+)$', re.M)

def kfile_scan(node, env, arg):
    contents = node.get_contents()
    includes = include_re.findall(contents)
    return includes

kscan = Scanner(name = 'kfile',
                function = kfile_scan,
                argument = None,
                skeys = ['.k'])
scanners = Environment().Dictionary('SCANNERS')
env = Environment(SCANNERS = scanners + [kscan])

env.Command('foo', 'foo.k', 'kprocess < $SOURCES > $TARGET')

bar_in = File('bar.in')
env.Command('bar', bar_in, 'kprocess $SOURCES > $TARGET')
bar_in.scanner_set(kscan)
.EE

.SS Creating a Hierarchical Build

Notice that the file names specified in a subdirectory
are relative to that subdirectory.

.ES
SConstruct:

    env = Environment()
    env.Program(target = 'foo', source = 'foo.c')

    SConscript('sub/SConscript')

sub/SConscript:

    env = Environment()
    # Builds sub/foo from sub/foo.c
    env.Program(target = 'foo', source = 'foo.c')

    SConscript('dir/SConscript')

sub/dir/SConscript:

    env = Environment()
    # Builds sub/dir/foo from sub/dir/foo.c
    env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Sharing Variables Between SConscript Files

You must explicitly Export() and Import() variables that
you want to share between SConscript files.

.ES
SConstruct:

    env = Environment()
    env.Program(target = 'foo', source = 'foo.c')

    Export("env")
    SConscript('subdirectory/SConscript')

subdirectory/SConscript:

    Import("env")
    env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Building Multiple Variants From the Same Source

Use the BuildDir() method to establish
one or more separate build directories for
a given source directory,
then use the SConscript() method
to specify the SConscript files
in the build directories:

.ES
SConstruct:

    ccflags = '-DFOO'
    Export("ccflags")
    BuildDir('foo', 'src')
    SConscript('foo/SConscript')

    ccflags = '-DBAR'
    Export("ccflags")
    BuildDir('bar', 'src')
    SConscript('bar/SConscript')

src/SConscript:

    Import("ccflags")
    env = Environment(CCFLAGS = ccflags)
    env.Program(target = 'src', source = 'src.c')
.EE

Note the use of the Export() method
to set the "ccflags" variable to a different
value for each variant build.

.SH ENVIRONMENT

.IP SCONS_LIB_DIR
Specifies the directory that contains the SCons Python module directory
(e.g. /home/aroach/scons-src-0.01/src/engine).

.IP SCONSFLAGS
A string of options that will be used by scons in addition to those passed
on the command line.

.SH "SEE ALSO"
.B scons
User Manual,
.B scons
Design Document,
.B scons
source code.

.SH AUTHORS
Steven Knight <knight@baldmt.com>
.br
Anthony Roach <aroach@electriceyeball.com>

