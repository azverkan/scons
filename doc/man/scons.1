.\" 1. Builder's __call__ method can now take arbitrary keyword arguments.
.\" These args are saved with the target node of the build, then passed along
.\" Copyright (c) 2001, 2002 Steven Knight
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included
.\" in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
.\" KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
.\" WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
.\" NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
.\" LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
.\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
.\" WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" __FILE__ __REVISION__ __DATE__ __DEVELOPER__
.\"
.\" ES - Example Start - indents and turns off line fill
.de ES
.RS
.nf
..
.\" EE - Example End - ends intend and turns line fill back on
.de EE
.RE
.fi
..
.TH SCONS 1 "July 2002"
.SH NAME
scons \- a software construction tool
.SH SYNOPSIS
.B scons
[
.IR options ...
]
[
.IR name = val ...
]
[
.IR targets ...
]
.SH DESCRIPTION

The 
.B scons 
utility builds software (or other files) by determining which
component pieces must be rebuilt and executing the necessary commands to
rebuild them.

By default, 
.B scons 
searches for a file named 
.IR SConstruct ,
.IR Sconstruct ,
or
.I sconstruct
(in that order) in the current directory and reads its
configuration from the first file found.  An alternate file name may be
specified via the 
.B -f
option. If the specified file is not
in the local directory, 
.B scons 
will internally change its working
directory (chdir) to the directory containing the file.

The configuration file specifies the files to be built, and
(optionally) the rules to build those files.  Reasonable default
rules exist for building common software components (executable
programs, object files, libraries), so that for simple software
projects, only the target and input files need be specified.

.B scons
can scan known input files automatically for dependency
information (for example, #include statements
in C or C++ files) and will rebuild dependent files appropriately
whenever any "included" input file changes. 
.B scons
supports the
ability to define new scanners for unknown input file types.

.B scons
is normally executed in a top-level directory containing a
.I SConstruct
file, specifying the target or targets to be built as
command-line arguments.  The command

.ES
scons .
.EE

will build all target files in or below the current directory 
.RI ( . ")."

.ES
scons /
.EE

will build all target files in or below the root directory (i.e.,
all files).  Specific targets may be supplied:

.ES
scons foo bar
.EE

Targets may be omitted from the command line,
in which case the targets specified
in the configuration file(s) as
.B Default
targets will be built:

.ES
scons
.EE

Specifying "cleanup" targets in configuration files is not
necessary.  The 
.B -c
flag removes all files
necessary to build the specified target:

.ES
scons -c .
.EE

to remove all target files, or:

.ES
scons -c build export
.EE

to remove target files under build and export.

A subset of a hierarchical tree may be built by
remaining at the top-level directory (where the 
.I SConstruct
file lives) and specifying the subdirectory as the target to be
built:

.ES
scons src/subdir
.EE

or by changing directory and invoking scons with the
.B -u
option, which traverses up the directory
hierarchy until it finds the 
.I SConstruct
file, and then builds
targets relatively to the current subdirectory:

.ES
cd src/subdir
scons -u .
.EE

.B scons
supports building multiple targets in parallel via a
.B -j
option that takes, as its argument, the number
of simultaneous tasks that may be spawned:

.ES
scons -j 4
.EE

builds four targets in parallel, for example.

Values of variables to be passed to the configuration file(s)
may be specified on the command line:

.ES
scons debug=1 .
.EE

These variables are available in SConscript files
through the ARGUMENTS dictionary,
and can be used in the configuration file(s) to modify
the build in any way:

.ES
if ARGUMENTS.get('debug', 0):
    env = Environment(CCFLAGS = '-g')
else:
    env = Environment()
.EE

.\" .B scons
.\" can maintain a cache of target (derived) files that can
.\" be shared between multiple builds.  When caching is enabled in a
.\" configuration file, any target files built by 
.\" .B scons
.\" will be copied
.\" to the cache.  If an up-to-date target file is found in the cache, it
.\" will be retrieved from the cache instead of being rebuilt locally.
.\" Caching behavior may be disabled and controlled in other ways by the
.\" .BR --cache-force , 
.\" .BR --cache-disable ,
.\" and
.\" .B --cache-show
.\" command-line options.  The
.\" .B --random
.\" option is useful whenever multiple builds may be
.\" trying to update the cache simultaneously.

.B scons
requires Python version 1.5.2 or later.
There should be no other dependencies or requirements to run
.B scons.

The default
.B scons
configuration assumes
use of the Microsoft Visual C++ compiler suite on WIN32 systems,
and assumes a C compiler named
.B cc
and a C++ compiler named
.B c++
(such as found in the GNU C compiler suite)
on any other type of system.
You may, of course, override these default values
by appropriate configuration of
Environment construction variables.

.SH OPTIONS
In general, 
.B scons 
supports the same command-line options as GNU
.BR make , 
and many of those supported by 
.BR cons .

.TP
-b
Ignored for compatibility with non-GNU versions of
.BR make.

.TP
-c, --clean, --remove
Clean up by removing all target files for which a construction
command is specified.

.\" .TP
.\" --cache-disable, --no-cache
.\" Disable caching.  Will neither retrieve files from cache nor flush
.\" files to cache.  Has no effect if use of caching is not specified
.\" in a configuration file.
.\"
.\" .TP
.\" --cache-force, --cache-populate
.\" Populate a cache by forcing any already-existing up-to-date
.\" target files to the cache, in addition to files built by this
.\" invocation.  This is useful to populate a new cache with
.\" appropriate target files, or to make available in the cache
.\" any target files recently built with caching disabled via the
.\" .B --cache-disable
.\" option.
.\"
.\" .TP
.\" --cache-show
.\" When retrieving a target file from a cache, show the command
.\" that would have been executed to build the file.  This produces
.\" consistent output for build logs, regardless of whether a target
.\" file was rebuilt or retrieved from cache.

.TP 
.RI "-C" " directory" ",  --directory=" directory
Change to the specified 
.I directory
before searching for the 
.IR SConstruct ,
.IR Sconstruct ,
or
.I sconstruct
file, or doing anything
else.  Multiple 
.B -C
options are interpreted
relative to the previous one, and the right-most
.B -C
option wins. (This option is nearly
equivalent to 
.BR "-f directory/SConstruct" ,
except that it will search for
.IR SConstruct ,
.IR Sconstruct , 
or
.I sconstruct
in the specified directory.)

.\" .TP
.\" -d
.\" Display dependencies while building target files.  Useful for
.\" figuring out why a specific file is being rebuilt, as well as
.\" general debugging of the build process.

.TP
-D
Works exactly the same way as the
.B -u
option except for the way default targets are handled.
When this option is used and no targets are specified on the command line,
all default targets are built, whether or not they are below the current
directory.

.TP
.RI --debug= type
Debug the build process.
.I type
specifies what type of debugging:

.TP
.RI --debug=pdb
Re-run SCons under the control of the
.RI pdb
Python debugger.
The
.RI --debug=pdb
argument will be stripped from the command-line,
but all other arguments will be passed in-order
to the SCons invocation run by the debugger.

.TP
.RI --debug=tree
Print the dependency tree
after each top-level target is built. This prints out the complete
dependency tree including implicit dependencies and ignored
dependencies.

.TP
.RI --debug=dtree
Print the dependency tree
after each top-level target is built. This prints out only derived files.

.TP
.RI --debug=time
Prints various time profiling information: the time spent
executing each build command, the total build time, the total time spent
executing build commands, the total time spent executing SConstruct and
SConscript files, and the total time spent executing SCons itself.

.TP
-e, --environment-overrides
Variables from the execution environment override construction
variables from the configuration files.

.TP
.RI -f " file" ", --file=" file ", --makefile=" file ", --sconstruct=" file
Use 
.I file 
as the initial configuration
file. If 
.I file
is in another directory,
.B scons 
will change to that directory before building targets.

.TP 
-h, --help
Print a local help message for this build, if one is defined in
the configuration file(s), plus a line that describes the 
.B -H
option for command-line option help.  If no local help message
is defined, prints the standard help message about command-line
options.  Exits after displaying the appropriate message.

.TP
-H, --help-options
Print the standard help message about command-line options and
exit.

.TP
-i, --ignore-errors
Ignore all errors from commands executed to rebuild files.

.TP 
.RI -I " directory" ", --include-dir=" directory
Specifies a 
.I directory
to search for
imported Python modules.  If several 
.B -I
options
are used, the directories are searched in the order specified.

.TP
--implicit-cache
Cache implicit dependencies. This can cause 
.B scons
to miss changes in the implicit dependencies in cases where a new implicit
dependency is added earlier in the implicit dependency search path
(e.g. CPPPATH) than a current implicit dependency with the same name.

.TP
.RI -j " N" ", --jobs=" N
Specifies the number of jobs (commands) to run simultaneously.
If there is more than one 
.B -j 
option, the last one is effective.
.\" ??? If the 
.\" .B -j 
.\" option
.\" is specified without an argument,
.\" .B scons 
.\" will not limit the number of
.\" simultaneous jobs.

.TP
-k, --keep-going
Continue as much as possible after an error.  The target that
failed and those that depend on it will not be remade, but other
targets specified on the command line will still be processed.

.\" .TP
.\" .RI  -l " N" ", --load-average=" N ", --max-load=" N
.\" No new jobs (commands) will be started if
.\" there are other jobs running and the system load
.\" average is at least 
.\" .I N
.\" (a floating-point number).
.\"
.\" .TP
.\" --list-derived
.\" List derived files (targets, dependencies) that would be built,
.\" but do not build them.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]
.\"
.\" .TP
.\" --list-actions
.\" List derived files that would be built, with the actions
.\" (commands) that build them.  Does not build the files.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]
.\"
.\" .TP
.\" --list-where
.\" List derived files that would be built, plus where the file is
.\" defined (file name and line number).  Does not build the files.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]

.TP
-m
Ignored for compatibility with non-GNU versions of
.BR make .

.TP
.RI --max-drift= SECONDS
Set the maximum expected drift in the modification time of files to 
.IR SECONDS .
This value determines how old a file must be before its content signature
is cached. The default value is 2 days, which means a file must have a
modification time of at least two days ago in order to have its content
signature cached. A negative value means to never cache the content
signature and to ignore the cached value if there already is one. A value
of 0 means to always cache the signature, no matter how old the file is.

.TP
-n, --just-print, --dry-run, --recon
No execute.  Print the commands that would be executed to build
any out-of-date target files, but do not execute the commands.

.\" .TP
.\" .RI -o " file" ", --old-file=" file ", --assume-old=" file
.\" Do not rebuild 
.\" .IR file ,
.\" and do
.\" not rebuild anything due to changes in the contents of
.\" .IR file .
.\" .TP 
.\" .RI --override " file"
.\" Read values to override specific build environment variables
.\" from the specified 
.\" .IR file .
.\" .TP
.\" -p
.\" Print the data base (construction environments,
.\" Builder and Scanner objects) that are defined
.\" after reading the configuration files.
.\" After printing, a normal build is performed
.\" as usual, as specified by other command-line options.
.\" This also prints version information
.\" printed by the 
.\" .B -v
.\" option.
.\"
.\" To print the database without performing a build do:
.\"
.\" .ES
.\" scons -p -q
.\" .EE

.TP
.RI --profile= file
Run SCons under the Python profiler
and save the results in the specified
.IR file .
The results may be analyzed using the Python
pstats module.
.TP
-q, --question
Do not run any commands, or print anything.  Just return an exit
status that is zero if the specified targets are already up to
date, non-zero otherwise.

.\" .TP
.\" -r, -R, --no-builtin-rules, --no-builtin-variables
.\" Clear the default construction variables.  Construction
.\" environments that are created will be completely empty.
.\"
.\" .TP
.\" --random
.\" Build dependencies in a random order.  This is useful when
.\" building multiple trees simultaneously with caching enabled as a
.\" way to prevent multiple builds from simultaneously trying to build
.\" or retrieve the same target files.

.TP
-s, --silent, --quiet
Silent.  Do not print commands that are executed to rebuild
target files.

.TP
-S, --no-keep-going, --stop
Ignored for compatibility with GNU 
.BR make .

.TP
-t, --touch
Ignored for compatibility with GNU
.BR make .  
(Touching a file to make it
appear up-to-date is unnecessary when using 
.BR scons .)

.TP
-u, --up, --search-up
Walks up the directory structure until an 
.I SConstruct ,
.I Sconstruct
or 
.I sconstruct
file is found, and uses that
as the top of the directory tree. Only targets at or below the
current directory will be built.

.TP
-U
Works exactly the same way as the
.B -u
option except for the way default targets are handled.
When this option is used and no targets are specified on the command line,
all default targets that are defined in the SConscript(s) in the current
directory are built, regardless of what directory the resultant targets end
up in.

.TP
-v, --version
Print the 
.B scons
version, copyright information,
list of authors, and any other relevant information.
Then exit.

.TP
-w, --print-directory
Print a message containing the working directory before and
after other processing.

.TP
.RI --warn= type ", --warn=no-" type
Enable or disable warnings.
.I type
specifies the type of warnings to be enabled or disabled:

.TP
.RI --warn=all ", " --warn=no-all
Enables or disables all warnings.

.TP
.RI --warn=dependency ", " --warn=no-dependency
Enables or disables warnings about dependencies.
These warnings are disabled by default.

.TP
.RI --warn=deprecated ", " --warn=no-deprecated
Enables or disables warnings about use of deprecated features.
These warnings are enabled by default.

.TP
--no-print-directory
Turn off -w, even if it was turned on implicitly.

.\" .TP
.\" .RI --write-filenames= file
.\" Write all filenames considered into
.\" .IR file .
.\"
.\" .TP
.\" .RI -W " file" ", --what-if=" file ", --new-file=" file ", --assume-new=" file
.\" Pretend that the target 
.\" .I file 
.\" has been
.\" modified.  When used with the 
.\" .B -n
.\" option, this
.\" show you what would be rebuilt if you were to modify that file.
.\" Without 
.\" .B -n
.\" ... what? XXX
.\"
.\" .TP
.\" --warn-undefined-variables
.\" Warn when an undefined variable is referenced.
.\"
.\" .TP 
.\" .RI -Y " repository" ", --repository=" repository
.\" Search the specified repository for any input and target
.\" files not found in the local directory hierarchy.  Multiple
.\" .B -Y
.\" options may specified, in which case the
.\" repositories are searched in the order specified.

.SH CONFIGURATION FILE REFERENCE
.\" .SS Python Basics
.\" XXX Adding this in the future would be a help.
.SS Construction Environments
A construction environment is the basic means by which the configuration
files communicate build information to 
.BR scons .
A new construction environment is created using the 
.B Environment 
function:

.ES
env = Environment()
.EE

By default, a new construction environment is
initialized with a set of builder methods
and construction variables that are appropriate
for the current platform.
An optional platform keyword argument may be
used to specify that an environment should
be initialized for a different platform:

.ES
env = Environment(platform = 'cygwin')
env = Environment(platform = 'os2')
env = Environment(platform = 'posix')
env = Environment(platform = 'win32')
.EE

Specifying a platform initializes the appropriate
construction variables in the environment
to use and generate file names with prefixes
and suffixes appropriate for the platform.

The platform argument may be function or callable object,
in which case the Environment() method
will call the specified argument to update
the new construction environment:

.ES
def my_platform(env):
    env['VAR'] = 'xyzzy'

env = Environment(platform = my_platform)
.EE

Additionally, a specific set of tools
with which to initialize the environment
may specified as an optional keyword argument:

.ES
env = Environment(tools = ['msvc', 'lex'])
.EE

The elements of the tools list may also
be functions or callable objects,
in which case the Environment() method
will call the specified elements
to update the new construction environment:

.ES
def my_tool(env):
    env['XYZZY'] = 'xyzzy'

env = Environment(tools = [my_tool])
.EE

SCons supports the following tool specifications
out of the box on 
.B cygwin
and
.B posix
platforms:

.ES
ar
dvipdf
dvips
g++
g77
gas (if the GNU assembler is available)
gcc
gnulink
latex
lex
nasm (if the GNU assembler is not available)
pdflatex
pdftex
tar
tex
yacc
.EE

SCons supports the following tool specifications out of the box on
.B os2
platforms:

.ES
dvipdf
dvips
g77
icc
ilink
latex
lex
nasm
pdflatex
pdftex
tex
yacc
.EE

SCons supports the following tool specifications out of the box on
.B win32
platforms:

.ES
dvipdf
dvips
g77
latex
lex
lib
mslink
msvc
masm
nasm
pdflatex
pdftex
tar
tex
yacc
.EE

.SS Builder Methods

Build rules are specified by calling a construction
environment's builder methods.
The arguments to the builder methods are
.B target
(a list of target files)
and
.B source
(a list of source files).

Because long lists of file names
can lead to a lot of quoting,
.B scons
supplies a
.B Split()
function that splits a single string
into a list, separated on
strings of white-space characters.
(This is similar to the
string.split() method
from the standard Python library.)

Like all Python arguments,
the target and source arguments to a builder
can be specified either with or without
the "target" and "source" keywords.
When the keywords are omitted,
the target is first,
followed by the source.
The following are equivalent examples of calling the Program builder:

.ES
env.Program('bar', ['bar.c', 'foo.c'])
env.Program('bar', Split('bar.c foo.c'))
env.Program(source =  ['bar.c', 'foo.c'], target = 'bar')
env.Program(target = 'bar', Split('bar.c foo.c'))
env.Program('bar', source = string.split('bar.c foo.c'))
.EE

When the target shares the same base name
as the source and only the suffix varies,
and if the builder has a suffix defined for the target file type,
then the target argument may be omitted completely,
and
.B scons
will deduce the target file name from
the source file name.
The following examples all build the
executable program
.B bar
(on POSIX systems)
or 
.B bar.exe
(on Windows systems)
from the bar.c source file:

.ES
env.Program(target = 'bar', source = 'bar.c')
env.Program('bar', source = 'bar.c')
env.Program(source = 'bar.c')
env.Program('bar.c')
.EE

.B scons
provides the following builders:

.IP StaticObject
Builds a static object file
from one or more C, C++, or Fortran source files.
Source files must have one of the following extensions:
.ES
  .asm    assembly language file
  .ASM    assembly language file
  .c      C file
  .C      WIN32:  C file
          POSIX:  C++ file
  .cc     C++ file
  .cpp    C++ file
  .cxx    C++ file
  .cxx    C++ file
  .c++    C++ file
  .C++    C++ file
  .f      Fortran file
  .F      WIN32:  Fortran file
          POSIX:  Fortran file + C pre-processor
  .for    Fortran file
  .FOR    Fortran file
  .fpp    Fortran file + C pre-processor
  .FPP    Fortran file + C pre-processor
  .s      assembly language file
  .S      WIN32:  assembly language file
          POSIX:  assembly language file + C pre-processor
  .spp    assembly language file + C pre-processor
  .SPP    assembly language file + C pre-processor
.EE
.IP
The target object file prefix
(specified by the $OBJPREFIX construction variable; nothing by default)
and suffix
(specified by the $OBJSUFFIX construction variable;
\.obj on Windows systems, .o on POSIX systems)
are automatically added to the target if not already present.
Examples:

.ES
env.StaticObject(target = 'aaa', source = 'aaa.c')
env.StaticObject(target = 'bbb.o', source = 'bbb.c++')
env.StaticObject(target = 'ccc.obj', source = 'ccc.f')
.EE
.IP SharedObject
Builds an object file for
inclusion in a shared library
(that is, built with the '-fPIC' option when using gcc).
Source files must have one of the same set of extensions
specified above for the
.B StaticObject
builder.
The target object file prefix
(specified by the $OBJPREFIX construction variable; nothing by default)
and suffix
(specified by the $OBJSUFFIX construction variable;
\.obj on Windows systems, .o on POSIX systems)
are automatically added to the target if not already present.
Examples:

.ES
env.SharedObject(target = 'ddd', source = 'ddd.c')
env.SharedObject(target = 'eee.o', source = 'eee.cpp')
env.SharedObject(target = 'fff.obj', source = 'fff.for')
.EE

.IP Object
A synonym for the
.B StaticObject
builder.

.IP Program
Builds an executable given one or more object files or C, C++
or Fortran source files.
If any C, C++ or Fortran source files are specified,
then they will be automatically
compiled to object files using the
.B Object
builder;
see that builder's description for
a list of legal source file suffixes
and how they are interpreted.
The target executable file prefix
(specified by the $PROGPREFIX construction variable; nothing by default)
and suffix
(specified by the $PROGSUFFIX construction variable;
by default, .exe on Windows systems, nothing on POSIX systems)
are automatically added to the target if not already present.
Example:

.ES
env.Program(target = 'foo', source = ['foo.o', 'bar.c', 'baz.f'])
.EE

.IP StaticLibrary
Builds a static library given one or more object files
or C, C++ or Fortran source files.
If any source files are given,
then they will be automatically
compiled to object files.
The static library prefix and suffix (if any)
are automatically added to the target.
The target library file prefix
(specified by the $LIBPREFIX construction variable;
by default, lib on POSIX systems, nothing on Windows systems)
and suffix
(specified by the $LIBSUFFIX construction variable;
by default, .lib on Windows systems, .a on POSIX systems)
are automatically added to the target if not already present.
Example:

.ES
env.StaticLibrary(target = 'bar', source = ['bar.c', 'foo.o'])
.EE

.IP
Any object files listed in the
.B source
must have been built for a static library
(that is, using the
.B StaticObject
builder).
.B scons
will raise an error if there is any mismatch.

.IP SharedLibrary
Builds a shared library
(.so on a POSIX system, .dll on WIN32)
given one or more object files
or C, C++ or Fortran source files.
If any source files are given,
then they will be automatically
compiled to object files.
The static library prefix and suffix (if any)
are automatically added to the target.
The target library file prefix
(specified by the $SHLIBPREFIX construction variable;
by default, lib on POSIX systems, nothing on Windows systems)
and suffix
(specified by the $SHLIBSUFFIX construction variable;
by default, .dll on Windows systems, .so on POSIX systems)
are automatically added to the target if not already present.
Example:

.ES
env.SharedLibrary(target = 'bar', source = ['bar.c', 'foo.o'])
.EE
.IP
On WIN32 systems, the
.B SharedLibrary
builder will always build an import (.lib) library
in addition to the shared (.dll) library,
adding a .lib library with the same basename
if there is not already a .lib file explicitly
listed in the targets.

Any object files listed in the
.B source
must have been built for a shared library
(that is, using the
.B SharedObject
builder).
.B scons
will raise an error if there is any mismatch.

.IP Library
A synonym for the
.B StaticLibrary
builder.

.IP CFile
Builds a C source file given a lex (.l) or yacc (.y) input file.
The suffix specified by the $CFILESUFFIX construction variable
(.c by default)
is automatically added to the target
if it is not already present. Example:

.ES
# builds foo.c
env.CFile(target = 'foo.c', source = 'foo.l')
# builds bar.c
env.CFile(target = 'bar', source = 'bar.y')
.EE

.IP CXXFile
Builds a C++ source file given a lex (.ll) or yacc (.yy) input file.
The suffix specified by the $CXXFILESUFFIX construction variable
(.cc by default)
is automatically added to the target
if it is not already present. Example:

.ES
# builds foo.cc
env.CXXFile(target = 'foo.cc', source = 'foo.ll')
# builds bar.cc
env.CXXFile(target = 'bar', source = 'bar.yy')
.EE

.IP DVI
Builds a .dvi file from a .tex, .ltx or .latex input file.
The suffix .dvi
(hard-coded within TeX itself)
is automatically added to the target
if it is not already present. Example:

.ES
# builds from aaa.tex
env.DVI(target = 'aaa.dvi', source = 'aaa.tex')
# builds bbb.dvi
env.DVI(target = 'bbb', source = 'bbb.ltx')
# builds from ccc.latex
env.DVI(target = 'ccc.dvi', source = 'ccc.latex')
.EE

.IP PDF
Builds a .pdf file from a .dvi input file
(or, by extension, a .tex, .ltx, or .latex input file).
The suffix specified by the $PDFSUFFIX construction variable
(.pdf by default)
is added automatically to the target
if it is not already present.  Example:

.ES
# builds from aaa.tex
env.PDF(target = 'aaa.pdf', source = 'aaa.tex')
# builds bbb.pdf from bbb.dvi
env.PDF(target = 'bbb', source = 'bbb.dvi')
.EE

.IP PostScript
Builds a .ps file from a .dvi input file
(or, by extension, a .tex, .ltx, or .latex input file).
The suffix specified by the $PSSUFFIX construction variable
(.ps by default)
is added automatically to the target
if it is not already present.  Example:

.ES
# builds from aaa.tex
env.PostScript(target = 'aaa.ps', source = 'aaa.tex')
# builds bbb.ps from bbb.dvi
env.PostScript(target = 'bbb', source = 'bbb.dvi')
.EE
.LP
.B scons
automatically scans
C source files, C++ source files,
Fortran source files with
.B .F
(POSIX systems only),
.B .fpp,
or
.B .FPP
file extensions,
and assembly language files with
.B .S
(POSIX systems only),
.B .spp,
or
.B .SPP
files extensions
for C preprocessor dependencies,
so the dependencies do not need to be specified explicitly.
In addition, all builder
targets automatically depend on their sources.
An explicit dependency can
be specified using the 
.B Depends 
method of a construction environment (see below).

.SS Other Construction Environment Methods
Additional construction environment methods include:

.TP
.RI Alias( alias ", " targets )
Creates a phony target that
expands to one or more other targets.
Returns the Node object representing the alias,
which exists outside of any file system.
This Node object, or the alias name,
may be used as a dependency of any other target,
including another alias. Alias can be called multiple times for the same
alias to add additional targets to the alias.

.ES
env.Alias('install', ['/usr/local/bin', '/usr/local/lib'])
env.Alias('install', ['/usr/local/man'])
.EE

.TP
.RI Append( key = val ", [...])"
Appends the specified keyword arguments
to the construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the values of the construction variable
and the keyword argument are the same type,
then the two values will be simply added together.
Otherwise, the construction variable
and the value of the keyword argument
are both coerced to lists,
and the lists are added together.

.ES
env.Append(CCFLAGS = ' -g', FOO = ['foo.yyy'])
.EE

.TP
.RI Command( target ", " source ", " commands )
Executes a specific action
(or list of actions)
to build a target file or files.
This is more convenient
than defining a separate Builder object
for a single special-case build.

Note that an action can be an external command,
specified as a string,
or a callable Python object;
see "Action Objects," below.
Examples:

.ES
env.Command('foo.out', 'foo.in',
            "$FOO_BUILD < $SOURCES > $TARGET")

env.Command('bar.out', 'bar.in',
            ["rm -f $TARGET",
             "$BAR_BUILD < $SOURCES > $TARGET"])

def rename(env, target, source):
    import os
    os.rename('.tmp', str(target[0]))

env.Command('baz.out', 'baz.in',
            ["$BAZ_BUILD < $SOURCES > .tmp",
	     rename ])
.EE

.TP
.RI Copy([ key = val ", ...])"
Return a separate copy of a construction environment.
If there are any keyword arguments specified,
they are added to the returned copy,
overwriting any existing values
for the keywords.

.ES
env2 = env.Copy()
env3 = env.Copy(CCFLAGS = '-g')
.EE

.TP
.RI Depends( target ", " dependency )
Specifies an explicit dependency;
the target file(s) will be rebuilt
whenever the dependency file(s) has changed.
This should only be necessary
for cases where the dependency
is not caught by a Scanner
for the file.

.ES
env.Depends('foo', 'other-input-file-for-foo')
.EE

.TP
.RI Dictionary([ vars ])
Returns a dictionary object
containing copies of all of the
construction variables in the environment.
If there are any variable names specified,
only the specified construction
variables are returned in the dictionary.

.ES
dict = env.Dictionary()
cc_dict = env.Dictionary('CC', 'CCFLAGS', 'CCCOM')
.EE

.TP
.RI Ignore( target ", " dependency )
The specified dependency file(s)
will be ignored when deciding if
the target file(s) need to be rebuilt.

.ES
env.Ignore('foo', 'foo.c')
env.Ignore('bar', ['bar1.h', 'bar2.h'])
.EE

.TP
.RI Install( dir ", " source )
Installs one or more files in a destination directory.
The file names remain the same.

.ES
env.Install(dir = '/usr/local/bin', source = 'foo bar')
.EE

.TP
.RI InstallAs( target ", " source )
Installs one or more files as specific file names,
allowing changing a file name as part of the
installation.
It is an error if the target and source
list different numbers of files.

.ES
env.InstallAs(target = '/usr/local/bin/foo',
              source = 'foo_debug')
env.InstallAs(target = '../lib/libfoo.a ../lib/libbar.a',
              source = 'libFOO.a libBAR.a')
.EE

.TP
.RI Precious( target ", ...)"
Marks each given
.I target
as precious so it is not deleted before it is rebuilt. Normally
.B scons
deletes a target before building it.
Multiple targets can be passed in to a single call to
.BR Precious ().

.TP
.RI Replace( key = val ", [...])"
Replaces construction variables in the Environment
with the specified keyword arguments.
(Note:  "Update()" is a deprecated synonym for this method.)

.ES
env.Replace(CCFLAGS = '-g', FOO = 'foo.xxx')
.EE

.TP
.RI SideEffect( side_effect , target )
Declares
.I side_effect
as a side effect of building
.IR target . 
Both 
.I side_effect 
and
.I target
can be a list, a file name, or a node.
A side effect is a target that is created
as a side effect of building other targets.
For example, a Windows PDB
file is created as a side effect of building the .obj
files for a static library.
If a target is a side effect of multiple build commands,
.B scons
will ensure that only one set of commands
is executed at a time.
Consequently, you only need to use this method
for side-effect targets that are built as a result of
multiple build commands.

.SS Construction Variables
.\" XXX From Gary Ruben, 23 April 2002:
.\" I think it would be good to have an example with each construction
.\" variable description in the documentation.
.\" eg.
.\" CC     The C compiler
.\"    Example: env["CC"] = "c68x"
.\"    Default: env["CC"] = "cc"
.\" 
.\" CCCOM  The command line ...
.\"    Example:
.\"        To generate the compiler line c68x -ps -qq -mr -o $TARGET $SOURCES
.\"        env["CC"] = "c68x"
.\"        env["CFLAGS"] = "-ps -qq -mr"
.\"        env["CCCOM"] = "$CC $CFLAGS -o $TARGET $SOURCES
.\"    Default:
.\"        (I dunno what this is ;-)
A construction environment has an associated dictionary of construction
variables that are used by built-in or user-supplied build rules. A number
of useful construction variables are automatically defined by scons for
each supported platform, and additional construction variables can be defined
by the user. The following is a list of the automatically defined construction
variables:

.IP AR
The static library archiver.

.IP ARCOM
The command line used to generate a static library from object files.

.IP ARFLAGS
General options passed to the static library archiver.

.IP AS
The assembler.

.IP ASCOM
The command line used to generate an object file
from an assembly-language source file.

.IP ASFLAGS
General options passed to the assembler.

.IP ASPPCOM
The command line used to assemble an assembly-language
source file into an object file
after first running the file through the C preprocessor.
Any options specified in the $ASFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP BUILDERS
A dictionary mapping the names of the builders
available through this environment
to underlying Builder objects.
Builders named
Alias, CFile, CXXFile, DVI, Library, Object, PDF, PostScript, and Program
are available by default.

.IP CC 
The C compiler.

.IP CCCOM 
The command line used to compile a C source file to a (static) object file.
Any options specified in the $CCFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP CCFLAGS 
General options that are passed to the C compiler.

.IP CFILESUFFIX
The suffix for C source files.
This is used by the internal CFile builder
when generating C files from Lex (.l) or YACC (.y) input files.
The default suffix, of course, is
.I .c
(lower case).
On case-insensitive systems (like Win32),
SCons also treats
.I .C
(upper case) files
as C files.

.IP CPPFLAGS
C preprocessor options.
These will be included in any command that uses the C preprocessor,
including not just compilation of C and C++ source files
via the $CCCOM, $SHCCCOM, $CXXCOM and $SHCXXCOM command lines,
but also the $F77PPCOM command line
used to compile a Fortran source file,
and the $ASPPCOM command line
used to assemble an assembly language source file,
after first running each file through the C preprocessor.

.IP _CPPINCFLAGS
An automatically-generated construction variable
containing the C preprocessor command-line options
for specifying directories to be searched for include files.
The value of $_CPPINCFLAGS is created
by appending $INCPREFIX and $INCSUFFIX
to the beginning and end
of each directory in $CPPPATH.

.IP CPPPATH
The list of directories that the C preprocessor will search for include
directories. The C/C++ implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in CCFLAGS or CXXFLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in CPPPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(CPPPATH='#/include')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
include = Dir('include')
env = Environment(CPPPATH=include)
.EE

.IP
The directory list will be added to command lines
through the automatically-generated
$_CPPINCFLAGS
construction variable,
which is constructed by
appending the values of the
$INCPREFIX and $INCSUFFIX
construction variables
to the beginning and end
of each directory in $CPPPATH.
Any command lines you define that need
the CPPPATH directory list should
include $_CPPINCFLAGS:

.ES
env = Environment(CCCOM="my_compiler $_CPPINCFLAGS -c -o $TARGET $SOURCE")
.EE

.IP CXX
The C++ compiler.

.IP CXXFILESUFFIX
The suffix for C++ source files.
This is used by the internal CXXFile builder
when generating C++ files from Lex (.ll) or YACC (.yy) input files.
The default suffix is
.IR .cc .
SCons also treats files with the suffixes
.IR .cpp ,
.IR .cxx ,
.IR .c++ ,
and
.I .C++
as C++ files.
On case-sensitive systems (Linux, UNIX, and other POSIX-alikes),
SCons also treats
.I .C
(upper case) files
as C++ files.

.IP CXXCOM
The command line used to compile a C++ source file to an object file.
Any options specified in the $CXXFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP CXXFLAGS 
General options that are passed to the C++ compiler.

.IP DVIPDF
The TeX DVI file to PDF file converter.

.IP DVIPDFFLAGS
General options passed to the TeX DVI file to PDF file converter.

.IP DVIPS
The TeX DVI file to PostScript converter.

.IP DVIPSFLAGS
General options passed to the TeX DVI file to PostScript converter.

.IP ENV
A dictionary of environment variables
to use when invoking commands.
Note that, by default,
.B scons
does
.I not
propagate the environment in force when you
execute
.B scons
to the commands used to build target files.
This is so that builds will be guaranteed
repeatable regardless of the environment
variables set at the time
.B scons
is invoked.

If you want to propagate your
environment variables
to the commands executed
to build target files,
you must do so explicitly:

.ES
import os
env = Environment(ENV = os.environ)
.EE

.RS
Note that you can choose only to propagate
certain environment variables.
A common example is
the system
.B PATH
environment variable,
so that
.B scons
uses the same utilities
as the invoking shell (or other process):
.RE

.ES
import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})
.EE

.IP F77
The Fortran compiler.

.IP F77COM 
The command line used to compile a Fortran source file to an object file.

.IP F77FLAGS
General options that are passed to the Fortran compiler.

.IP _F77INCFLAGS
An automatically-generated construction variable
containing the Fortran compiler command-line options
for specifying directories to be searched for include files.
The value of $_F77INCFLAGS is created
by appending $INCPREFIX and $INCSUFFIX
to the beginning and end
of each directory in $F77PATH.

.IP F77PATH
The list of directories that the Fortran compiler will search for include
directories. The Fortran implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in F77FLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in F77PATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(F77PATH='#/include')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
include = Dir('include')
env = Environment(F77PATH=include)
.EE

.IP
The directory list will be added to command lines
through the automatically-generated
$_F77INCFLAGS
construction variable,
which is constructed by
appending the values of the
$INCPREFIX and $INCSUFFIX
construction variables
to the beginning and end
of each directory in $F77PATH.
Any command lines you define that need
the F77PATH directory list should
include $_F77INCFLAGS:

.ES
env = Environment(F77COM="my_compiler $_F77INCFLAGS -c -o $TARGET $SOURCE")
.EE

.IP F77PPCOM 
The command line used to compile a Fortran source file to an object file
after first running the file through the C preprocessor.
Any options specified in the $F77FLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP INCPREFIX
The prefix used to specify an include directory on the C compiler command
line.
This will be appended to the beginning of each directory
in the $CPPPATH and $F77PATH construction variables
when the $_CPPINCFLAGS and $_F77INCFLAGS
variables are automatically generated.

.IP INCSUFFIX
The suffix used to specify an include directory on the C compiler command
line.
This will be appended to the end of each directory
in the $CPPPATH and $F77PATH construction variables
when the $_CPPINCFLAGS and $_F77INCFLAGS
variables are automatically generated.

.IP LATEX
The LaTeX structured formatter and typesetter.

.IP LATEXCOM
The command line used to call the LaTeX structured formatter and typesetter.

.IP LATEXFLAGS
General options passed to the LaTeX structured formatter and typesetter.

.IP LEX
The lexical analyzer generator.

.IP LEXFLAGS
General options passed to the lexical analyzer generator.

.IP LEXCOM
The command line used to call the lexical analyzer generator
to generate a source file.

.IP _LIBDIRFLAGS
An automatically-generated construction variable
containing the linker command-line options
for specifying directories to be searched for library.
The value of $_LIBDIRFLAGS is created
by appending $LIBDIRPREFIX and $LIBDIRSUFFIX
to the beginning and end
of each directory in $LIBPATH.

.IP LIBDIRPREFIX
The prefix used to specify a library directory on the linker command line.
This will be appended to the beginning of each directory
in the $LIBPATH construction variable
when the $_LIBDIRFLAGS variable is automatically generated.

.IP LIBDIRSUFFIX
The suffix used to specify a library directory on the linker command line.
This will be appended to the end of each directory
in the $LIBPATH construction variable
when the $_LIBDIRFLAGS variable is automatically generated.

.IP _LIBFLAGS
An automatically-generated construction variable
containing the linker command-line options
for specifying libraries to be linked with the resulting target.
The value of $_LIBFLAGS is created
by appending $LIBLINKPREFIX and $LIBLINKSUFFIX
to the beginning and end
of each directory in $LIBS.

.IP LIBLINKPREFIX
The prefix used to specify a library to link on the linker command line.
This will be appended to the beginning of each library
in the $LIBS construction variable
when the $_LIBFLAGS variable is automatically generated.

.IP LIBLINKSUFFIX
The suffix used to specify a library to link on the linker command line.
This will be appended to the end of each library
in the $LIBS construction variable
when the $_LIBFLAGS variable is automatically generated.

.IP LIBPATH
The list of directories that will be searched for libraries.
The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in LINKFLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in LIBPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(LIBPATH='#/libs')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
libs = Dir('libs')
env = Environment(LIBPATH=libs)
.EE

.IP
The directory list will be added to command lines
through the automatically-generated
$_LIBDIRFLAGS
construction variable,
which is constructed by
appending the values of the
$LIBDIRPREFIX and $LIBDIRSUFFIX
construction variables
to the beginning and end
of each directory in $LIBPATH.
Any command lines you define that need
the LIBPATH directory list should
include $_LIBDIRFLAGS:

.ES
env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE")
.EE

.IP LIBPREFIX
The prefix used for (static) library file names.

.IP LIBPREFIXES
An array of legal prefixes for library file names.

.IP LIBS
A list of one or more libraries
that will be linked with
any executable programs
created by this environment.

.IP
The library list will be added to command lines
through the automatically-generated
$_LIBFLAGS
construction variable,
which is constructed by
appending the values of the
$LIBLINKPREFIX and $LIBLINKSUFFIX
construction variables
to the beginning and end
of each directory in $LIBS.
Any command lines you define that need
the LIBS library list should
include $_LIBFLAGS:

.ES
env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE")
.EE

.IP LIBSUFFIX 
The suffix used for (static) library file names.

.IP LIBSUFFIXES
An array of legal suffixes for library file names.

.IP LINK
The linker.

.IP LINKFLAGS
General options passed to the linker.

.IP LINKCOM
The command line used to link object files into an executable.

.IP OBJPREFIX 
The prefix used for object file names.

.IP OBJSUFFIX 
The suffix used for object file names.

.IP PDFCOM
The command line used to convert TeX DVI files into a PDF file.

.IP PDFPREFIX
The prefix used for PDF file names.

.IP PDFSUFFIX
The suffix used for PDF file names.

.IP PROGPREFIX
The prefix used for executable file names.

.IP PROGSUFFIX
The suffix used for executable file names.

.IP PSCOM
The command line used to convert TeX DVI files into a PostScript file.

.IP PSPREFIX
The prefix used for PostScript file names.

.IP PSSUFFIX
The prefix used for PostScript file names.

.IP RANLIB
The archive indexer.

.IP RANLIBFLAGS
General options passed to the archive indexer.

.IP SCANNERS
A list of the available implicit dependency scanners. [CScan] by default.

.IP SHCC
The C compiler used for generating shared-library objects.

.IP SHCCCOM
The command line used to compile a C source file
to a shared-library object file.
Any options specified in the $SHCCFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP SHCCFLAGS
Options that are passed to the C compiler
to generate shared-library objects.

.IP SHCXX
The C++ compiler used for generating shared-library objects.

.IP SHCXXCOM
The command line used to compile a C++ source file
to a shared-library object file.
Any options specified in the $SHCXXFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP SHCXXFLAGS
Options that are passed to the C++ compiler
to generate shared-library objects.

.IP SHF77
The Fortran compiler used for generating shared-library objects.

.IP SHF77COM
The command line used to compile a Fortran source file
to a shared-library object file.

.IP SHF77FLAGS
Options that are passed to the Fortran compiler
to generated shared-library objects.

.IP SHF77PPCOM
The command line used to compile a Fortran source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the $SHF77FLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP SHLIBPREFIX
The prefix used for shared library file names.

.IP SHLIBSUFFIX
The suffix used for shared library file names.

.IP SHLINK
The linker for programs that use shared libraries.

.IP SHLINKFLAGS
General options passed to the linker for programs using shared libraries.

.IP TAR
The tar archiver.

.IP TARCOM
The command line used to call the tar archiver.

.IP TARFLAGS
General options passed to the tar archiver.

.IP TARSUFFIX 
The suffix used for tar file names.

.IP TEX
The TeX formatter and typesetter.

.IP TEXCOM
The command line used to call the TeX formatter and typesetter.

.IP TEXFLAGS
General options passed to the TeX formatter and typesetter.

.IP WIN32_INSERT_DEF
When this is set to true,
a library build of a WIN32 shared library (.dll file)
will also build a corresponding .def file at the same time,
if a .def file is not already listed as a build target.
The default is 0 (do not build a .def file).

.IP WIN32DEFPREFIX
The prefix used to build WIN32 .def files.

.IP WIN32DEFSUFFIX
The suffix used for WIN32 .def file names.

.IP WIN32DLLPREFIX
The prefix used to build WIN32 shared libraries (.dll files).

.IP WIN32IMPLIBPREFIX
The prefix used to build WIN32 import libraries.

.IP YACC
The parser generator.

.IP YACCCOM
The command line used to call the parser generator
to generate a source file.

.IP YACCFLAGS
General options passed to the parser generator.

.LP
Construction variables can be retrieved and set using the 
.B Dictionary 
method of the construction environment:

.ES
dict = env.Dictionary()
dict["CC"] = "cc"
.EE

or using the [] operator:

.ES
env["CC"] = "cc"
.EE

Construction variables can also be passed to the construction environment
constructor:

.ES
env = Environment(CC="cc")
.EE

or when copying a construction environment using the 
.B Copy 
method:

.ES
env2 = env.Copy(CC="cl.exe")
.EE

.SS Other Functions

.B scons
also provides various additional functions,
not associated with a construction environment,
that configuration files can use:

.TP
.RI BuildDir( build_dir ", " src_dir ", [" duplicate ])
This specifies a build directory to use for all derived files.  
.I build_dir
specifies the build directory to be used for all derived files that would
normally be built under
.IR src_dir .
Multiple build directories can be set up for multiple build variants, for
example. 
.I src_dir
must be underneath the SConstruct file's directory,
and
.I build_dir
may not be underneath the
.I src_dir .

.B scons
will link or copy (depending on the platform) all the source files into the
build directory if 
.I duplicate
is set to 1 (the default). If 
.I duplicate
is set to 0, then 
.B scons 
will not copy or link any source files, which may cause build problems in
certain situations (e.g. C source files that are generated by the
build). 
.IR duplicate =0
is usually safe, and is always more efficient than 
.IR duplicate =1.

.TP 
.RI Default( targets )
This specifies a list of default targets. Default targets will be built by
.B scons
if no explicit targets are given on the command line.
Multiple targets should be specified as
separate arguments to the
.BR Default ()
method.
In this version of SCons (0.07),
.BR Default ()
will also accept a space-delimited string of target file names;
this functionality will be removed in the next version of SCons (0.08).
Target names with white space may be be enclosed in an
array to prevent the string from being split into
separate file names.
.BR Default ()
will also accept the return value of any of the construction environment
builder methods.
Example:

.ES
Default('foo', 'bar', 'baz', ['file with whitespace'])
.EE

.TP
.RI Dir( name ", [" directory ])
This returns an object that represents a given directory 
.IR name . 
.I name
can be a relative or absolute path. 
.I directory
is an optional directory that will be used as the parent directory. 

.TP
.RI FindFile( file ", "

.TP
.RI Export( vars )
This tells 
.B scons
to export a list of variables from the current
configuration file to all other configuration files. The exported variables
are kept in a global collection, so subsequent exports
will over-write previous exports that have the same name. 
Multiple variable names should be passed to
.BR Export ()
as separate arguments. Examples:

.ES
Export("env")
Export("env", "variable")
.EE

.TP 
.RI File( name ", [" directory ])
This returns an object that represents a given file 
.IR name . 
.I name
can be a relative or absolute path. 
.I directory
is an optional directory that will be used as the parent directory. 

.TP
.RI Help( text )
This specifies help text to be printed if the 
.B -h 
argument is given to
.BR scons .
.B scons
will exit after printing out the help text.

.TP 
.RI Import( vars )
This tells 
.B scons
to import a list of variables into the current configuration file. This
will import variables that were exported with
.BR Export ()
or in the 
.I exports
argument to 
.BR SConscript ().
Variables exported by 
.BR SConscript ()
have precedence.
Multiple variable names should be passed to 
.BR Import ()
as separate arguments.
Examples:

.ES
Import("env")
Import("env", "variable")
.EE

.TP
.RI Platform( string )
Returns a callable object
that can be used to initialize
a construction environment using the
platform keyword of the Environment() method.

.ES
env = Environment(platform = Platform('win32'))
.EE

.TP
.RI Return( vars )
This tells
.B scons
what variable(s) to use as the return value(s) of the current configuration
file. These variables will be returned to the "calling" configuration file
as the return value(s) of 
.BR SConscript ().
Multiple variable names should be passed to 
.BR Return ()
as a list. Example:

.ES
Return("foo")
Return(["foo", "bar"])
.EE

.TP
.RI SConscript( script ", [" exports ])
This tells
.B scons
to execute
.I script
as a configuration file. The optional 
.I exports
argument provides a list of variable names to export to
.IR script ". "
.I script
must use the
.BR Import ()
function to import the variables. Any variables returned by 
.I script 
using 
.BR Return ()
will be returned by the call to
.BR SConscript (). 
Examples:

.ES
SConscript('dir/SConscript')
foo = SConscript('subdir/SConscript', "env")
.EE

.TP
.RI SConscriptChdir( value )
When a non-zero
.I value
is specified,
this instructs
.B scons
to change its working directory (chdir)
to the directory in which each subsidiary
configure (SConscript) file lives.
Note that you may enable and disable
this ability by calling
SConscriptChdir()
multiple times:

.ES
SConscriptChdir(1)
SConscript('foo/SConscript')	# will chdir to foo
SConscriptChdir(0)
SConscript('bar/SConscript')	# will not chdir to bar
.EE

.TP 
.RI SetCommandHandler( function )

This registers a user
.I function
as the handler
for interpreting and executing command-line strings.
The function must expect three arguments:

.ES
def commandhandler(cmd, args, env):
.EE
.IP
.I cmd
is the path to the command to be executed.
.I args
is that arguments to the command.
.I env
is a dictionary of the environment variables
in which the command should be executed.

.TP
.RI Split( arg )
Returns a list of file names or other objects.
If arg is a string,
it will be split on strings of white-space characters
within the string,
making it easier to write long lists of file names.
If arg is already a list,
the list will be returned untouched.
If arg is any other type of object,
it will be returned as a list
containing just the object.

.ES
files = Split("f1.c f2.c f3.c")
files = Split("""
	f4.c
	f5.c
	f6.c
""")
.EE

.TP
.RI Tool( string )
Returns a callable object
that can be used to initialize
a construction environment using the
tools keyword of the Environment() method.

.ES
env = Environment(tools = [ Tool('msvc') ])
.EE

.TP
.RI WhereIs( program ", [" path  ", [" pathext ]])

Searches for the specified executable
.I program,
returning the full path name to the program
if it is found,
and returning None if not.
Searches the specified
.I path,
or the user's current PATH
(os.environ['PATH'])
by default.
On Win32 systems, searches for executable
programs with any of the file extensions
listed in the specified
.I pathext,
or the user's current PATHEXT
(os.environ['PATHEXT'])
by default.

.SH EXTENDING SCONS
.SS Builder Objects
.B scons
can be extended by adding new builders to a construction
environment using the 
.B Builder 
function.
The
.B Builder
function accepts the following arguments:

.IP name
The name of the builder. This will be the
name of the construction environment method
used to create an instance of the builder.

.IP action
The command line string used to build the target from the source. 
.B action
can also be:
a list of strings representing the command
to be executed and its arguments
(suitable for enclosing white space in an argument),
a dictionary
mapping source file name suffixes to
any combination of command line strings
(if the builder should accept multiple source file extensions),
a Python function;
an Action object
(see the next section);
or a list of any of the above.

.IP multi
Specifies whether this builder is allowed to be called multiple times for
the same target file(s). The default is 0, which means the builder
can not be called multiple times for the same target file(s). Calling a
builder multiple times for the same target simply adds additional source
files to the target; it is not allowed to change the environment associated
with the target, specify addition build arguments, or associate a different
builder with the target. 

.IP prefix 
The prefix that will be prepended to the target file name.

.IP suffix
The suffix that will be appended to the target file name.

.IP src_suffix
The expected source file name suffix.

.IP src_builder
Specifies a builder to use when a source file name suffix does not match
any of the suffixes of the builder. Using this argument produces a
multi-stage builder.

.IP emitter
A function that is passed the target, source, and environment,
and which returns a tuple containing two lists,
the list of targets to be built by this builder,
and the list of sources for this builder.
This allows the target and source lists to
be manipulated before the target(s) are actually built.
Example:

.ES
def e(target, source, env):
    return (target + ['foo.foo'], source + ['foo.src'])

b = Builder(emitter=e)
.EE

.IP generator
A function that returns a list of actions that will be executed to build
the target(s) from the source(s).
The returned action(s) may be
an Action object, or anything that
can be converted into an Action object
(see the next section).

The generator function
takes four arguments:
.I source 
- a list of source nodes, 
.I target
- a list of target nodes,
.I env
- the construction environment.
.I for_signature
- a Boolean value that specifies
whether the generator is being called
for generating a build signature
(as opposed to actually executing the command).
Example:

.ES
def g(source, target, env, for_signature):
    return [["gcc", "-c", "-o"] + target + source] 

b = Builder(generator=g)
.EE

The 
.I generator
and
.I action
arguments must not both be used for the same Builder.

Any additional keyword arguments supplied
when a Builder object is called
will be associated with the target
(and any other files built as a
result of the call).

.ES
b = Builder(action="build < $SOURCE > $TARGET")
env = Environment(BUILDERS = {'MyBuild' : b})
env.MyBuild('foo.out', 'foo.in', my_arg = 'xyzzy')
.EE

These extra keyword arguments are passed to the
following functions:
command generator functions,
function Actions,
and emitter functions.

.SS Action Objects

The Builder function will turn its
.B action
keyword argument into an appropriate
internal Action object.
Occasionally, it may be more efficient
to create an explicit Action object
and use it to initialize multiple
Builder objects,
rather than let each separate Builder object
create a separate Action.

The Action method takes a single argument
and returns an appropriate object for the action
represented by the type of the argument:

.IP Action
If the argument is already an Action object,
the object is simply returned.

.IP String
If the argument is a string,
a command-line Action is returned.

.ES
Action('$CC -c -o $TARGET $SOURCES')
.EE

.\" XXX From Gary Ruben, 23 April 2002:
.\" What would be useful is a discussion of how you execute command
.\" shell commands ie. what is the process used to spawn the shell, pass
.\" environment variables to it etc., whether there is one shell per
.\" environment or one per command etc.  It might help to look at the Gnu
.\" make documentation to see what they think is important to discuss about
.\" a build system. I'm sure you can do a better job of organising the
.\" documentation than they have :-)


.IP List
If the argument is a list,
then a list of Action objects is returned.
An Action object is created as necessary
for each element in the list.
If an element
.I within
the list is itself a list,
the internal list is the
command and arguments to be executed via
the command line.
This allows white space to be enclosed
in an argument by defining
a command in a list within a list:
.ES
Action([['cc', '-c', '-DWHITE SPACE', '-o', '$TARGET', '$SOURCES']])
.EE

.IP Function
If the argument is a Python function,
a function Action is returned.
The Python function takes three keyword arguments,
.B target
(a Node object representing the target file),
.B source
(a Node object representing the source file)
and
.BR env
(the construction environment
used for building the target file).
The
.B target
and
.B source
arguments may be lists of Node objects if there is
more than one target file or source file.
The actual target and source file name(s) may
be retrieved from their Node objects
via the built-in Python str() function:
.ES
target_file_name = str(target)
source_file_names = map(lambda x: str(x), source)
.EE
.IP
The function should return
.B 0
or
.B None
to indicate a successful build of the target file(s).
The function may raise an exception
or return a non-zero exit status
to indicate an unsuccessful build.

.ES
def build_it(target = None, source = None, env = None):
    # build the target from the source
    return 0
 
a = Action(build_it)
.EE
.PP
If the action argument is not one of the above,
None is returned.

.SS Variable Substitution

Before executing a command,
.B scons
performs construction variable interpolation on the strings that make up
the command line of builders.
Variables are introduced by a
.B $
prefix.
Besides construction variables, scons provides the following
variables for each command execution:

.IP TARGET
The file name of the target being built, or the file name of the first 
target if multiple targets are being built.

.IP TARGETS
The file names of all targets being built.

.IP SOURCE
The file name of the source of the build command, or the file name of the
first source if multiple sources are being built.

.IP SOURCES
The file names of the sources of the build command.

.LP 
For example, given the construction variable CC='cc', targets=['foo'], and
sources=['foo.c', 'bar.c']:

.ES
action='$CC -c -o $TARGET $SOURCES'
.EE

would produce the command line:

.ES
cc -c -o foo foo.c bar.c
.EE

Variable names may be surrounded by curly braces ({})
to separate the name from the trailing characters.
Within the curly braces, a variable name may have
a Python slice subscript appended to select one
or more items from a list.
In the previous example, the string:

.ES
${SOURCES[1]}
.EE

would produce:

.ES
bar.c
.EE

Additionally, a variable name may
have the following special
modifiers appended within the enclosing curly braces
to modify the interpolated string:

.IP base
The base path of the file name,
including the directory path
but excluding any suffix.

.IP dir
The name of the directory in which the file exists.

.IP file
The file name,
minus any directory portion.

.IP filebase
Just the basename of the file,
minus any suffix
and minus the directory.

.IP suffix
Just the file suffix.

.IP abspath
The absolute path name of the file.

.LP
For example, the specified target will
expand as follows for the corresponding modifiers:

.ES
$TARGET              => sub/dir/file.x
${TARGET.base}       => sub/dir/file
${TARGET.dir}        => sub/dir
${TARGET.file}       => file.x
${TARGET.filebase}   => file
${TARGET.suffix}     => .x
${TARGET.abspath}    => /top/dir/sub/dir/file.x
.EE

.LP
The special pseudo-variables
.R $(
and
.R $)
may be used to surround parts of a command line
that may change
.I without
causing a rebuild--that is,
which are not included in the signature
of target files built with this command.
All text between
.R $(
and
.R $)
will be removed from the command line
before it is added to file signatures,
and the
.R $(
and
.R $)
will be removed before the command is executed.
For example, the command line:

.ES
echo Last build occurred $( $TODAY $). > $TARGET
.EE

.LP
would execute the command:

.ES
echo Last build occurred $TODAY. > $TARGET
.EE

.LP
but the command signature added to any target files would be:

.ES
echo Last build occurred  . > $TARGET
.EE

.SS Scanner Objects

You can use the
.B Scanner
function to define
objects to scan
new file types for implicit dependencies.
Scanner accepts the following arguments:

.IP name
The name of the Scanner.
This is mainly used
to identify the Scanner internally.

.IP argument
An optional argument that, if specified,
will be passed to the scanner function.

.IP skeys
An optional list that can be used to
determine which scanner should be used for
a given Node.
In the usual case of scanning for file names,
this array can be a list of suffixes
for the different file types that this
Scanner knows how to scan.

.IP function
A Python function that will process
the Node (file)
and return a list of strings (file names)
representing the implicit
dependencies found in the contents.
The function takes three or four arguments:

    def scanner_function(node, env, target):

    def scanner_function(node, env, target, arg):

The
.B node
argument is the internal
SCons node representing the file.
Use
.B str(node)
to fetch the name of the file, and
.B node.get_contents()
to fetch contents of the file.

The
.B env
argument is the construction environment for the scan.
Fetch values from it using the
.B env.Dictionary()
method.

The
.B target
argument is the internal
SCons node representing the target file.

The
.B arg
argument is the argument supplied
when the scanner was created, if any.

.SH SYSTEM-SPECIFIC BEHAVIOR
SCons and its configuration files are very portable,
due largely to its implementation in Python.
There are, however, a few portability
issues waiting to trap the unwary.
.SS .C file suffix
SCons handles the upper-case
.B .C
file suffix differently,
depending on the capabilities of
the underlying system.
On a case-sensitive system
such as Linux or UNIX,
SCons treats a file with a 
.B .C
suffix as a C++ source file.
On a case-insensitive system
such as Windows,
SCons treats a file with a 
.B .C
suffix as a C source file.
.SS .F file suffix
SCons handles the upper-case
.B .F
file suffix differently,
depending on the capabilities of
the underlying system.
On a case-sensitive system
such as Linux or UNIX,
SCons treats a file with a 
.B .F
suffix as a Fortran source file
that is to be first run through
the standard C preprocessor.
On a case-insensitive system
such as Windows,
SCons treats a file with a 
.B .F
suffix as a Fortran source file that should
.I not
be run through the C preprocessor.
.SS WIN32:  Cygwin Tools and Cygwin Python vs. Windows Pythons
Cygwin supplies a set of tools and utilities
that let users work on a
Windows system using a more POSIX-like environment.
The Cygwin tools, including Cygwin Python,
do this, in part,
by sharing an ability to interpret UNIX-like path names.
For example, the Cygwin tools
will internally translate a Cygwin path name
like /cygdrive/c/mydir
to an equivalent Windows pathname
of C:/mydir (equivalent to C:\\mydir).

Versions of Python
that are built for native Windows execution,
such as the python.org and ActiveState versions,
do not have the Cygwin path name semantics.
This means that using a native Windows version of Python
to build compiled programs using Cygwin tools
(such as gcc, bison, and flex)
may yield unpredictable results.
"Mixing and matching" in this way
can be made to work,
but it requires careful attention to the use of path names
in your SConscript files.

In practice, users can sidestep
the issue by adopting the following rules:
When using gcc,
use the Cygwin-supplied Python interpreter
to run SCons;
when using Microsoft Visual C/C++
(or some other Windows compiler)
use the python.org or ActiveState version of Python
to run SCons.
.SS WIN32:  scons.bat file
On WIN32 systems,
SCons is executed via a wrapper
.B scons.bat
file.
This has (at least) two ramifications:

First, Windows command-line users
that want to use variable assignment
on the command line
may have to put double quotes
around the assignments:

.ES
scons "FOO=BAR" "BAZ=BLEH"
.EE

Second, the Cygwin shell does not
recognize this file as being the same
as an
.B scons
command issued at the command-line prompt.
You can work around this either by
executing
.B scons.bat
from the Cygwin command line,
or by creating a wrapper shell
script named
.B scons .

.SH EXAMPLES

To help you get started using SCons,
here is a brief overview of some common tasks:

.SS Basic Compilation From a Single Source File

.ES
env = Environment()
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Basic Compilation From Multiple Source Files

.ES
env = Environment()
env.Program(target = 'foo', source = 'f1.c f2.c f3.c')
.EE

.SS Setting a Compilation Flag

.ES
env = Environment(CCFLAGS = '-g')
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Search The Local Directory For .h Files

Note:  You do
.I not
need to specify -I options by hand.
SCons will construct the right -I options from CPPPATH.

.ES
env = Environment(CPPPATH = ['.'])
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Search Multiple Directories For .h Files

.ES
env = Environment(CPPPATH = ['include1', 'include2'])
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Building a Static Library

.ES
env = Environment()
env.Library(target = 'static', source = 'l1.c l2.c')
.EE

.SS Building a Shared Library

.ES
env = Environment()
env.Library(target = 'shared', source = 'l3.c l4.c',
            shared = 1)
.EE

.SS Linking a Local Library Into a Program

.ES
env = Environment(LIBS = 'mylib', LIBPATH = ['.'])
env.Library(target = 'mylib', source = 'l1.c l2.c')
env.Program(target = 'prog', source = 'p1.c p2.c')
.EE

.SS Defining Your Own Builder Object

Notice that you can leave off the target file suffix,
and the builder will add it automatically.

.ES
bld = Builder(action = 'pdftex < $SOURCES > $TARGET'
              suffix = '.pdf',
              src_suffix = '.tex')
env = Environment(BUILDERS = {'PDFBuilder' : bld})
env.PDFBuilder(target = 'foo.pdf', source = 'foo.tex')

# The following creates "bar.pdf" from "bar.tex"
env.PDFBuilder(target = 'bar', source = 'bar')
.EE

.SS Defining Your Own Scanner Object

.ES
import re

include_re = re.compile(r'^include\\s+(\\S+)$', re.M)

def kfile_scan(node, env, target, arg):
    contents = node.get_contents()
    includes = include_re.findall(contents)
    return includes

kscan = Scanner(name = 'kfile',
                function = kfile_scan,
                argument = None,
                skeys = ['.k'])
scanners = Environment().Dictionary('SCANNERS')
env = Environment(SCANNERS = scanners + [kscan])

env.Command('foo', 'foo.k', 'kprocess < $SOURCES > $TARGET')

bar_in = File('bar.in')
env.Command('bar', bar_in, 'kprocess $SOURCES > $TARGET')
bar_in.scanner_set(kscan)
.EE

.SS Creating a Hierarchical Build

Notice that the file names specified in a subdirectory
are relative to that subdirectory.

.ES
SConstruct:

    env = Environment()
    env.Program(target = 'foo', source = 'foo.c')

    SConscript('sub/SConscript')

sub/SConscript:

    env = Environment()
    # Builds sub/foo from sub/foo.c
    env.Program(target = 'foo', source = 'foo.c')

    SConscript('dir/SConscript')

sub/dir/SConscript:

    env = Environment()
    # Builds sub/dir/foo from sub/dir/foo.c
    env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Sharing Variables Between SConscript Files

You must explicitly Export() and Import() variables that
you want to share between SConscript files.

.ES
SConstruct:

    env = Environment()
    env.Program(target = 'foo', source = 'foo.c')

    Export("env")
    SConscript('subdirectory/SConscript')

subdirectory/SConscript:

    Import("env")
    env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Building Multiple Variants From the Same Source

Use the BuildDir() method to establish
one or more separate build directories for
a given source directory,
then use the SConscript() method
to specify the SConscript files
in the build directories:

.ES
SConstruct:

    ccflags = '-DFOO'
    Export("ccflags")
    BuildDir('foo', 'src')
    SConscript('foo/SConscript')

    ccflags = '-DBAR'
    Export("ccflags")
    BuildDir('bar', 'src')
    SConscript('bar/SConscript')

src/SConscript:

    Import("ccflags")
    env = Environment(CCFLAGS = ccflags)
    env.Program(target = 'src', source = 'src.c')
.EE

Note the use of the Export() method
to set the "ccflags" variable to a different
value for each variant build.

.SS Hierarchical Build of Two Libraries Linked With a Program

.ES
SConstruct:

    env = Environment(LIBPATH = ['#libA', '#libB'])
    Export('env')
    SConscript('libA/SConscript')
    SConscript('libB/SConscript')
    SConscript('Main/SConscript')

libA/SConscript:

    Import('env')
    env.Library('a', 'a1.c a2.c a3.c')

libB/SConscript:                                                  
    Import('env')
    env.Library('b', 'b1.c b2.c b3.c')

Main/SConscript:

    Import('env')
    e = env.Copy(LIBS = ['a', ','b'])
    e.Program('foo', 'm1.c m2.c m3.c')
.EE

The '#' in the LIBPATH directories specify that they're relative to the
top-level directory, so they don't turn into "Main/libA" when they're
used in Main/SConscript.

Specifying only 'a' and 'b' for the library names
allows SCons to append the appropriate library
prefix and suffix for the current platform
(for example, 'liba.a' on POSIX systems,
'a.lib' on Windows).

.SH ENVIRONMENT

.IP SCONS_LIB_DIR
Specifies the directory that contains the SCons Python module directory
(e.g. /home/aroach/scons-src-0.01/src/engine).

.IP SCONSFLAGS
A string of options that will be used by scons in addition to those passed
on the command line.

.SH "SEE ALSO"
.B scons
User Manual,
.B scons
Design Document,
.B scons
source code.

.SH AUTHORS
Steven Knight <knight@baldmt.com>
.br
Anthony Roach <aroach@electriceyeball.com>

