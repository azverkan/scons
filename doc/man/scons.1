.\" __COPYRIGHT__
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining
.\" a copy of this software and associated documentation files (the
.\" "Software"), to deal in the Software without restriction, including
.\" without limitation the rights to use, copy, modify, merge, publish,
.\" distribute, sublicense, and/or sell copies of the Software, and to
.\" permit persons to whom the Software is furnished to do so, subject to
.\" the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included
.\" in all copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
.\" KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
.\" WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
.\" NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
.\" LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
.\" OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
.\" WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.\"
.\" __FILE__ __REVISION__ __DATE__ __DEVELOPER__
.\"
.\" ES - Example Start - indents and turns off line fill
.de ES
.RS
.nf
..
.\" EE - Example End - ends indent and turns line fill back on
.de EE
.fi
.RE
..
.TH SCONS 1 "November 2003"
.SH NAME
scons \- a software construction tool
.SH SYNOPSIS
.B scons
[
.IR options ...
]
[
.IR name = val ...
]
[
.IR targets ...
]
.SH DESCRIPTION

The 
.B scons 
utility builds software (or other files) by determining which
component pieces must be rebuilt and executing the necessary commands to
rebuild them.

By default, 
.B scons 
searches for a file named 
.IR SConstruct ,
.IR Sconstruct ,
or
.I sconstruct
(in that order) in the current directory and reads its
configuration from the first file found.
An alternate file name may be
specified via the 
.B -f
option.

The
.I SConstruct
file can specify subsidiary
configuration files using the
.B SConscript()
function.
By convention,
these subsidiary files are named
.IR SConscript ,
although any name may be used.
(Because of this naming convention,
the term "SConscript files"
is sometimes used to refer
generically to all
.B scons
configuration files,
regardless of actual file name.)

The configuration files
specify the target files to be built, and
(optionally) the rules to build those targets.  Reasonable default
rules exist for building common software components (executable
programs, object files, libraries), so that for most software
projects, only the target and input files need be specified.

.B scons
reads and executes the SConscript files as Python scripts,
so you may use normal Python scripting capabilities
(such as flow control, data manipulation, and imported Python libraries)
to handle complicated build situations.
.BR scons ,
however, reads and executes all of the SConscript files
.I before
it begins building any targets.
To make this obvious,
.B scons
prints the following messages about what it is doing:

.ES
$ scons foo.out
scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets  ...
cp foo.in foo.out
scons: done building targets.
$
.EE

The status messages
(everything except the line that reads "cp foo.in foo.out")
may be suppressed using the
.B -Q
option.

.B scons
does not automatically propagate
the external environment used to execute
.B scons
to the commands used to build target files.
This is so that builds will be guaranteed
repeatable regardless of the environment
variables set at the time
.B scons
is invoked.
This also means that if the compiler or other commands
that you want to use to build your target files
are not in standard system locations,
.B scons
will not find them unless
you explicitly set the PATH
to include those locations.
Whenever you create an
.B scons
construction environment,
you can propagate the value of PATH
from your external environment as follows:

.ES
import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})
.EE

.B scons
can scan known input files automatically for dependency
information (for example, #include statements
in C or C++ files) and will rebuild dependent files appropriately
whenever any "included" input file changes. 
.B scons
supports the
ability to define new scanners for unknown input file types.

.B scons
knows how to fetch files automatically from
SCCS or RCS subdirectories
using SCCS, RCS or BitKeeper.

.B scons
is normally executed in a top-level directory containing a
.I SConstruct
file, optionally specifying
as command-line arguments
the target file or files to be built.

By default, the command

.ES
scons
.EE

will build all target files in or below the current directory.
Explicit default targets
(to be built when no targets are specified on the command line)
may be defined the SConscript file(s)
using the
.B Default()
function, described below.

Even when
.B Default()
targets are specified in the SConscript file(s),
all target files in or below the current directory
may be built by explicitly specifying
the current directory (.)
as a command-line target:

.ES
scons .
.EE

Building all target files,
including any files outside of the current directory,
may be specified by supplying a command-line target
of the root directory (on POSIX systems):

.ES
scons /
.EE

or the path name(s) of the volume(s) in which all the targets
should be built (on Windows systems):

.ES
scons C:\\ D:\\
.EE

To build only specific targets,
supply them as command-line arguments:

.ES
scons foo bar
.EE

in which case only the specified targets will be built
(along with any derived files on which they depend).

Specifying "cleanup" targets in SConscript files is not
necessary.  The 
.B -c
flag removes all files
necessary to build the specified target:

.ES
scons -c .
.EE

to remove all target files, or:

.ES
scons -c build export
.EE

to remove target files under build and export.
Additional files or directories to remove can be specified using the
Clean() function.

A subset of a hierarchical tree may be built by
remaining at the top-level directory (where the 
.I SConstruct
file lives) and specifying the subdirectory as the target to be
built:

.ES
scons src/subdir
.EE

or by changing directory and invoking scons with the
.B -u
option, which traverses up the directory
hierarchy until it finds the 
.I SConstruct
file, and then builds
targets relatively to the current subdirectory:

.ES
cd src/subdir
scons -u .
.EE

.B scons
supports building multiple targets in parallel via a
.B -j
option that takes, as its argument, the number
of simultaneous tasks that may be spawned:

.ES
scons -j 4
.EE

builds four targets in parallel, for example.

.B scons
can maintain a cache of target (derived) files that can
be shared between multiple builds.  When caching is enabled in a
SConscript file, any target files built by 
.B scons
will be copied
to the cache.  If an up-to-date target file is found in the cache, it
will be retrieved from the cache instead of being rebuilt locally.
Caching behavior may be disabled and controlled in other ways by the
.BR --cache-force , 
.BR --cache-disable ,
and
.B --cache-show
command-line options.  The
.B --random
option is useful to prevent multiple builds
from trying to update the cache simultaneously.

Values of variables to be passed to the SConscript file(s)
may be specified on the command line:

.ES
scons debug=1 .
.EE

These variables are available in SConscript files
through the ARGUMENTS dictionary,
and can be used in the SConscript file(s) to modify
the build in any way:

.ES
if ARGUMENTS.get('debug', 0):
    env = Environment(CCFLAGS = '-g')
else:
    env = Environment()
.EE

.B scons
requires Python version 1.5.2 or later.
There should be no other dependencies or requirements to run
.B scons.

.\" The following paragraph reflects the default tool search orders
.\" currently in SCons/Tool/__init__.py.  If any of those search orders
.\" change, this documentation should change, too.
By default,
.B scons
knows how to search for available programming tools
on various systems.
On WIN32 systems,
.B scons
searches in order for the
Microsoft Visual C++ tools,
the MinGW tool chain,
the Intel compiler tools,
and the PharLap ETS compiler.
On OS/2 systems,
.B scons
searches in order for the 
OS/2 compiler,
the GCC tool chain,
and the Microsoft Visual C++ tools,
On SGI IRIX, IBM AIX, Hewlett Packard HP-UX, and Sun Solaris systems,
.B scons
searches for the native compiler tools
(MIPSpro, Visual Age, aCC, and Forte tools respectively)
and the GCC tool chain.
On all other platforms,
including POSIX (Linux and UNIX) platforms,
.B scons
searches in order
for the GCC tool chain,
the Microsoft Visual C++ tools,
and the Intel compiler tools.
You may, of course, override these default values
by appropriate configuration of
Environment construction variables.

.SH OPTIONS
In general, 
.B scons 
supports the same command-line options as GNU
.BR make , 
and many of those supported by 
.BR cons .

.TP
-b
Ignored for compatibility with non-GNU versions of
.BR make.

.TP
-c, --clean, --remove
Clean up by removing all target files for which a construction
command is specified.
Also remove any files or directories associated to the construction command
using the Clean() function.

.TP
--cache-disable, --no-cache
Disable the derived-file caching specified by
.BR CacheDir ().
.B scons
will neither retrieve files from the cache
nor copy files to the cache.

.TP
--cache-force, --cache-populate
When using
.BR CacheDir (),
populate a cache by copying any already-existing, up-to-date
derived files to the cache,
in addition to files built by this invocation.
This is useful to populate a new cache with
all the current derived files,
or to add to the cache any derived files
recently built with caching disabled via the
.B --cache-disable
option.

.TP
--cache-show
When using
.BR CacheDir ()
and retrieving a derived file from the cache,
show the command
that would have been executed to build the file,
instead of the usual report,
"Retrieved `file' from cache."
This will produce consistent output for build logs,
regardless of whether a target
file was rebuilt or retrieved from the cache.

.TP 
.RI "-C" " directory" ",  --directory=" directory
Change to the specified 
.I directory
before searching for the 
.IR SConstruct ,
.IR Sconstruct ,
or
.I sconstruct
file, or doing anything
else.  Multiple 
.B -C
options are interpreted
relative to the previous one, and the right-most
.B -C
option wins. (This option is nearly
equivalent to 
.BR "-f directory/SConstruct" ,
except that it will search for
.IR SConstruct ,
.IR Sconstruct , 
or
.I sconstruct
in the specified directory.)

.\" .TP
.\" -d
.\" Display dependencies while building target files.  Useful for
.\" figuring out why a specific file is being rebuilt, as well as
.\" general debugging of the build process.

.TP
-D
Works exactly the same way as the
.B -u
option except for the way default targets are handled.
When this option is used and no targets are specified on the command line,
all default targets are built, whether or not they are below the current
directory.

.TP
.RI --debug= type
Debug the build process.
.I type
specifies what type of debugging:

.TP
--debug=pdb
Re-run SCons under the control of the
.RI pdb
Python debugger.
The
--debug=pdb
argument will be stripped from the command-line,
but all other arguments will be passed in-order
to the SCons invocation run by the debugger.

.TP
--debug=tree
Print the dependency tree
after each top-level target is built. This prints out the complete
dependency tree including implicit dependencies and ignored
dependencies.

.TP
--debug=dtree
Print the dependency tree
after each top-level target is built. This prints out only derived files.

.TP
--debug=time
Prints various time profiling information: the time spent
executing each build command, the total build time, the total time spent
executing build commands, the total time spent executing SConstruct and
SConscript files, and the total time spent executing SCons itself.

.TP
--debug=includes
Print the include tree after each top-level target is built. 
This is generally used to find out what files are included by the sources
of a given derived file:

.ES
$ scons --debug=includes foo.o
.EE

.\" .TP
.\" -e, --environment-overrides
.\" Variables from the execution environment override construction
.\" variables from the SConscript files.

.TP
.RI -f " file" ", --file=" file ", --makefile=" file ", --sconstruct=" file
Use 
.I file 
as the initial SConscript file.

.TP 
-h, --help
Print a local help message for this build, if one is defined in
the SConscript file(s), plus a line that describes the 
.B -H
option for command-line option help.  If no local help message
is defined, prints the standard help message about command-line
options.  Exits after displaying the appropriate message.

.TP
-H, --help-options
Print the standard help message about command-line options and
exit.

.TP
-i, --ignore-errors
Ignore all errors from commands executed to rebuild files.

.TP 
.RI -I " directory" ", --include-dir=" directory
Specifies a 
.I directory
to search for
imported Python modules.  If several 
.B -I
options
are used, the directories are searched in the order specified.

.TP
--implicit-cache
Cache implicit dependencies. This can cause 
.B scons
to miss changes in the implicit dependencies in cases where a new implicit
dependency is added earlier in the implicit dependency search path
(e.g. CPPPATH) than a current implicit dependency with the same name.

.TP
--implicit-deps-changed
Force SCons to ignore the cached implicit dependencies. This causes the
implicit dependencies to be rescanned and recached. This implies
.BR --implicit-cache .

.TP
--implicit-deps-unchanged
Force SCons to ignore changes in the implicit dependencies.
This causes cached implicit dependencies to always be used.
This implies 
.BR --implicit-cache .

.TP
.RI -j " N" ", --jobs=" N
Specifies the number of jobs (commands) to run simultaneously.
If there is more than one 
.B -j 
option, the last one is effective.
.\" ??? If the 
.\" .B -j 
.\" option
.\" is specified without an argument,
.\" .B scons 
.\" will not limit the number of
.\" simultaneous jobs.

.TP
-k, --keep-going
Continue as much as possible after an error.  The target that
failed and those that depend on it will not be remade, but other
targets specified on the command line will still be processed.

.\" .TP
.\" .RI  -l " N" ", --load-average=" N ", --max-load=" N
.\" No new jobs (commands) will be started if
.\" there are other jobs running and the system load
.\" average is at least 
.\" .I N
.\" (a floating-point number).
.\"
.\" .TP
.\" --list-derived
.\" List derived files (targets, dependencies) that would be built,
.\" but do not build them.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]
.\"
.\" .TP
.\" --list-actions
.\" List derived files that would be built, with the actions
.\" (commands) that build them.  Does not build the files.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]
.\"
.\" .TP
.\" --list-where
.\" List derived files that would be built, plus where the file is
.\" defined (file name and line number).  Does not build the files.
.\" [XXX This can probably go away with the right
.\" combination of other options.  Revisit this issue.]

.TP
-m
Ignored for compatibility with non-GNU versions of
.BR make .

.TP
.RI --max-drift= SECONDS
Set the maximum expected drift in the modification time of files to 
.IR SECONDS .
This value determines how old a file must be before its content signature
is cached. The default value is 2 days, which means a file must have a
modification time of at least two days ago in order to have its content
signature cached. A negative value means to never cache the content
signature and to ignore the cached value if there already is one. A value
of 0 means to always cache the signature, no matter how old the file is.

.TP
-n, --just-print, --dry-run, --recon
No execute.  Print the commands that would be executed to build
any out-of-date target files, but do not execute the commands.

.\" .TP
.\" .RI -o " file" ", --old-file=" file ", --assume-old=" file
.\" Do not rebuild 
.\" .IR file ,
.\" and do
.\" not rebuild anything due to changes in the contents of
.\" .IR file .
.\" .TP 
.\" .RI --override " file"
.\" Read values to override specific build environment variables
.\" from the specified 
.\" .IR file .
.\" .TP
.\" -p
.\" Print the data base (construction environments,
.\" Builder and Scanner objects) that are defined
.\" after reading the SConscript files.
.\" After printing, a normal build is performed
.\" as usual, as specified by other command-line options.
.\" This also prints version information
.\" printed by the 
.\" .B -v
.\" option.
.\"
.\" To print the database without performing a build do:
.\"
.\" .ES
.\" scons -p -q
.\" .EE

.TP
.RI --profile= file
Run SCons under the Python profiler
and save the results in the specified
.IR file .
The results may be analyzed using the Python
pstats module.
.TP
-q, --question
Do not run any commands, or print anything.  Just return an exit
status that is zero if the specified targets are already up to
date, non-zero otherwise.
.TP
-Q
Quiets SCons status messages about
reading SConscript files,
building targets
and entering directories.
Commands that are executed
to rebuild target files are still printed.

.\" .TP
.\" -r, -R, --no-builtin-rules, --no-builtin-variables
.\" Clear the default construction variables.  Construction
.\" environments that are created will be completely empty.

.TP
--random
Build dependencies in a random order.  This is useful when
building multiple trees simultaneously with caching enabled,
to prevent multiple builds from simultaneously trying to build
or retrieve the same target files.

.TP
-s, --silent, --quiet
Silent.  Do not print commands that are executed to rebuild
target files.
Also suppresses SCons status messages.

.TP
-S, --no-keep-going, --stop
Ignored for compatibility with GNU 
.BR make .

.TP
-t, --touch
Ignored for compatibility with GNU
.BR make .  
(Touching a file to make it
appear up-to-date is unnecessary when using 
.BR scons .)

.TP
-u, --up, --search-up
Walks up the directory structure until an 
.I SConstruct ,
.I Sconstruct
or 
.I sconstruct
file is found, and uses that
as the top of the directory tree.
If no targets are specified on the command line,
only targets at or below the
current directory will be built.

.TP
-U
Works exactly the same way as the
.B -u
option except for the way default targets are handled.
When this option is used and no targets are specified on the command line,
all default targets that are defined in the SConscript(s) in the current
directory are built, regardless of what directory the resultant targets end
up in.

.TP
-v, --version
Print the 
.B scons
version, copyright information,
list of authors, and any other relevant information.
Then exit.

.TP
-w, --print-directory
Print a message containing the working directory before and
after other processing.

.TP
.RI --warn= type ", --warn=no-" type
Enable or disable warnings.
.I type
specifies the type of warnings to be enabled or disabled:

.TP
--warn=all, --warn=no-all
Enables or disables all warnings.

.TP
--warn=dependency, --warn=no-dependency
Enables or disables warnings about dependencies.
These warnings are disabled by default.

.TP
--warn=deprecated, --warn=no-deprecated
Enables or disables warnings about use of deprecated features.
These warnings are enabled by default.

.TP
--no-print-directory
Turn off -w, even if it was turned on implicitly.

.\" .TP
.\" .RI --write-filenames= file
.\" Write all filenames considered into
.\" .IR file .
.\"
.\" .TP
.\" .RI -W " file" ", --what-if=" file ", --new-file=" file ", --assume-new=" file
.\" Pretend that the target 
.\" .I file 
.\" has been
.\" modified.  When used with the 
.\" .B -n
.\" option, this
.\" show you what would be rebuilt if you were to modify that file.
.\" Without 
.\" .B -n
.\" ... what? XXX
.\"
.\" .TP
.\" --warn-undefined-variables
.\" Warn when an undefined variable is referenced.

.TP 
.RI -Y " repository" ", --repository=" repository
Search the specified repository for any input and target
files not found in the local directory hierarchy.  Multiple
.B -Y
options may specified, in which case the
repositories are searched in the order specified.

.SH CONFIGURATION FILE REFERENCE
.\" .SS Python Basics
.\" XXX Adding this in the future would be a help.
.SS Construction Environments
A construction environment is the basic means by which the SConscript
files communicate build information to 
.BR scons .
A new construction environment is created using the 
.B Environment 
function:

.ES
env = Environment()
.EE

By default, a new construction environment is
initialized with a set of builder methods
and construction variables that are appropriate
for the current platform.
An optional platform keyword argument may be
used to specify that an environment should
be initialized for a different platform:

.ES
env = Environment(platform = 'cygwin')
env = Environment(platform = 'os2')
env = Environment(platform = 'posix')
env = Environment(platform = 'win32')
.EE

Specifying a platform initializes the appropriate
construction variables in the environment
to use and generate file names with prefixes
and suffixes appropriate for the platform.

Note that the
.B win32
platform adds the
.B SYSTEMROOT
variable from the user's external environment
to the construction environment's
.B ENV
dictionary.
This is so that any executed commands
that use sockets to connect with other systems
(such as fetching source files from
external CVS repository specifications like 
.BR :pserver:anonymous@cvs.sourceforge.net:/cvsroot/scons )
will work on Win32 systems.

The platform argument may be function or callable object,
in which case the Environment() method
will call the specified argument to update
the new construction environment:

.ES
def my_platform(env):
    env['VAR'] = 'xyzzy'

env = Environment(platform = my_platform)
.EE

Additionally, a specific set of tools
with which to initialize the environment
may specified as an optional keyword argument:

.ES
env = Environment(tools = ['msvc', 'lex'])
.EE

The elements of the tools list may also
be functions or callable objects,
in which case the Environment() method
will call the specified elements
to update the new construction environment:

.ES
def my_tool(env):
    env['XYZZY'] = 'xyzzy'

env = Environment(tools = [my_tool])
.EE

The tool definition (i.e. my_tool()) can use the PLATFORM variable from
the environment it receives to customize the tool for different platforms.

If no tool list is specified, then SCons will auto-detect the installed
tools using the PATH variable in the ENV construction variable and the
platform name when the Environment is constructed. Changing the PATH
variable after the Environment is constructed will not cause the tools to
be redetected.

SCons supports the following tool specifications out of the box:

.ES
386asm
aixc++
aixcc
aixf77
aixlink
ar
as
bcc32
c++
cc
dvipdf
dvips
f77
g++
g77
gas
gcc
gnulink
gs
hpc++
hpcc
hplink
icc
icl
ifl
ilink
ilink32
jar
javac
javah
latex
lex
link
linkloc
m4
masm
midl
mingw
mslib
mslink
msvc
msvs
nasm
pdflatex
pdftex
qt
rmic
sgiar
sgic++
sgicc
sgilink
sunar
sunc++
suncc
sunlink
swig
tar
tex
tlib
yacc
zip
.EE

Additionally, there is a "tool" named
.B default
which configures the
environment with a default set of tools for the current platform.

On posix and cygwin platforms
the GNU tools (e.g. gcc) are preferred by SCons,
on win32 the Microsoft tools (e.g. msvc)
followed by MinGW are preferred by SCons,
and in OS/2 the IBM tools (e.g. icc) are preferred by SCons.

.SS Builder Methods

Build rules are specified by calling a construction
environment's builder methods.
The arguments to the builder methods are
.B target
(a list of target files)
and
.B source
(a list of source files).

Because long lists of file names
can lead to a lot of quoting,
.B scons
supplies a
.B Split()
global function
and a same-named environment method
that split a single string
into a list, separated on
strings of white-space characters.
(These are similar to the
string.split() method
from the standard Python library,
but work even if the input isn't a string.)

Like all Python arguments,
the target and source arguments to a builder method
can be specified either with or without
the "target" and "source" keywords.
When the keywords are omitted,
the target is first,
followed by the source.
The following are equivalent examples of calling the Program builder method:

.ES
env.Program('bar', ['bar.c', 'foo.c'])
env.Program('bar', Split('bar.c foo.c'))
env.Program('bar', env.Split('bar.c foo.c'))
env.Program(source =  ['bar.c', 'foo.c'], target = 'bar')
env.Program(target = 'bar', Split('bar.c foo.c'))
env.Program(target = 'bar', env.Split('bar.c foo.c'))
env.Program('bar', source = string.split('bar.c foo.c'))
.EE

When the target shares the same base name
as the source and only the suffix varies,
and if the builder method has a suffix defined for the target file type,
then the target argument may be omitted completely,
and
.B scons
will deduce the target file name from
the source file name.
The following examples all build the
executable program
.B bar
(on POSIX systems)
or 
.B bar.exe
(on Windows systems)
from the bar.c source file:

.ES
env.Program(target = 'bar', source = 'bar.c')
env.Program('bar', source = 'bar.c')
env.Program(source = 'bar.c')
env.Program('bar.c')
.EE

It is possible to override or add construction variables when calling a
builder method by passing additional keyword arguments.
These overridden or added
variables will only be in effect when building the target, so they will not
affect other parts of the build. For example, if you want to add additional
libraries for just one program:

.ES
env.Program('hello', 'hello.c', LIBS=['gl', 'glut'])
.EE

or generate a shared library with a nonstandard suffix:

.ES
env.SharedLibrary('word', 'word.cpp', SHLIBSUFFIX='.ocx')
.EE

Although the builder methods defined by
.B scons
are, in fact,
methods of a construction environment object,
they may also be called without an explicit environment:

.ES
Program('hello', 'hello.c')
SharedLibrary('word', 'word.cpp')
.EE

In this case,
the methods are called internally using a default construction
environment that consists of the tools and values that
.B scons
has determined are appropriate for the local system.

All builder methods return a Node or a list of Nodes,
representing the target or targets that will be built.
A list of Nodes is returned if there is more than one target,
and a single Node is returned if there is only one target.
A
.I Node
is an internal SCons object
which represents
build targets or sources.

The returned Node(s)
can be passed to other builder methods as source(s)
or passed to any SCons function or method
where a filename would normally be accepted.
For example, if it were necessary
to add a specific
.B -D
flag when compiling one specific object file:

.ES
bar_obj = env.StaticObject('bar.c', CCFLAGS='-DBAR')
env.Program(source = ['foo.c', bar_obj, 'main.c'])
.EE

Using a Node in this way
makes for a more portable build
by avoiding having to specify
a platform-specific object suffix
when calling the Program() builder method.

The path name for a Node's file may be used
by passing the Node to the Python-builtin
.B str()
function:

.ES
bar_obj = env.StaticObject('bar.c', CCFLAGS='-DBAR')
print "The path to bar_obj is:", str(bar_obj)
.EE

.B scons
provides the following builder methods:

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP CFile()
.IP env.CFile()
Builds a C source file given a lex (.l) or yacc (.y) input file.
The suffix specified by the $CFILESUFFIX construction variable
(.c by default)
is automatically added to the target
if it is not already present. Example:

.ES
# builds foo.c
env.CFile(target = 'foo.c', source = 'foo.l')
# builds bar.c
env.CFile(target = 'bar', source = 'bar.y')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP CXXFile()
.IP env.CXXFile()
Builds a C++ source file given a lex (.ll), yacc (.yy)
or uic (.ui) input file.
The suffix specified by the $CXXFILESUFFIX construction variable
(.cc by default)
is automatically added to the target
if it is not already present. Example:

.ES
# builds foo.cc
env.CXXFile(target = 'foo.cc', source = 'foo.ll')
# builds bar.cc
env.CXXFile(target = 'bar', source = 'bar.yy')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP DVI()
.IP env.DVI()
Builds a .dvi file from a .tex, .ltx or .latex input file.
If the source file suffix is .tex,
.B scons
will examine the contents of the file;
if the string
.B \\documentclass
or
.B \\documentstyle
is found, the file is assumed to be a LaTeX file and
the target is built by invoking the $LATEXCOM command line;
otherwise, the $TEXCOM command line is used.
If the file is a LaTeX file,
the
.B DVI
builder method will also examine the contents
of the
.B .aux file
and invoke the $BIBTEX command line
if the string
.B bibdata
is found,
and will examine the contents
.B .log
file and re-run the $LATEXCOM command
if the log file says it is necessary.

The suffix .dvi
(hard-coded within TeX itself)
is automatically added to the target
if it is not already present. Examples:

.ES
# builds from aaa.tex
env.DVI(target = 'aaa.dvi', source = 'aaa.tex')
# builds bbb.dvi
env.DVI(target = 'bbb', source = 'bbb.ltx')
# builds from ccc.latex
env.DVI(target = 'ccc.dvi', source = 'ccc.latex')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Jar()
.IP env.Jar()
Builds a Java archive (.jar) file
from a source tree of .class files.
If the $JAVACHDIR value is set, the
.B jar
command will change to the specified directory using the
.B \-C
option.
If the contents any of the source files begin with the string
.BR Manifest-Version ,
the file is assumed to be a manifest
and is passed to the
.B jar
command with the
.B m
option set.

.ES
env.Jar(target = 'foo.jar', source = 'classes')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Java()
.IP env.Java()
Builds one or more Java class files
from a source tree of .java files.
The class files will be placed underneath
the specified target directory.
SCons will parse each source .java file
to find the classes
(including inner classes)
defined within that file,
and from that figure out the
target .class files that will be created.
SCons will also search each Java file
for the Java package name,
which it assumes can be found on a line
beginning with the string
.B package
in the first column;
the resulting .class files
will be placed in a directory reflecting
the specified package name.
For example,
the file
.I Foo.java
defining a single public
.I Foo
class and
containing a package name of
.I sub.dir
will generate a corresponding
.IR sub/dir/Foo.class
class file.

Example:

.ES
env.Java(target = 'classes', source = 'src')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP JavaH()
.IP env.JavaH()
Builds C header and source files for
implementing Java native methods.
The target can be either a directory
in which the header files will be written,
or a header file name which
will contain all of the definitions.
The source can be either the names of .class files,
or the objects returned from the
.B Java
builder method.

If the construction variable
.B JAVACLASSDIR
is set, either in the environment
or in the call to the
.B JavaH
builder method itself,
then the value of the variable
will be stripped from the
beginning of any .class file names.

Examples:

.ES
# builds java_native.h
classes = env.Java(target = 'classdir', source = 'src')
env.JavaH(target = 'java_native.h', source = classes)

# builds include/package_foo.h and include/package_bar.h
env.JavaH(target = 'include',
          source = ['package/foo.class', 'package/bar.class'])

# builds export/foo.h and export/bar.h
env.JavaH(target = 'export',
          source = ['classes/foo.class', 'classes/bar.class'],
          JAVACLASSDIR = 'classes')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Library()
.IP env.Library()
A synonym for the
.B StaticLibrary
builder method.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP M4()
.IP env.M4()
Builds an output file from an M4 input file.
This uses a default $M4FLAGS value of
.BR -E ,
which considers all warnings to be fatal
and stops on the first warning
when using the GNU version of m4.
Example:

.ES
env.M4(target = 'foo.c', source = 'foo.c.m4')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP MSVSProject()
.IP env.MSVSProject()
Builds Microsoft Visual Studio project files.
This builds a Visual Studio project file, based on the version of
Visual Studio that is configured (either the latest installed version,
or the version set by 
.B MSVS_VERSION
in the Environment constructor).
For VS 6, it will generate 
.B .dsp
and
.B .dsw
files, for VS 7, it will
generate
.B .vcproj
and
.B .sln
files.

It takes several lists of filenames to be placed into the project
file, currently these are limited to 
.B srcs, incs, localincs, resources,
and
.B misc.
These are pretty self explanatory, but it
should be noted that the 'srcs' list is NOT added to the $SOURCES
environment variable.  This is because it represents a list of files
to be added to the project file, not the source used to build the
project file (in this case, the 'source' is the SConscript file used
to call MSVSProject).

In addition to these values (which are all optional, although not
specifying any of them results in an empty project file), the
following values must be specified:

target: The name of the target .dsp or .vcproj file.  The correct
suffix for the version of Visual Studio must be used, but the value

env['MSVSPROJECTSUFFIX']

will be defined to the correct value (see example below).

variant: The name of this particular variant.  These are typically
things like "Debug" or "Release", but really can be anything you want.
Multiple calls to MSVSProject with different variants are allowed: all
variants will be added to the project file with their appropriate
build targets and sources.

buildtarget: A list of SCons.Node.FS objects which is returned from
the command which builds the target.  This is used to tell SCons what
to build when the 'build' button is pressed inside of the IDE.

Example Usage:

.ES
        barsrcs = ['bar.cpp'],
        barincs = ['bar.h'],
        barlocalincs = ['StdAfx.h']
        barresources = ['bar.rc','resource.h']
        barmisc = ['bar_readme.txt']

        dll = local.SharedLibrary(target = 'bar.dll',
                                  source = barsrcs)

        local.MSVSProject(target = 'Bar' + env['MSVSPROJECTSUFFIX'],
                          srcs = barsrcs,
                          incs = barincs,
                          localincs = barlocalincs,
                          resources = barresources,
                          misc = barmisc,
                          buildtarget = dll,
                          variant = 'Release')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Object()
.IP env.Object()
A synonym for the
.B StaticObject
builder method.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP PCH()
.IP env.PCH()
Builds a Microsoft Visual C++ precompiled header.
Calling this builder method
returns a list of two targets: the PCH as the first element, and the object
file as the second element. Normally the object file is ignored.
This builder method is only
provided when Microsoft Visual C++ is being used as the compiler. 
The PCH builder method is generally used in
conjuction with the PCH construction variable to force object files to use
the precompiled header:

.ES
env['PCH'] = env.PCH('StdAfx.cpp')[0]
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP PDF()
.IP env.PDF()
Builds a .pdf file from a .dvi input file
(or, by extension, a .tex, .ltx, or .latex input file).
The suffix specified by the $PDFSUFFIX construction variable
(.pdf by default)
is added automatically to the target
if it is not already present.  Example:

.ES
# builds from aaa.tex
env.PDF(target = 'aaa.pdf', source = 'aaa.tex')
# builds bbb.pdf from bbb.dvi
env.PDF(target = 'bbb', source = 'bbb.dvi')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP PostScript()
.IP env.PostScript()
Builds a .ps file from a .dvi input file
(or, by extension, a .tex, .ltx, or .latex input file).
The suffix specified by the $PSSUFFIX construction variable
(.ps by default)
is added automatically to the target
if it is not already present.  Example:

.ES
# builds from aaa.tex
env.PostScript(target = 'aaa.ps', source = 'aaa.tex')
# builds bbb.ps from bbb.dvi
env.PostScript(target = 'bbb', source = 'bbb.dvi')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Program()
.IP env.Program()
Builds an executable given one or more object files or C, C++
or Fortran source files.
If any C, C++ or Fortran source files are specified,
then they will be automatically
compiled to object files using the
.B Object
builder method;
see that builder method's description for
a list of legal source file suffixes
and how they are interpreted.
The target executable file prefix
(specified by the $PROGPREFIX construction variable; nothing by default)
and suffix
(specified by the $PROGSUFFIX construction variable;
by default, .exe on Windows systems, nothing on POSIX systems)
are automatically added to the target if not already present.
Example:

.ES
env.Program(target = 'foo', source = ['foo.o', 'bar.c', 'baz.f'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP RES()
.IP env.RES()
Builds a Microsoft Visual C++ resource file.
This builder method is only provided
when Microsoft Visual C++ or MinGW is being used as the compiler. The
.I .res
(or 
.I .o 
for MinGW) suffix is added to the target name if no other suffix is given. The source
file is scanned for implicit dependencies as though it were a C file. Example:

.ES
env.RES('resource.rc')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP RMIC()
.IP env.RMIC()
Builds stub and skeleton class files
for remote objects
from Java .class files.
The target is a directory
relative to which the stub
and skeleton class files will be written.
The source can be the names of .class files,
or the objects return from the
.B Java
builder method.

If the construction variable
.B JAVACLASSDIR
is set, either in the environment
or in the call to the
.B RMIC
builder method itself,
then the value of the variable
will be stripped from the
beginning of any .class file names.

.ES
classes = env.Java(target = 'classdir', source = 'src')
env.RMIC(target = 'outdir1', source = classes)

env.RMIC(target = 'outdir2',
         source = ['package/foo.class', 'package/bar.class'])

env.RMIC(target = 'outdir3',
         source = ['classes/foo.class', 'classes/bar.class'],
         JAVACLASSDIR = 'classes')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP SharedLibrary()
.IP env.SharedLibrary()
Builds a shared library
(.so on a POSIX system, .dll on WIN32)
given one or more object files
or C, C++ or Fortran source files.
If any source files are given,
then they will be automatically
compiled to object files.
The static library prefix and suffix (if any)
are automatically added to the target.
The target library file prefix
(specified by the $SHLIBPREFIX construction variable;
by default, lib on POSIX systems, nothing on Windows systems)
and suffix
(specified by the $SHLIBSUFFIX construction variable;
by default, .dll on Windows systems, .so on POSIX systems)
are automatically added to the target if not already present.
Example:

.ES
env.SharedLibrary(target = 'bar', source = ['bar.c', 'foo.o'])
.EE
.IP
On WIN32 systems, the
.B SharedLibrary
builder method will always build an import (.lib) library
in addition to the shared (.dll) library,
adding a .lib library with the same basename
if there is not already a .lib file explicitly
listed in the targets.

Any object files listed in the
.B source
must have been built for a shared library
(that is, using the
.B SharedObject
builder method).
.B scons
will raise an error if there is any mismatch.
.IP
On WIN32 systems, specifying "register=1" will cause the dll to be
registered after it is built using REGSVR32.  The command that is run
("regsvr32" by default) is determined by $REGSVR construction
variable, and the flags passed are determined by $REGSVRFLAGS.  By
default, $REGSVRFLAGS includes "/s", to prevent dialogs from popping
up and requiring user attention when it is run.  If you change
$REGSVRFLAGS, be sure to include "/s".  For example,

.ES
env.SharedLibrary(target = 'bar',
                  source = ['bar.cxx', 'foo.obj'],
                  register=1)
.EE

.IP
will register "bar.dll" as a COM object when it is done linking it.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP SharedObject()
.IP env.SharedObject()
Builds an object file for
inclusion in a shared library.
Source files must have one of the same set of extensions
specified above for the
.B StaticObject
builder method.
On some platforms building a shared object requires additional
compiler options (e.g. -fPIC for gcc) in addition to those needed to build a
normal (static) object, but on some platforms there is no difference between a
shared object and a normal (static) one. When there is a difference, SCons
will only allow shared objects to be linked into a shared library, and will
use a different suffix for shared objects. On platforms where there is no
difference, SCons will allow both normal (static)
and shared objects to be linked into a
shared library, and will use the same suffix for shared and normal
(static) objects.
The target object file prefix
(specified by the $SHOBJPREFIX construction variable;
by default, the same as $OBJPREFIX)
and suffix
(specified by the $SHOBJSUFFIX construction variable)
are automatically added to the target if not already present. 
Examples:

.ES
env.SharedObject(target = 'ddd', source = 'ddd.c')
env.SharedObject(target = 'eee.o', source = 'eee.cpp')
env.SharedObject(target = 'fff.obj', source = 'fff.for')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP StaticLibrary()
.IP env.StaticLibrary()
Builds a static library given one or more object files
or C, C++ or Fortran source files.
If any source files are given,
then they will be automatically
compiled to object files.
The static library prefix and suffix (if any)
are automatically added to the target.
The target library file prefix
(specified by the $LIBPREFIX construction variable;
by default, lib on POSIX systems, nothing on Windows systems)
and suffix
(specified by the $LIBSUFFIX construction variable;
by default, .lib on Windows systems, .a on POSIX systems)
are automatically added to the target if not already present.
Example:

.ES
env.StaticLibrary(target = 'bar', source = ['bar.c', 'foo.o'])
.EE

.IP
Any object files listed in the
.B source
must have been built for a static library
(that is, using the
.B StaticObject
builder method).
.B scons
will raise an error if there is any mismatch.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP StaticObject()
.IP env.StaticObject()
Builds a static object file
from one or more C, C++, or Fortran source files.
Source files must have one of the following extensions:

.ES
  .asm    assembly language file
  .ASM    assembly language file
  .c      C file
  .C      WIN32:  C file
          POSIX:  C++ file
  .cc     C++ file
  .cpp    C++ file
  .cxx    C++ file
  .cxx    C++ file
  .c++    C++ file
  .C++    C++ file
  .f      Fortran file
  .F      WIN32:  Fortran file
          POSIX:  Fortran file + C pre-processor
  .for    Fortran file
  .FOR    Fortran file
  .fpp    Fortran file + C pre-processor
  .FPP    Fortran file + C pre-processor
  .s      assembly language file
  .S      WIN32:  assembly language file
          POSIX:  assembly language file + C pre-processor
  .spp    assembly language file + C pre-processor
  .SPP    assembly language file + C pre-processor
.EE
.IP
The target object file prefix
(specified by the $OBJPREFIX construction variable; nothing by default)
and suffix
(specified by the $OBJSUFFIX construction variable;
\.obj on Windows systems, .o on POSIX systems)
are automatically added to the target if not already present.
Examples:

.ES
env.StaticObject(target = 'aaa', source = 'aaa.c')
env.StaticObject(target = 'bbb.o', source = 'bbb.c++')
env.StaticObject(target = 'ccc.obj', source = 'ccc.f')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Tar()
.IP env.Tar()
Builds a tar archive of the specified files
and/or directories.
Unlike most builder methods,
the
.B Tar
builder method may be called multiple times
for a given target;
each additional call
adds to the list of entries
that will be built into the archive.

.ES
env.Tar('src.tar', 'src')

# Create the stuff.tar file.
env.Tar('stuff', ['subdir1', 'subdir2'])
# Also add "another" to the stuff.tar file.
env.Tar('stuff', 'another')

# Set TARFLAGS to create a gzip-filtered archive.
env = Environment(TARFLAGS = '-c -z')
env.Tar('foo.tar.gz', 'foo')

# Also set the suffix to .tgz.
env = Environment(TARFLAGS = '-c -z',
                  TARSUFFIX = '.tgz')
env.Tar('foo')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP TypeLibrary()
.IP env.TypeLibrary()
Builds a Windows type library (.tlb) file from and input IDL file
(.idl).  In addition, it will build the associated inteface stub and
proxy source files.  It names them according to the base name of the .idl file.
.IP
For example,

.ES
env.TypeLibrary(source="foo.idl")
.EE
.IP
Will create foo.tlb, foo.h, foo_i.c, foo_p.c, and foo_data.c.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.IP Zip()
.IP env.Zip()
Builds a zip archive of the specified files
and/or directories.
Unlike most builder methods,
the
.B Zip
builder method may be called multiple times
for a given target;
each additional call
adds to the list of entries
that will be built into the archive.

.ES
env.Zip('src.zip', 'src')

# Create the stuff.zip file.
env.Zip('stuff', ['subdir1', 'subdir2'])
# Also add "another" to the stuff.tar file.
env.Zip('stuff', 'another')
.EE

.B scons
automatically scans
C source files, C++ source files,
Fortran source files with
.B .F
(POSIX systems only),
.B .fpp,
or
.B .FPP
file extensions,
and assembly language files with
.B .S
(POSIX systems only),
.B .spp,
or
.B .SPP
files extensions
for C preprocessor dependencies,
so the dependencies do not need to be specified explicitly.
In addition, all
targets of builder methods automatically depend on their sources.
An explicit dependency can
be specified using the 
.B Depends 
method of a construction environment (see below).

.SS Methods and Functions to Do Things
In addition to Builder methods,
.B scons
provides a number of other construction environment methods
and global functions to
manipulate the build configuration.

Usually, a construction environment method
and global function with the same name both exist
so that you don't have to remember whether
to a specific bit of functionality
must be called with or without a construction environment.
In the following list,
if you call something as a global function
it looks like:
.ES
.RI Function( arguments )
.EE
and if you call something through a construction
environment it looks like:
.ES
.RI env.Function( arguments )
.EE
If you can call the functionality in both ways,
then both forms are listed.

Except where otherwise noted,
the same-named
construction environment method
and global function 
provide the exact same functionality.
The only difference is that,
where appropriate,
calling the functionality through a construction environment will
substitute construction variables into
any supplied strings.
For example:
.ES
env = Environment(FOO = 'foo')
Default('$FOO')
env.Default('$FOO')
.EE
the first call to the global
.B Default()
function will actually add a target named
.B $FOO
to the list of default targets,
while the second call to the
.B env.Default()
construction environment method
will expand the value
and add a target named
.B foo
to the list of default targets.
For more on construction variable expansion,
see the next section on
construction variables.

Construction environment methods
and global functions supported by
.B scons
include:

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI Action( action ", [" strfunction ", " varlist ])
.TP
.RI env.Action( action ", [" strfunction ", " varlist ])
Creates an Action object for
the specified
.IR action .
See the section "Action Objects,"
below, for a complete explanation of the arguments and behavior.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI AddPostAction( target ", " action )
.TP
.RI env.AddPostAction( target ", " action )
Arranges for the specified
.I action
to be performed
after the specified
.I target
has been built.
The specified action(s) may be
an Action object, or anything that
can be converted into an Action object
(see below).

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI AddPreAction( target ", " action )
.TP
.RI env.AddPreAction( target ", " action )
Arranges for the specified
.I action
to be performed
before the specified
.I target
is built.
The specified action(s) may be
an Action object, or anything that
can be converted into an Action object
(see below).

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Alias( alias ", [" targets ])
.TP
.RI env.Alias( alias ", [" targets ])
Creates one or more phony targets that
expand to one or more other targets.
Returns the Node object representing the alias,
which exists outside of any file system.
This Node object, or the alias name,
may be used as a dependency of any other target,
including another alias.
.B Alias
can be called multiple times for the same
alias to add additional targets to the alias.

.ES
Alias('install')
Alias('install', '/usr/bin')
Alias(['install', 'install-lib'], '/usr/local/lib')

env.Alias('install', ['/usr/local/bin', '/usr/local/lib'])
env.Alias('install', ['/usr/local/man'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI AlwaysBuild( target ", ...)"
.TP
.RI env.AlwaysBuild( target ", ...)"
Marks each given
.I target
so that it is always assumed to be out of date,
and will always be rebuilt if needed.
Note, however, that
.BR AlwaysBuild ()
does not add its target(s) to the default target list,
so the targets will only be built
if they are specified on the command line,
or are a dependent of a target specified on the command line--but
they will
.I always
be built if so specified.
Multiple targets can be passed in to a single call to
.BR AlwaysBuild ().

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.Append( key = val ", [...])"
Appends the specified keyword arguments
to the end of construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the values of the construction variable
and the keyword argument are the same type,
then the two values will be simply added together.
Otherwise, the construction variable
and the value of the keyword argument
are both coerced to lists,
and the lists are added together.
(See also the Prepend method, below.)

.ES
env.Append(CCFLAGS = ' -g', FOO = ['foo.yyy'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.AppendENVPath( name ", " newpath ", [" envname ", " sep ])
This appends new path elements to the given path in the
specified external environment
.RB ( ENV
by default).
This will only add
any particular path once (leaving the last one it encounters and
ignoring the rest, to preserve path order),
and to help assure this,
will normalize all paths (using
.B os.path.normpath
and
.BR os.path.normcase ).
This can also handle the
case where the given old path variable is a list instead of a
string, in which case a list will be returned instead of a string.
Example:

.ES
print 'before:',env['ENV']['INCLUDE']
include_path = '/foo/bar:/foo'
env.PrependENVPath('INCLUDE', include_path)
print 'after:',env['ENV']['INCLUDE']

yields:
before: /foo:/biz
after: /biz:/foo/bar:/foo
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
env.BitKeeper()
A factory function that
returns a Builder object
to be used to fetch source files
using BitKeeper.
The returned Builder
is intended to be passed to the
.B SourceCode
function.

.ES
env.SourceCode('.', env.BitKeeper())
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI BuildDir( build_dir ", " src_dir ", [" duplicate ])
.TP
.RI env.BuildDir( build_dir ", " src_dir ", [" duplicate ])
This specifies a build directory
.I build_dir
in which to build all derived files
that would normally be built under
.IR src_dir .
Multiple build directories can be set up for multiple build variants, for
example. 
.I src_dir
must be underneath the SConstruct file's directory,
and
.I build_dir
may not be underneath the
.I src_dir .

The default behavior is for
.B scons
to duplicate all of the files in the tree underneath
.I src_dir
into
.IR build_dir ,
and then build the derived files within the copied tree.
(The duplication is performed by
linking or copying,
depending on the platform.)
This guarantees correct builds
regardless of whether intermediate source files
are generated during the build,
where preprocessors or other scanners search
for included files,
or whether individual compilers or other invoked tools
are hard-coded to put derived files in the same directory as source files.

This behavior of making a complete copy of the source tree
may be disabled by setting
.I duplicate
to 0.
This will cause
.B scons
to invoke Builders using the
path names of source files in
.I src_dir
and the path names of derived files within
.IR build_dir .
This is always more efficient than
.IR duplicate =1,
and is usually safe for most builds.
Specifying
.IR duplicate =0,
however,
may cause build problems
if source files are generated during the build,
if any invoked tools are hard-coded to
put derived files in the same directory as the source files.

Note that specifying a
.B BuildDir
works most naturally
with a subsidiary SConscript file
in the source directory.
However,
you would then call the subsidiary SConscript file
not in the source directory,
but in the
.I build_dir ,
as if
.B scons
had made a virtual copy of the source tree
regardless of the value of 
.IR duplicate .
This is how you tell
.B scons
which variant of a source tree to build.
For example:

.ES
BuildDir('build-variant1', 'src')
SConscript('build-variant1/SConscript')
BuildDir('build-variant2', 'src')
SConscript('build-variant2/SConscript')
.EE

.IP
See also the
.BR SConscript ()
function, described below,
for another way to 
specify a build directory
in conjunction with calling a subsidiary
SConscript file.)

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI Builder( action ", [" multi ", " prefix ", " suffix ", " src_suffix ", " src_builder ", " emitter ])
.TP 
.RI env.Builder( action ", [" multi ", " prefix ", " suffix ", " src_suffix ", " src_builder ", " emitter ])
Creates a Builder object for
the specified
.IR action .
See the section "Builder Objects,"
below, for a complete explanation of the arguments and behavior.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI CacheDir( cache_dir )
.TP 
.RI env.CacheDir( cache_dir )
Specifies that
.B scons
will maintain a cache of derived files in
.I cache_dir .
The derived files in the cache will be shared
among all the builds using the same
.BR CacheDir ()
call.

When a
.BR CacheDir ()
is being used and
.B scons
finds a derived file that needs to be rebuilt,
it will first look in the cache to see if a
derived file has already been built
from identical input files and an identical build action
(as incorporated into the MD5 build signature).
If so,
.B scons
will retrieve the file from the cache.
If the derived file is not present in the cache,
.B scons
will rebuild it and
then place a copy of the built file in the cache
(identified by its MD5 build signature),
so that it may be retrieved by other
builds that need to build the same derived file
from identical inputs.

Use of a specified
.BR CacheDir()
may be disabled for any invocation
by using the
.B --cache-disable
option.

If the
.B --cache-force
option is used,
.B scons
will place a copy of
.I all
derived files in the cache,
even if they already existed
and were not built by this invocation.
This is useful to populate a cache
the first time
.BR CacheDir ()
is added to a build,
or after using the
.B --cache-disable
option.

When using
.BR CacheDir (),
.B scons
will report,
"Retrieved `file' from cache,"
unless the
.B --cache-show
option is being used.
When the
.B --cache-show
option is used,
.B scons
will print the action that
.I would
have been used to build the file,
without any indication that
the file was actually retrieved from the cache.
This is useful to generate build logs
that are equivalent regardless of whether
a given derived file has been built in-place
or retrieved from the cache.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI Clean( target ", " files_or_dirs )
.TP 
.RI env.Clean( target ", " files_or_dirs )
This specifies a list of files or directories which should be removed
whenever the target is specified with the
.B -c
command line option.
Multiple calls to
.BR Clean ()
are legal,
and create a new target or add files and directories to the
clean list for the specified target.

Multiple files or directories should be specified
either as separate arguments to the
.BR Clean ()
method, or as a list.
.BR Clean ()
will also accept the return value of any of the construction environment
Builder methods.
Examples:

.ES
Clean('foo', ['bar', 'baz'])
Clean('dist', env.Program('hello', 'hello.c'))
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Command( target ", " source ", " commands )
.TP
.RI env.Command( target ", " source ", " commands )
Executes a specific action
(or list of actions)
to build a target file or files.
This is more convenient
than defining a separate Builder object
for a single special-case build.

Note that an action can be an external command,
specified as a string,
or a callable Python object;
see "Action Objects," below.
Examples:

.ES
env.Command('foo.out', 'foo.in',
            "$FOO_BUILD < $SOURCES > $TARGET")

env.Command('bar.out', 'bar.in',
            ["rm -f $TARGET",
             "$BAR_BUILD < $SOURCES > $TARGET"])

def rename(env, target, source):
    import os
    os.rename('.tmp', str(target[0]))

env.Command('baz.out', 'baz.in',
            ["$BAZ_BUILD < $SOURCES > .tmp",
	     rename ])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Configure( env ", [" custom_tests ", " conf_dir ", " log_file ])
.TP
.RI env.Configure([ custom_tests ", " conf_dir ", " log_file ])
Creates a Configure object for integrated
functionality similar to GNU autoconf.
See the section "Configure Contexts,"
below, for a complete explanation of the arguments and behavior.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.Copy([ key = val ", ...])"
Return a separate copy of a construction environment.
If there are any keyword arguments specified,
they are added to the returned copy,
overwriting any existing values
for the keywords.

.ES
env2 = env.Copy()
env3 = env.Copy(CCFLAGS = '-g')
.EE
.IP
Additionally, a list of tools may be specified, as in the Environment
constructor:

.ES
def MyTool(env): env['FOO'] = 'bar'
env4 = env.Copy(tools = ['msvc', MyTool])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.CVS( repository ", " module )
A factory function that
returns a Builder object
to be used to fetch source files
from the specified
CVS
.IR repository .
The returned Builder
is intended to be passed to the
.B SourceCode
function.

The optional specified
.I module
will be added to the beginning
of all repository path names;
this can be used, in essence,
to strip initial directory names
from the repository path names,
so that you only have to
replicate part of the repository
directory hierarchy in your
local build directory:

.ES
# Will fetch foo/bar/src.c
# from /usr/local/CVSROOT/foo/bar/src.c.
env.SourceCode('.', env.CVS('/usr/local/CVSROOT'))

# Will fetch bar/src.c
# from /usr/local/CVSROOT/foo/bar/src.c.
env.SourceCode('.', env.CVS('/usr/local/CVSROOT', 'foo'))

# Will fetch src.c
# from /usr/local/CVSROOT/foo/bar/src.c.
env.SourceCode('.', env.CVS('/usr/local/CVSROOT', 'foo/bar'))
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI Default( targets )
.TP
.RI env.Default( targets )
This specifies a list of default targets,
which will be built by
.B scons
if no explicit targets are given on the command line.
Multiple calls to
.BR Default ()
are legal,
and add to the list of default targets.

Multiple targets should be specified as
separate arguments to the
.BR Default ()
method, or as a list.
.BR Default ()
will also accept the Node returned by any
of a construction environment's
builder methods.
Examples:

.ES
Default('foo', 'bar', 'baz')
env.Default(['a', 'b', 'c'])
hello = env.Program('hello', 'hello.c')
env.Default(hello)
.EE
.IP
An argument to
.BR Default ()
of
.B None
will clear all default targets.
Later calls to
.BR Default ()
will add to the (now empty) default-target list
like normal.

The current list of targets added using the
.BR Default ()
function or method is available in the
.B DEFAULT_TARGETS
list;
see below.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI DefaultEnvironment([ args ])
Creates and returns a default construction environment object.
This construction environment is used internally by SCons
in order to execute many of the global functions in this list,
and to fetch source files transparently
from source code management systems.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Depends( target ", " dependency )
.TP
.RI env.Depends( target ", " dependency )
Specifies an explicit dependency;
the target file(s) will be rebuilt
whenever the dependency file(s) has changed.
This should only be necessary
for cases where the dependency
is not caught by a Scanner
for the file.

.ES
env.Depends('foo', 'other-input-file-for-foo')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.Dictionary([ vars ])
Returns a dictionary object
containing copies of all of the
construction variables in the environment.
If there are any variable names specified,
only the specified construction
variables are returned in the dictionary.

.ES
dict = env.Dictionary()
cc_dict = env.Dictionary('CC', 'CCFLAGS', 'CCCOM')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Dir( name ", [" directory ])
.TP
.RI env.Dir( name ", [" directory ])
This returns an object that represents a given directory 
.IR name . 
.I name
can be a relative or absolute path. 
.I directory
is an optional directory that will be used as the parent directory. 

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI EnsurePythonVersion( major ", " minor )
.TP
.RI env.EnsurePythonVersion( major ", " minor )
Ensure that the Python version is at least 
.IR major . minor . 
This function will
print out an error message and exit SCons with a non-zero exit code if the
actual Python version is not late enough.

.ES
EnsurePythonVersion(2,2)
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI EnsureSConsVersion( major ", " minor )
.TP
.RI env.EnsureSConsVersion( major ", " minor )
Ensure that the SCons version is at least 
.IR major . minor . 
This function will
print out an error message and exit SCons with a non-zero exit code if the
actual SCons version is not late enough.

.ES
EnsureSConsVersion(0,9)
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Environment([ key = value ", ...])"
.TP
.RI env.Environment([ key = value ", ...])"
Return a new construction environment
initialized with the specified
.IR key = value
pairs.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Exit([ value ])
.TP
.RI env.Exit([ value ])
This tells
.B scons
to exit immediately
with the specified
.IR value .
A default exit value of
.B 0
(zero)
is used if no value is specified.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Export( vars )
.TP
.RI env.Export( vars )
This tells 
.B scons
to export a list of variables from the current
SConscript file to all other SConscript files.
The exported variables are kept in a global collection,
so subsequent calls to
.BR Export ()
will over-write previous exports that have the same name. 
Multiple variable names can be passed to
.BR Export ()
as separate arguments or as a list. A dictionary can be used to map
variables to a different name when exported. Both local variables and
global variables can be exported.
Examples:

.ES
env = Environment()
# Make env available for all SConscript files to Import().
Export("env")

package = 'my_name'
# Make env and package available for all SConscript files:.
Export("env", "package")

# Make env and package available for all SConscript files:
Export(["env", "package"])

# Make env available using the name debug:.
Export({"debug":env})
.EE

.IP
Note that the
.BR SConscript ()
function supports an
.I exports
argument that makes it easier to to export a variable or
set of variables to a single SConscript file.
See the description of the
.BR SConscript ()
function, below.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI File( name ", [" directory ])
.TP 
.RI env.File( name ", [" directory ])
This returns an object that represents a given file 
.IR name . 
.I name
can be a relative or absolute path. 
.I directory
is an optional directory that will be used as the parent directory. 

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI FindFile( file ", " dirs )
.TP
.RI env.FindFile( file ", " dirs )
Search for 
.I file 
in the path specified by 
.IR dirs .
.I file
may be a list of file names or a single file name. In addition to searching
for files that exist in the filesytem, this function also searches for
derived files that have not yet been built.

.ES
foo = env.FindFile('foo', ['dir1', 'dir2'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI GetBuildPath( file ", [" ... ])
.TP
.RI env.GetBuildPath( file ", [" ... ])
Returns the
.B scons
path name (or names) for the specified
.I file
(or files).
The specified
.I file
or files
may be
.B scons
Nodes or strings representing path names.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI GetLaunchDir()
.TP
.RI env.GetLaunchDir()
Returns the absolute path name of the directory from which
.B
scons
was initially invoked.
This can be useful when using the
.BR \-u ,
.BR \-U
or
.BR \-D
options, which internally
change to the directory in which the
.B SConstruct
file is found.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI GetOption( name )
.TP
.RI env.GetOption( name )
This function provides a way to query a select subset of the scons command line
options from a SConscript file. See 
.IR SetOption () 
for a description of the options available.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
'\".TP
'\".RI GlobalBuilders( flag )
'\"When
'\".B flag
'\"is non-zero,
'\"adds the names of the default builders
'\"(Program, Library, etc.)
'\"to the global name space
'\"so they can be called without an explicit construction environment.
'\"(This is the default.)
'\"When
'\".B
'\"flag is zero,
'\"the names of the default builders are removed
'\"from the global name space
'\"so that an explicit construction environment is required
'\"to call all builders.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Help( text )
.TP
.RI env.Help( text )
This specifies help text to be printed if the 
.B -h 
argument is given to
.BR scons .
.B scons
will exit after printing out the help text.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Ignore( target ", " dependency )
.TP
.RI env.Ignore( target ", " dependency )
The specified dependency file(s)
will be ignored when deciding if
the target file(s) need to be rebuilt.

.ES
env.Ignore('foo', 'foo.c')
env.Ignore('bar', ['bar1.h', 'bar2.h'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI Import( vars )
.TP 
.RI env.Import( vars )
This tells 
.B scons
to import a list of variables into the current SConscript file. This
will import variables that were exported with
.BR Export ()
or in the 
.I exports
argument to 
.BR SConscript ().
Variables exported by 
.BR SConscript ()
have precedence.
Multiple variable names can be passed to 
.BR Import ()
as separate arguments or as a list. The variable "*" can be used
to import all variables.
Examples:

.ES
Import("env")
Import("env", "variable")
Import(["env", "variable"])
Import("*")
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Install( dir ", " source )
.TP
.RI env.Install( dir ", " source )
Installs one or more files in a destination directory.
The file names remain the same.

.ES
env.Install(dir = '/usr/local/bin', source = ['foo', 'bar'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI InstallAs( target ", " source )
.TP
.RI env.InstallAs( target ", " source )
Installs one or more files as specific file names,
allowing changing a file name as part of the
installation.
It is an error if the target and source
list different numbers of files.

.ES
env.InstallAs(target = '/usr/local/bin/foo',
              source = 'foo_debug')
env.InstallAs(target = ['../lib/libfoo.a', '../lib/libbar.a'],
              source = ['libFOO.a', 'libBAR.a'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Literal( string )
.TP
.RI env.Literal( string )
The specified
.I string
will be preserved as-is
and not have construction variables expanded.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Local( targets )
.TP
.RI env.Local( targets )
The specified
.I targets
will have copies made in the local tree,
even if an already up-to-date copy
exists in a repository.
Returns a list of the target Node or Nodes.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.ParseConfig( command ", [" function ])
Calls the specified
.I function
to modify the environment as specified by the output of
.I command .
The default
.I function
expects the output of a typical
.I *-config command
(for example,
.BR gtk-config )
and parses the returned
.BR -L ,
.BR -l ,
.B -I
and other options
into the
.BR LIBPATH ,
.BR LIBS ,
.B CPPPATH
and
.B CCFLAGS
variables,
respectively.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
env.Perforce()
A factory function that
returns a Builder object
to be used to fetch source files
from the Perforce source code management system.
The returned Builder
is intended to be passed to the
.B SourceCode
function:

.ES
env.SourceCode('.', env.Perforce())
.EE
.IP
Perforce uses a number of external
environment variables for its operation.
Consequently, this function adds the
following variables from the user's external environment
to the construction environment's
ENV dictionary:
P4CHARSET,
P4CLIENT,
P4LANGUAGE,
P4PASSWD,
P4PORT,
P4USER,
SYSTEMROOT,
USER,
and
USERNAME.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Platform( string )
Returns a callable object
that can be used to initialize
a construction environment using the
platform keyword of the Environment() method:

.ES
env = Environment(platform = Platform('win32'))
.EE
.TP
.RI env.Platform( string )
Applies the callable object for the specified platform
.I string
to the environment through which the method was called.

.ES
env.Platform('posix')
.EE
.IP
Note that the
.B win32
platform adds the
.B SYSTEMROOT
variable from the user's external environment
to the construction environment's
.B ENV
dictionary.
This is so that any executed commands
that use sockets to connect with other systems
(such as fetching source files from
external CVS repository specifications like 
.BR :pserver:anonymous@cvs.sourceforge.net:/cvsroot/scons )
will work on Win32 systems.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Precious( target ", ...)"
.TP
.RI env.Precious( target ", ...)"
Marks each given
.I target
as precious so it is not deleted before it is rebuilt. Normally
.B scons
deletes a target before building it.
Multiple targets can be passed in to a single call to
.BR Precious ().

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.Prepend( key = val ", [...])"
Appends the specified keyword arguments
to the beginning of construction variables in the environment.
If the Environment does not have
the specified construction variable,
it is simply added to the environment.
If the values of the construction variable
and the keyword argument are the same type,
then the two values will be simply added together.
Otherwise, the construction variable
and the value of the keyword argument
are both coerced to lists,
and the lists are added together.
(See also the Append method, above.)

.ES
env.Prepend(CCFLAGS = '-g ', FOO = ['foo.yyy'])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.PrependENVPath( name ", " newpath ", [" envname ", " sep ])
This appends new path elements to the given path in the
specified external environment
.RB ( ENV
by default).
This will only add
any particular path once (leaving the first one it encounters and
ignoring the rest, to preserve path order),
and to help assure this,
will normalize all paths (using
.B os.path.normpath
and
.BR os.path.normcase ).
This can also handle the
case where the given old path variable is a list instead of a
string, in which case a list will be returned instead of a string.
Example:

.ES
print 'before:',env['ENV']['INCLUDE']
include_path = '/foo/bar:/foo'
env.PrependENVPath('INCLUDE', include_path)
print 'after:',env['ENV']['INCLUDE']

yields:
before: /biz:/foo
after: /foo/bar:/foo:/biz
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
env.RCS()
A factory function that
returns a Builder object
to be used to fetch source files
from RCS.
The returned Builder
is intended to be passed to the
.B SourceCode
function:

.ES
env.SourceCode('.', env.RCS())
.EE
.IP
Note that
.B scons
will fetch source files
from RCS subdirectories automatically,
so configuring RCS
as demonstrated in the above example
should only be necessary if
you are fetching from
RCS,v
files in the same
directory as the source files,
or if you need to explicitly specify RCS
for a specific subdirectory.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI env.Replace( key = val ", [...])"
Replaces construction variables in the Environment
with the specified keyword arguments.

.ES
env.Replace(CCFLAGS = '-g', FOO = 'foo.xxx')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Repository( directory )
.TP
.RI env.Repository( directory )
Specifies that
.I directory
is a repository to be searched for files.
Multiple calls to
.BR Repository ()
are legal,
and each one adds to the list of
repositories that will be searched.

To
.BR scons ,
a repository is a copy of the source tree,
from the top-level directory on down,
which may contain
both source files and derived files
that can be used to build targets in
the local source tree.
The canonical example would be an
official source tree maintained by an integrator.
If the repository contains derived files,
then the derived files should have been built using
.BR scons ,
so that the repository contains the necessary
signature information to allow
.B scons
to figure out when it is appropriate to
use the repository copy of a derived file,
instead of building one locally.

Note that if an up-to-date derived file
already exists in a repository,
.B scons
will
.I not
make a copy in the local directory tree.
In order to guarantee that a local copy
will be made,
use the
.B Local()
method.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Return( vars )
This tells
.B scons
what variable(s) to use as the return value(s) of the current SConscript
file. These variables will be returned to the "calling" SConscript file
as the return value(s) of 
.BR SConscript ().
Multiple variable names should be passed to 
.BR Return ()
as a list. Example:

.ES
Return("foo")
Return(["foo", "bar"])
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP 
.RI Scanner( function ", [" argument ", " keys ", " path_function ", " node_class ", " node_factory ", " scan_check ", " recursive ])
.TP 
.RI env.Scanner( function ", [" argument ", " keys ", " path_function ", " node_class ", " node_factory ", " scan_check ", " recursive ])
Creates a Scanner object for
the specified
.IR function .
See the section "Scanner Objects,"
below, for a complete explanation of the arguments and behavior.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
env.SCCS()
A factory function that
returns a Builder object
to be used to fetch source files
from SCCS.
The returned Builder
is intended to be passed to the
.B SourceCode
function:

.ES
env.SourceCode('.', env.SCCS())
.EE
.IP
Note that
.B scons
will fetch source files
from SCCS subdirectories automatically,
so configuring SCCS
as demonstrated in the above example
should only be necessary if
you are fetching from
.I s.SCCS
files in the same
directory as the source files,
or if you need to explicitly specify SCCS
for a specific subdirectory.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SConscript( scripts ", [" exports ", " build_dir ", " src_dir ", " duplicate ])
.TP
.RI env.SConscript( scripts ", [" exports ", " build_dir ", " src_dir ", " duplicate ])
.TP
.RI SConscript(dirs= subdirs ", [name=" script ", " exports ", " build_dir ", " src_dir ", " duplicate ])
.TP
.RI env.SConscript(dirs= subdirs ", [name=" script ", " exports ", " build_dir ", " src_dir ", " duplicate ])
This tells
.B scons
to execute
one or more subsidiary SConscript (configuration) files.
There are two ways to call the
.BR SConscript ()
function.

The first way you can call
.BR SConscript ()
is to explicitly specify one or more
.I scripts
as the first argument.
A single script may be specified as a string;
multiple scripts must be specified as a list
(either explicitly or as created by
a function like
.BR Split ()).

The second way you can call
.BR SConscript ()
is to specify a list of (sub)directory names
as a
.RI dirs= subdirs
keyword argument.
In this case,
.B scons
will, by default,
execute a subsidiary configuration file named
.B SConscript
in each of the specified directories.
You may specify a name other than
.B SConscript
by supplying an optional
.RI name= script
keyword argument.

The optional 
.I exports
argument provides a list of variable names or a dictionary of
named values to export to the
.IR script(s) ". "
These variables are locally exported only to the specified
.IR script(s) ,
and do not affect the
global pool of variables used by
the
.BR Export ()
function.
'\"If multiple dirs are provided,
'\"each script gets a fresh export.
The subsidiary
.I script(s)
must use the
.BR Import ()
function to import the variables.

The optional
.I build_dir
argument specifies that all of the target files
(for example, object files and executables)
that would normally be built in the subdirectory in which
.I script
resides should actually
be built in
.IR build_dir .

The optional
.I src_dir
argument specifies that the
source files from which
the target files should be built
can be found in
.IR src_dir .

By default,
.B scons
will link or copy (depending on the platform)
all the source files into the build directory.
This behavior may be disabled by
setting the optional
.I duplicate
argument to 0
(it is set to 1 by default),
in which case
.B scons
will refer directly to
the source files in their source directory
when building target files.
(Setting
.IR duplicate =0
is usually safe, and always more efficient
than the default of
.IR duplicate =1,
but it may cause build problems in certain end-cases,
such as compiling from source files that
are generated by the build.)

Any variables returned by 
.I script 
using 
.BR Return ()
will be returned by the call to
.BR SConscript (). 

Examples:

.ES
SConscript('subdir/SConscript')
foo = SConscript('sub/SConscript', exports='env')
SConscript('dir/SConscript', exports=['env', 'variable'])
SConscript('src/SConscript', build_dir='build', duplicate=0)
SConscript('bld/SConscript', src_dir='src', exports='env variable')
SConscript(dirs=['sub1', 'sub2'])
SConscript(dirs=['sub3', 'sub4'], name='MySConscript')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SConscriptChdir( value )
.TP
.RI env.SConscriptChdir( value )
By default,
.B scons
changes its working directory
to the directory in which each
subsidiary SConscript file lives.
This behavior may be disabled
by specifying either:

.ES
SConscriptChdir(0)
env.SConscriptChdir(0)
.EE
.IP
in which case
.B scons
will stay in the top-level directory
while reading all SConscript files.
(This may be necessary when building from repositories,
when all the directories in which SConscript files may be found
don't necessarily exist locally.)

You may enable and disable
this ability by calling
SConscriptChdir()
multiple times:

.ES
env = Environment()
SConscriptChdir(0)
SConscript('foo/SConscript')	# will not chdir to foo
env.SConscriptChdir(1)
SConscript('bar/SConscript')	# will chdir to bar
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SConsignFile([ file ])
.TP
.RI env.SConsignFile([ file ])
This tells
.B scons
to store all file signatures
in the specified
.IR file .
If the
.I file
is omitted,
.B .sconsign.dbm
is used by default.
If
.I file
is not an absolute path name,
the file is placed in the same directory as the top-level
.B SConstruct
file.
Examples:

.ES
# Stores signatures in ".sconsign.dbm"
# in the top-level SConstruct directory.
SConsignFile()

# Stores signatures in the file "etc/scons-signatures"
# relative to the top-level SConstruct directory.
SConsignFile("etc/scons-signatures")

# Stores signatures in the specified absolute file name.
SConsignFile("/home/me/SCons/signatures")
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SetOption( name ", " value )
.TP
.RI env.SetOption( name ", " value )
This function provides a way to set a select subset of the scons command
line options from a SConscript file. The options supported are: clean which
cooresponds to -c, --clean, and --remove; implicit_cache which corresponds
to --implicit-cache; max_drift which corresponds to --max-drift; and
num_jobs which corresponds to -j and --jobs. See the documentation for the
corresponding command line object for information about each specific
option. Example:

.ES
SetOption('max_drift', 1)
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SideEffect( side_effect ", " target )
.TP
.RI env.SideEffect( side_effect ", " target )
Declares
.I side_effect
as a side effect of building
.IR target . 
Both 
.I side_effect 
and
.I target
can be a list, a file name, or a node.
A side effect is a target that is created
as a side effect of building other targets.
For example, a Windows PDB
file is created as a side effect of building the .obj
files for a static library.
If a target is a side effect of multiple build commands,
.B scons
will ensure that only one set of commands
is executed at a time.
Consequently, you only need to use this method
for side-effect targets that are built as a result of
multiple build commands.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SourceCode( entries ", " builder )
.TP
.RI env.SourceCode( entries ", " builder )
Arrange for non-existent source files to
be fetched from a source code management system
using the specified
.IR builder .
The specified
.I entries
may be a Node, string or list of both,
and may represent either individual
source files or directories in which
source files can be found.

For any non-existent source files,
.B scons
will search up the directory tree
and use the first
.B SourceCode
builder it finds.
The specified
.I builder
may be
.BR None ,
in which case
.B scons
will not use a builder to fetch
source files for the specified
.IR entries ,
even if a
.B SourceCode
builder has been specified
for a directory higher up the tree.

.B scons
will, by default,
fetch files from SCCS or RCS subdirectories
without explicit configuration.
This takes some extra processing time
to search for the necessary
source code management files on disk.
You can avoid these extra searches
and speed up your build a little
by disabling these searches as follows:

.ES
env.SourceCode('.', None)
.EE

.IP
Note that if the specified
.I builder
is one you create by hand,
it must have an associated
construction environment to use
when fetching a source file.

.B scons
provides a set of canned factory
functions that return appropriate
Builders for various popular
source code management systems.
Canonical examples of invocation include:

.ES
env.SourceCode('.', env.BitKeeper('/usr/local/BKsources'))
env.SourceCode('src', env.CVS('/usr/local/CVSROOT'))
env.SourceCode('/', env.RCS())
env.SourceCode(['f1.c', 'f2.c'], env.SCCS())
env.SourceCode('no_source.c', None)
.EE
'\"env.SourceCode('.', env.Subversion('file:///usr/local/Subversion'))
'\"
'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
'\".TP
'\".RI Subversion( repository ", " module )
'\"A factory function that
'\"returns a Builder object
'\"to be used to fetch source files
'\"from the specified Subversion
'\".IR repository .
'\"The returned Builder
'\"is intended to be passed to the
'\".B SourceCode
'\"function.
'\"
'\"The optional specified
'\".I module
'\"will be added to the beginning
'\"of all repository path names;
'\"this can be used, in essence,
'\"to strip initial directory names
'\"from the repository path names,
'\"so that you only have to
'\"replicate part of the repository
'\"directory hierarchy in your
'\"local build directory:
'\"
'\".ES
'\"# Will fetch foo/bar/src.c
'\"# from /usr/local/Subversion/foo/bar/src.c.
'\"env.SourceCode('.', env.Subversion('file:///usr/local/Subversion'))
'\"
'\"# Will fetch bar/src.c
'\"# from /usr/local/Subversion/foo/bar/src.c.
'\"env.SourceCode('.', env.Subversion('file:///usr/local/Subversion', 'foo'))
'\"
'\"# Will fetch src.c
'\"# from /usr/local/Subversion/foo/bar/src.c.
'\"env.SourceCode('.', env.Subversion('file:///usr/local/Subversion', 'foo/bar'))
'\".EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI SourceSignatures( type )
.TP
.RI env.SourceSignatures( type )
This function tells SCons what type of signature to use for source files:
.B "MD5"
or
.BR "timestamp" .
If the environment method is used,
the specified type of source signature
is only used when deciding whether targets
built with that environment are up-to-date or must be rebuilt.
If the global function is used,
the specified type of source signature becomes the default
used for all decisions
about whether targets are up-to-date.

"MD5" means the signature of a source file
is the MD5 checksum of its contents.
"timestamp" means the signature of a source file
is its timestamp (modification time).
When using "timestamp" signatures,
changes in the command line will not cause files to be rebuilt.
"MD5" signatures take longer to compute,
but are more accurate than "timestamp" signatures.
The default is "MD5".

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Split( arg )
.TP
.RI env.Split( arg )
Returns a list of file names or other objects.
If arg is a string,
it will be split on strings of white-space characters
within the string,
making it easier to write long lists of file names.
If arg is already a list,
the list will be returned untouched.
If arg is any other type of object,
it will be returned as a list
containing just the object.

.ES
files = Split("f1.c f2.c f3.c")
files = env.Split("f4.c f5.c f6.c")
files = Split("""
	f7.c
	f8.c
	f9.c
""")
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI TargetSignatures( type )
.TP
.RI env.TargetSignatures( type )
This function tells SCons what type of signatures to use
for target files:
.B "build"
or
.BR "content" .
If the environment method is used,
the specified type of signature is only used
for targets built with that environment.
If the global function is used,
the specified type of signature becomes the default
used for all target files that
don't have an explicit target signature type
specified for their environments.

"build" means the signature of a target file
is made by concatenating all of the
signatures of all its source files.
"content" means the signature of a target
file is an MD5 checksum of its contents.
"build" signatures are usually faster to compute,
but "content" signatures can prevent unnecessary rebuilds
when a target file is rebuilt to the exact same contents
as the previous build.
The default is "build".

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Tool( string )
Returns a callable object
that can be used to initialize
a construction environment using the
tools keyword of the Environment() method.
The object may be called with a construction
environment as an argument,
in which case the object will be
add the necessary variables
to the construction environment
and the name of the tool will be added to the
.B $TOOLS
construction variable.

.ES
env = Environment(tools = [ Tool('msvc') ])

env = Environment()
t = Tool('msvc')
t(env)  # adds 'msvc' to the TOOLS variable
.EE
.TP
.RI env.Tool( string )
Applies the callable object for the specified tool
.I string
to the environment through which the method was called.

.ES
env.Tool('gcc')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI Value( value )
.TP
.RI env.Value( value )
Returns a Node object representing the specified Python value.  Value
nodes can be used as dependencies of targets.  If the result of
calling
.BR str( value )
changes between SCons runs, any targets depending on
.BR Value( value )
will be rebuilt.  When using timestamp source signatures, Value nodes'
timestamps are equal to the system time when the node is created.

.ES
def create(target, source, env):
    f = open(str(target[0]), 'wb')
    f.write('prefix=' + source[0].get_contents())
    
prefix = ARGUMENTS.get('prefix', '/usr/local')
env = Environment()
env['BUILDERS']['Config'] = Builder(action = create)
env.Config(target = 'package-config', source = Value(prefix))
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
.RI WhereIs( program ", [" path  ", [" pathext ]])
.TP
.RI env.WhereIs( program ", [" path  ", [" pathext ]])

Searches for the specified executable
.I program,
returning the full path name to the program
if it is found,
and returning None if not.
Searches the specified
.I path,
the value of the calling environment's PATH
(env['ENV']['PATH']),
or the user's current external PATH
(os.environ['PATH'])
by default.
On Win32 systems, searches for executable
programs with any of the file extensions
listed in the specified
.I pathext,
the calling environment's PATHEXT
(env['ENV']['PATHEXT'])
or the user's current PATHEXT
(os.environ['PATHEXT'])
by default.

.SS SConscript Variables
In addition to the global functions and methods,
.B scons
supports a number of Python variables
that can be used in SConscript files
to affect how you want the build to be performed.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
ARGUMENTS
A dictionary of all the
.IR keyword = value
arguments specified on the command line.
The dictionary is not in order,
and if a given keyword has
more than one value assigned to it
on the command line,
the last (right-most) value is
the one in the
.B ARGUMENTS
dictionary.

.ES
if ARGUMENTS.get('debug', 0):
    env = Environment(CCFLAGS = '-g')
else:
    env = Environment()
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
BUILD_TARGETS
A list of the targets which
.B scons
will actually try to build,
regardless of whether they were specified on
the command line or via the
.BR Default ()
function or method.
The elements of this list may be strings
.I or
nodes, so you should run the list through the Python
.B str
function to make sure any Node path names
are converted to strings.

Because this list may be taken from the
list of targets specified using the
.BR Default ()
function or method,
the contents of the list may change
on each successive call to
.BR Default ().
See the
.B DEFAULT_TARGETS
list, below,
for additional information.

.ES
if 'foo' in BUILD_TARGETS:
    print "Don't forget to test the `foo' program!"
if 'special/program' in BUILD_TARGETS:
    SConscript('special')
.EE
.IP
Note that the
.B BUILD_TARGETS
list only contains targets expected listed
on the command line or via calls to the
.BR Default ()
function or method.
It does
.I not
contain all dependent targets that will be built as
a result of making the sure the explicitly-specified
targets are up to date.

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
COMMAND_LINE_TARGETS
A list of the targets explicitly specified on
the command line.
If there are no targets specified on the command line,
the list is empty.
This can be used, for example,
to take specific actions only
when a certain target or targets
is explicitly being built:

.ES
if 'foo' in COMMAND_LINE_TARGETS:
    print "Don't forget to test the `foo' program!"
if 'special/program' in COMMAND_LINE_TARGETS:
    SConscript('special')
.EE

'\"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.TP
DEFAULT_TARGETS
A list of the target
.I nodes
that have been specified using the
.BR Default ()
function or method.
The elements of the list are nodes,
so you need to run them through the Python
.B str
function to get at the path name for each Node.

.ES
print str(DEFAULT_TARGETS[0])
if 'foo' in map(str, DEFAULT_TARGETS):
    print "Don't forget to test the `foo' program!"
.EE
.IP
The contents of the
.B DEFAULT_TARGETS
list change on on each successive call to the
.BR Default ()
function:

.ES
print map(str, DEFAULT_TARGETS)   # originally []
Default('foo')
print map(str, DEFAULT_TARGETS)   # now a node ['foo']
Default('bar')
print map(str, DEFAULT_TARGETS)   # now a node ['foo', 'bar']
Default(None)
print map(str, DEFAULT_TARGETS)   # back to []
.EE
.IP
Consequently, be sure to use
.B DEFAULT_TARGETS
only after you've made all of your
.BR Default ()
calls,
or else simply be careful of the order
of these statements in your SConscript files
so that you don't look for a specific
default target before it's actually been added to the list.

.SS Construction Variables
.\" XXX From Gary Ruben, 23 April 2002:
.\" I think it would be good to have an example with each construction
.\" variable description in the documentation.
.\" eg.
.\" CC     The C compiler
.\"    Example: env["CC"] = "c68x"
.\"    Default: env["CC"] = "cc"
.\" 
.\" CCCOM  The command line ...
.\"    Example:
.\"        To generate the compiler line c68x -ps -qq -mr -o $TARGET $SOURCES
.\"        env["CC"] = "c68x"
.\"        env["CFLAGS"] = "-ps -qq -mr"
.\"        env["CCCOM"] = "$CC $CFLAGS -o $TARGET $SOURCES
.\"    Default:
.\"        (I dunno what this is ;-)
A construction environment has an associated dictionary of
.I construction variables
that are used by built-in or user-supplied build rules.
Construction variables must follow the same rules for
Python identifiers:
the initial character must be an underscore or letter,
followed by any number of underscores, letters, or digits.

A number of useful construction variables are automatically defined by
scons for each supported platform, and additional construction variables
can be defined by the user. The following is a list of the automatically
defined construction variables:

.IP AR
The static library archiver.

.IP ARCOM
The command line used to generate a static library from object files.

.IP ARFLAGS
General options passed to the static library archiver.

.IP AS
The assembler.

.IP ASCOM
The command line used to generate an object file
from an assembly-language source file.

.IP ASFLAGS
General options passed to the assembler.

.IP ASPPCOM
The command line used to assemble an assembly-language
source file into an object file
after first running the file through the C preprocessor.
Any options specified in the $ASFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP BIBTEX
The bibliography generator for the TeX formatter and typesetter and the
LaTeX structured formatter and typesetter.

.IP BIBTEXCOM
The command line used to call the bibliography generator for the
TeX formatter and typesetter and the LaTeX structured formatter and
typesetter.

.IP BIBTEXFLAGS
General options passed to the bibliography generator for the TeX formatter
and typesetter and the LaTeX structured formatter and typesetter.

.IP BITKEEPER
The BitKeeper executable.

.IP BITKEEPERCOM
The command line for
fetching source files using BitKEeper.

.IP BITKEEPERGET
The command ($BITKEEPER) and subcommand
for fetching source files using BitKeeper.

.IP BITKEEPERGETFLAGS
Options that are passed to the BitKeeper
.B get
subcommand.

.IP BUILDERS
A dictionary mapping the names of the builders
available through this environment
to underlying Builder objects.
Builders named
Alias, CFile, CXXFile, DVI, Library, Object, PDF, PostScript, and Program
are available by default.
If you initialize this variable when an
Environment is created:

.ES
env = Environment(BUILDERS = {'NewBuilder' : foo})
.EE
.IP
the default Builders will no longer be available.
To use a new Builder object in addition to the default Builders,
add your new Builder object like this:

.ES
env = Environment()
env.Append(BUILDERS = {'NewBuilder' : foo})
.EE
.IP
or this:

.ES
env = Environment()
env['BUILDERS]['NewBuilder'] = foo
.EE

.IP CC 
The C compiler.

.IP CCCOM 
The command line used to compile a C source file to a (static) object file.
Any options specified in the $CCFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP CCFLAGS 
General options that are passed to the C compiler.

.IP CFILESUFFIX
The suffix for C source files.
This is used by the internal CFile builder
when generating C files from Lex (.l) or YACC (.y) input files.
The default suffix, of course, is
.I .c
(lower case).
On case-insensitive systems (like Win32),
SCons also treats
.I .C
(upper case) files
as C files.

.IP CCVERSION
The version number of the C compiler.
This may or may not be set,
depending on the specific C compiler being used.

.IP _concat
A function used to produce variables like $_CPPINCFLAGS. It takes five
arguments: a prefix to concatenate onto each element, a list of
elements, a suffix to concatenate onto each element, an environment
for variable interpolation, and an optional function that will be
called to transform the list before concatenation.

.ES
env['_CPPINCFLAGS'] = '$( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs)} $)',
.EE

.IP CPPDEFINES
A platform independent specification of C preprocessor definitions.
The definitions will be added to command lines
through the automatically-generated
$_CPPDEFFLAGS construction variable (see below),
which is constructed according to
the type of value of $CPPDEFINES:

.IP
If $CPPDEFINES is a string,
the values of the
$CPPDEFPREFIX and $CPPDEFSUFFIX
construction variables
will be added to the beginning and end.

.ES
# Will add -Dxyz to POSIX compiler command lines,
# and /Dxyz to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES='xyz')
.EE

.IP
If $CPPDEFINES is a list,
the values of the
$CPPDEFPREFIX and $CPPDEFSUFFIX
construction variables
will be appended to the beginning and end
of each element in the list.
If any element is a list or tuple,
then the first item is the name being
defined and the second item is its value:

.ES
# Will add -DB=2 -DA to POSIX compiler command lines,
# and /DB=2 /DA to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES=[('B', 2), 'A'])
.EE

.IP
If $CPPDEFINES is a dictionary,
the values of the
$CPPDEFPREFIX and $CPPDEFSUFFIX
construction variables
will be appended to the beginning and end
of each item from the dictionary.
The key of each dictionary item
is a name being defined
to the dictionary item's corresponding value;
if the value is
.BR None ,
then the name is defined without an explicit value.
Note that the resulting flags are sorted by keyword
to ensure that the order of the options on the
command line is consistent each time
.B scons
 is run.

.ES
# Will add -DA -DB=2 to POSIX compiler command lines,
# and /DA /DB=2 to Microsoft Visual C++ command lines.
env = Environment(CPPDEFINES={'B':2, 'A':None})
.EE

.IP _CPPDEFFLAGS
An automatically-generated construction variable
containing the C preprocessor command-line options
to define values.
The value of $_CPPDEFFLAGS is created
by appending $CPPDEFPREFIX and $CPPDEFSUFFIX
to the beginning and end
of each directory in $CPPDEFINES.

.IP CPPDEFPREFIX
The prefix used to specify preprocessor definitions
on the C compiler command line.
This will be appended to the beginning of each definition
in the $CPPDEFINES construction variable
when the $_CPPDEFFLAGS variable is automatically generated.

.IP CPPDEFSUFFIX
The suffix used to specify preprocessor definitions
on the C compiler command line.
This will be appended to the end of each definition
in the $CPPDEFINES construction variable
when the $_CPPDEFFLAGS variable is automatically generated.

.IP CPPFLAGS
User-specified C preprocessor options.
These will be included in any command that uses the C preprocessor,
including not just compilation of C and C++ source files
via the $CCCOM, $SHCCCOM, $CXXCOM and $SHCXXCOM command lines,
but also the $F77PPCOM and $SHF77PPCOM command lines
used to compile a Fortran source file,
and the $ASPPCOM command line
used to assemble an assembly language source file,
after first running each file through the C preprocessor.
Note that this variable does
.I not
contain
.B -I
(or similar) include search path options
that scons generates automatically from $CPPPATH.
See
.BR _CPPINCFLAGS ,
below,
for the variable that expands to those options.

.IP _CPPINCFLAGS
An automatically-generated construction variable
containing the C preprocessor command-line options
for specifying directories to be searched for include files.
The value of $_CPPINCFLAGS is created
by appending $INCPREFIX and $INCSUFFIX
to the beginning and end
of each directory in $CPPPATH.

.IP CPPPATH
The list of directories that the C preprocessor will search for include
directories. The C/C++ implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in CCFLAGS or CXXFLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in CPPPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(CPPPATH='#/include')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
include = Dir('include')
env = Environment(CPPPATH=include)
.EE

.IP
The directory list will be added to command lines
through the automatically-generated
$_CPPINCFLAGS
construction variable,
which is constructed by
appending the values of the
$INCPREFIX and $INCSUFFIX
construction variables
to the beginning and end
of each directory in $CPPPATH.
Any command lines you define that need
the CPPPATH directory list should
include $_CPPINCFLAGS:

.ES
env = Environment(CCCOM="my_compiler $_CPPINCFLAGS -c -o $TARGET $SOURCE")
.EE

.IP CVS
The CVS executable.

.IP CVSCOFLAGS
Options that are passed to the CVS checkout subcommand.

.IP CVSCOM
The command line used to
fetch source files from a CVS repository.

.IP CVSFLAGS
General options that are passed to CVS.
By default, this is set to
"-d $CVSREPOSITORY"
to specify from where the files must be fetched.

.IP CVSREPOSITORY
The path to the CVS repository.
This is referenced in the default
$CVSFLAGS value.

.IP CXX
The C++ compiler.

.IP CXXFILESUFFIX
The suffix for C++ source files.
This is used by the internal CXXFile builder
when generating C++ files from Lex (.ll) or YACC (.yy) input files.
The default suffix is
.IR .cc .
SCons also treats files with the suffixes
.IR .cpp ,
.IR .cxx ,
.IR .c++ ,
and
.I .C++
as C++ files.
On case-sensitive systems (Linux, UNIX, and other POSIX-alikes),
SCons also treats
.I .C
(upper case) files
as C++ files.

.IP CXXCOM
The command line used to compile a C++ source file to an object file.
Any options specified in the $CXXFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP CXXFLAGS 
General options that are passed to the C++ compiler.

.IP CXXVERSION
The version number of the C++ compiler.
This may or may not be set,
depending on the specific C++ compiler being used.

.IP Dir
A function that converts a file name into a Dir instance relative to the
target being built. 

.IP DVIPDF
The TeX DVI file to PDF file converter.

.IP DVIPDFFLAGS
General options passed to the TeX DVI file to PDF file converter.

.IP DVIPDFCOM
The command line used to convert TeX DVI files into a PDF file.

.IP DVIPS
The TeX DVI file to PostScript converter.

.IP DVIPSFLAGS
General options passed to the TeX DVI file to PostScript converter.

.IP ENV
A dictionary of environment variables
to use when invoking commands. When ENV is used in a command all list
values will be joined using the path separator and any other non-string
values will simply be coerced to a string.
Note that, by default,
.B scons
does
.I not
propagate the environment in force when you
execute
.B scons
to the commands used to build target files.
This is so that builds will be guaranteed
repeatable regardless of the environment
variables set at the time
.B scons
is invoked.

If you want to propagate your
environment variables
to the commands executed
to build target files,
you must do so explicitly:

.ES
import os
env = Environment(ENV = os.environ)
.EE

.RS
Note that you can choose only to propagate
certain environment variables.
A common example is
the system
.B PATH
environment variable,
so that
.B scons
uses the same utilities
as the invoking shell (or other process):
.RE

.ES
import os
env = Environment(ENV = {'PATH' : os.environ['PATH']})
.EE

.IP ESCAPE
A function that will be called to escape shell special characters in
command lines. The function should take one argument: the command line
string to escape; and should return the escaped command line.

.IP F77
The Fortran compiler.

.IP F77COM 
The command line used to compile a Fortran source file to an object file.

.IP F77FLAGS
General user-specified options that are passed to the Fortran compiler.
Note that this variable does
.I not
contain
.B -I
(or similar) include search path options
that scons generates automatically from $F77PATH.
See
.BR _F77INCFLAGS ,
below,
for the variable that expands to those options.

.IP _F77INCFLAGS
An automatically-generated construction variable
containing the Fortran compiler command-line options
for specifying directories to be searched for include files.
The value of $_F77INCFLAGS is created
by appending $INCPREFIX and $INCSUFFIX
to the beginning and end
of each directory in $F77PATH.

.IP F77PATH
The list of directories that the Fortran compiler will search for include
directories. The Fortran implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in F77FLAGS because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in F77PATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(F77PATH='#/include')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
include = Dir('include')
env = Environment(F77PATH=include)
.EE

.IP
The directory list will be added to command lines
through the automatically-generated
$_F77INCFLAGS
construction variable,
which is constructed by
appending the values of the
$INCPREFIX and $INCSUFFIX
construction variables
to the beginning and end
of each directory in $F77PATH.
Any command lines you define that need
the F77PATH directory list should
include $_F77INCFLAGS:

.ES
env = Environment(F77COM="my_compiler $_F77INCFLAGS -c -o $TARGET $SOURCE")
.EE

.IP F77PPCOM 
The command line used to compile a Fortran source file to an object file
after first running the file through the C preprocessor.
Any options specified in the $F77FLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP File
A function that converts a file name into a File instance relative to the
target being built. 

.IP GS
The Ghostscript program used to convert PostScript to PDF files.

.IP GSFLAGS
General options passed to the Ghostscript program
when converting PostScript to PDF files.

.IP GSCOM
The Ghostscript command line used to convert PostScript to PDF files.

.IP INCPREFIX
The prefix used to specify an include directory on the C compiler command
line.
This will be appended to the beginning of each directory
in the $CPPPATH and $F77PATH construction variables
when the $_CPPINCFLAGS and $_F77INCFLAGS
variables are automatically generated.

.IP INCSUFFIX
The suffix used to specify an include directory on the C compiler command
line.
This will be appended to the end of each directory
in the $CPPPATH and $F77PATH construction variables
when the $_CPPINCFLAGS and $_F77INCFLAGS
variables are automatically generated.

.IP INSTALL
A function to be called to install a file into a
destination file name.
The default function copies the file into the destination
(and sets the destination file's mode and permission bits
to match the source file's).
The function takes the following arguments:

.ES
def install(dest, source, env):
.EE
.IP
.I dest
is the path name of the destination file.
.I source
is the path name of the source file.
.I env
is the construction environment
(a dictionary of construction values)
in force for this file installation.

.IP JAR
The Java archive tool.

.IP JARCHDIR
The directory to which the Java archive tool should change
(using the
.B \-C
option).

.IP JARCOM
The command line used to call the Java archive tool.

.IP JARFLAGS
General options passed to the Java archive tool.
By default this is set to
.B cf
to create the necessary
.I jar
file.

.IP JARSUFFIX
The suffix for Java archives:
.B .jar
by default.

.IP JAVAC
The Java compiler.

.IP JAVACCOM
The command line used to compile a directory tree containing
Java source files to
corresponding Java class files.
Any options specified in the $JAVACFLAGS construction variable
are included on this command line.

.IP JAVACFLAGS
General options that are passed to the Java compiler.

.IP JAVACLASSDIR
The directory in which Java class files may be found.
This is stripped from the beginning of any Java .class
file names supplied to the
.B JavaH
builder.

.IP JAVACLASSSUFFIX
The suffix for Java class files;
.B .class
by default.

.IP JAVAH
The Java generator for C header and stub files.

.IP JAVAHCOM
The command line used to generate C header and stub files
from Java classes.
Any options specified in the $JAVAHFLAGS construction variable
are included on this command line.

.IP JAVAHFLAGS
General options passed to the C header and stub file generator
for Java classes.

.IP JAVASUFFIX
The suffix for Java files;
.B .java
by default.

.IP LATEX
The LaTeX structured formatter and typesetter.

.IP LATEXCOM
The command line used to call the LaTeX structured formatter and typesetter.

.IP LATEXFLAGS
General options passed to the LaTeX structured formatter and typesetter.

.IP LEX
The lexical analyzer generator.

.IP LEXFLAGS
General options passed to the lexical analyzer generator.

.IP LEXCOM
The command line used to call the lexical analyzer generator
to generate a source file.

.IP _LIBDIRFLAGS
An automatically-generated construction variable
containing the linker command-line options
for specifying directories to be searched for library.
The value of $_LIBDIRFLAGS is created
by appending $LIBDIRPREFIX and $LIBDIRSUFFIX
to the beginning and end
of each directory in $LIBPATH.

.IP LIBDIRPREFIX
The prefix used to specify a library directory on the linker command line.
This will be appended to the beginning of each directory
in the $LIBPATH construction variable
when the $_LIBDIRFLAGS variable is automatically generated.

.IP LIBDIRSUFFIX
The suffix used to specify a library directory on the linker command line.
This will be appended to the end of each directory
in the $LIBPATH construction variable
when the $_LIBDIRFLAGS variable is automatically generated.

.IP _LIBFLAGS
An automatically-generated construction variable
containing the linker command-line options
for specifying libraries to be linked with the resulting target.
The value of $_LIBFLAGS is created
by appending $LIBLINKPREFIX and $LIBLINKSUFFIX
to the beginning and end
of each directory in $LIBS.

.IP LIBLINKPREFIX
The prefix used to specify a library to link on the linker command line.
This will be appended to the beginning of each library
in the $LIBS construction variable
when the $_LIBFLAGS variable is automatically generated.

.IP LIBLINKSUFFIX
The suffix used to specify a library to link on the linker command line.
This will be appended to the end of each library
in the $LIBS construction variable
when the $_LIBFLAGS variable is automatically generated.

.IP LIBPATH
The list of directories that will be searched for libraries.
The implicit dependency scanner will search these
directories for include files. Don't explicitly put include directory
arguments in $LINKFLAGS or $SHLINKFLAGS
because the result will be non-portable
and the directories will not be searched by the dependency scanner. Note:
directory names in LIBPATH will be looked-up relative to the SConscript
directory when they are used in a command. To force 
.B scons
to look-up a directory relative to the root of the source tree use #:

.ES
env = Environment(LIBPATH='#/libs')
.EE

.IP
The directory look-up can also be forced using the 
.BR Dir ()
function:

.ES
libs = Dir('libs')
env = Environment(LIBPATH=libs)
.EE

.IP
The directory list will be added to command lines
through the automatically-generated
$_LIBDIRFLAGS
construction variable,
which is constructed by
appending the values of the
$LIBDIRPREFIX and $LIBDIRSUFFIX
construction variables
to the beginning and end
of each directory in $LIBPATH.
Any command lines you define that need
the LIBPATH directory list should
include $_LIBDIRFLAGS:

.ES
env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE")
.EE

.IP LIBPREFIX
The prefix used for (static) library file names.

.IP LIBPREFIXES
An array of legal prefixes for library file names.

.IP LIBS
A list of one or more libraries
that will be linked with
any executable programs
created by this environment.

.IP
The library list will be added to command lines
through the automatically-generated
$_LIBFLAGS
construction variable,
which is constructed by
appending the values of the
$LIBLINKPREFIX and $LIBLINKSUFFIX
construction variables
to the beginning and end
of each directory in $LIBS.
Any command lines you define that need
the LIBS library list should
include $_LIBFLAGS:

.ES
env = Environment(LINKCOM="my_linker $_LIBDIRFLAGS $_LIBFLAGS -o $TARGET $SOURCE")
.EE

.IP LIBSUFFIX 
The suffix used for (static) library file names.

.IP LIBSUFFIXES
An array of legal suffixes for library file names.

.IP LINK
The linker.

.IP LINKFLAGS
General user options passed to the linker.
Note that this variable should
.I not
contain
.B -l
(or similar) options for linking with the libraries listed in $LIBS,
nor
.B -L
(or similar) library search path options
that scons generates automatically from $LIBPATH.
See
.BR _LIBFLAGS ,
above,
for the variable that expands to library-link options,
and
.BR _LIBDIRFLAGS ,
above,
for the variable that expands to library search path options.

.IP LINKCOM
The command line used to link object files into an executable.

.IP M4
The M4 macro preprocessor.

.IP M4FLAGS
General options passed to the M4 macro preprocessor.

.IP M4COM
The command line used to pass files through the macro preprocessor.

.IP MAXLINELENGTH
The maximum number of characters allowed on an external command line.
On Win32 systems,
link lines longer than this many characters
are linke via a temporary file name.

.IP MSVS
When the Microsoft Visual Studio tools are initialized, they set up
this dictionary with the following keys:

.B VERSION:
the version of MSVS being used (can be set via
MSVS_VERSION)

.B VERSIONS:
the available versions of MSVS installed

.B VCINSTALLDIR:
installed directory of Visual C++

.B VSINSTALLDIR:
installed directory of Visual Studio

.B FRAMEWORKDIR:
installed directory of the .NET framework

.B FRAMEWORKVERSIONS:
list of installed versions of the .NET framework, sorted latest to oldest.

.B FRAMEWORKVERSION:
latest installed version of the .NET framework

.B FRAMEWORKSDKDIR:
installed location of the .NET SDK.

.B PLATFORMSDKDIR:
installed location of the Platform SDK.

.B PLATFORMSDK_MODULES:
dictionary of installed Platform SDK modules,
where the dictionary keys are keywords for the various modules, and
the values are 2-tuples where the first is the release date, and the
second is the version number.

If a value isn't set, it wasn't available in the registry.

.IP MSVS_IGNORE_IDE_PATHS
Tells the MS Visual Studio tools to use minimal INCLUDE, LIB, and PATH settings,
instead of the settings from the IDE.

For Visual Studio, SCons will (by default) automatically determine
where MSVS is installed, and use the LIB, INCLUDE, and PATH variables
set by the IDE.  You can override this behavior by setting these
variables after Environment initialization, or by setting
.B MSVS_IGNORE_IDE_PATHS = 1
in the Environment initialization.
Specifying this will not leave these unset, but will set them to a
minimal set of paths needed to run the tools successfully.

.ES
For VS6, the mininimal set is:
   INCLUDE:'<VSDir>\\VC98\\ATL\\include;<VSDir>\\VC98\\MFC\\include;<VSDir>\\VC98\\include'
   LIB:'<VSDir>\\VC98\\MFC\\lib;<VSDir>\\VC98\\lib'
   PATH:'<VSDir>\\Common\\MSDev98\\bin;<VSDir>\\VC98\\bin'
For VS7, it is:
   INCLUDE:'<VSDir>\\Vc7\\atlmfc\\include;<VSDir>\\Vc7\\include'
   LIB:'<VSDir>\\Vc7\\atlmfc\\lib;<VSDir>\\Vc7\\lib'
   PATH:'<VSDir>\\Common7\\Tools\\bin;<VSDir>\\Common7\\Tools;<VSDir>\\Vc7\\bin'
.EE

.IP
Where '<VSDir>' is the installed location of Visual Studio.

.IP MSVS_VERSION
Sets the preferred version of MSVS to use.

SCons will (by default) select the latest version of MSVS
installed on your machine.  So, if you have version 6 and version 7
(MSVS .NET) installed, it will prefer version 7.  You can override this by
specifying the 
.B MSVS_VERSION
variable in the Environment initialization, setting it to the
appropriate version ('6.0' or '7.0', for example).
If the given version isn't installed, tool initialization will fail.

.IP MSVSPROJECTCOM
The action used to generate Microsoft Visual Studio
project and solution files.

.IP MSVSPROJECTSUFFIX
The suffix used for Microsoft Visual Studio project (DSP) files.
The default value is
.B .vcproj
when using Visual Studio version 7.x (.NET),
and
.B .dsp
when using earlier versions of Visual Studio.

.IP MSVSSOLUTIONSUFFIX
The suffix used for Microsoft Visual Studio solution (DSW) files.
The default value is
.B .sln
when using Visual Studio version 7.x (.NET),
and
.B .dsw
when using earlier versions of Visual Studio.

.IP no_import_lib
When set to non-zero,
suppresses creation of a corresponding Win32 static import lib by the
.B SharedLibrary
builder when used with
MinGW or Microsoft Visual Studio.
This also suppresses creation
of an export (.exp) file
when using Microsoft Visual Studio.

.IP OBJPREFIX 
The prefix used for (static) object file names.

.IP OBJSUFFIX 
The suffix used for (static) object file names.

.IP P4
The Perforce executable.

.IP P4COM
The command line used to
fetch source files from Perforce.

.IP P4FLAGS
General options that are passed to Perforce.

.IP PCH
The Microsoft Visual C++ precompiled header that will be used when compiling
object files. This variable is ignored by tools other than Microsoft Visual C++.
When this variable is
defined SCons will add options to the compiler command line to
cause it to use the precompiled header, and will also set up the
dependencies for the PCH file. Example: 

.ES
env['PCH'] = 'StdAfx.pch'
.EE

.IP PCHSTOP
This variable specifies how much of a source file is precompiled. This
variable is ignored by tools other than Microsoft Visual C++, or when
the PCH variable is not being used. When this variable is define it
must be a string that is the name of the header that
is included at the end of the precompiled portion of the source files, or
the empty string if the "#pragma hrdstop" construct is being used:

.ES
env['PCHSTOP'] = 'StdAfx.h'
.EE

.IP PDB
The Microsoft Visual C++ PDB file that will store debugging information for
object files, shared libraries, and programs. This variable is ignored by
tools other than Microsoft Visual C++.
When this variable is
defined SCons will add options to the compiler and linker command line to
cause them to generate external debugging information, and will also set up the
dependencies for the PDB file. Example:

.ES
env['PDB'] = 'hello.pdb'
.EE

.IP PDFCOM
A deprecated synonym for $DVIPDFCOM.

.IP PDFPREFIX
The prefix used for PDF file names.

.IP PDFSUFFIX
The suffix used for PDF file names.

.IP PLATFORM
The name of the platform used to create the Environment.  If no platform is
specified when the Environment is created,
.B SCons
autodetects the platform.

.ES
env = Environment(tools = [])
if env['PLATFORM'] == 'cygwin':
    Tool('mingw')(env)
else:
    Tool('msvc')(env)
.EE

.IP PROGPREFIX
The prefix used for executable file names.

.IP PROGSUFFIX
The suffix used for executable file names.

.IP PSCOM
The command line used to convert TeX DVI files into a PostScript file.

.IP PSPREFIX
The prefix used for PostScript file names.

.IP PSSUFFIX
The prefix used for PostScript file names.

.IP QTDIR
The qt tool tries to take this from os.environ.
It also initializes all QT_*
construction variables listed below.
(Note that all paths are constructed
with python's os.path.join() method,
but are listed here with the '/' separator
for easier reading.)
In addition, the construction environment
variables CPPPATH, LIBPATH, LIBS, PROGEMITTER, SHLIBEMITTER and LIBEMITTER
are modified. Because the build-performance is affected when using this tool,
you have to explicitly specify it at Environment creation:

.ES
Environment(tools=['default','qt']).
.EE
.IP
You may want to use
.B Configure
to verify that the qt support really works.
The qt tool supports the following operations:

.B Automatic moc file generation from header files.
You do not have to specify moc files explicitly, the tool does it for you.
However, there are a few preconditions to do so: Your header file must have
the same filebase as your implementation file and must stay in the same
directory. It must have one of the suffixes .h, .hpp, .H, .hxx, .hh.

.B Automatic moc file generation from cxx files.
As stated in the qt documentation,
include the moc file at the end of the cxx file.
Note that you have to include the file, which is generated by the
QT_MOCNAMEGENERATOR function. If you are using BuildDir, you may need to
specify duplicate=1.

.B Automatic handling of .ui files.
The implementation files generated from .ui files are handled much the same
as yacc or lex files. Because there are also generated headers, you may
need to specify duplicate=1 in calls to BuildDir.

.IP QT_LIB
Default value is 'qt'. You may want to set this to 'qt-mt'

.IP QT_MOC
Default value is '$QTDIR/bin/moc'.

.IP QT_UIC
Default value is '$QTDIR/bin/uic'.

.IP QT_UICIMPLFLAGS
Default value is ''. These flags are passed to uic, when creating a cxx
file from a .ui file.

.IP QT_UICDECLFLAGS
Default value is ''. These flags are passed to uic, when creating a a h
file from a .ui file.

.IP QT_MOCFROMHFLAGS
Default value is ''. These flags are passed to moc, when moccing a header
file.

.IP QT_MOCFROMCPPFLAGS
Default value is '-i'. These flags are passed to moc, when moccing a
cpp file.

.IP QT_HSUFFIX
Default value is '.h'. Suffix of headers generated with uic.

.IP QT_UISUFFIX
Default value is '.ui'. Suffix of designer files.

.IP QT_UIHSUFFIX
Default value is '.ui.h'.

.IP QT_MOCNAMEGENERATOR
Three-argument function, which generates names of moc output files.
This is the most flexible way to support the huge number of conventions
for this type of files. The arguments are the
.I filebase
, which is the file to be moc'd without path and extension, the
.I src_suffix
, which is the extension of the file to be moc'd and the environment
.I env
The default value maps 'myfile.myext' to 'moc_myfile.$CXXFILESUFFIX':

.ES
lambda filebase, src_suffix, env: 'moc_' + filebase + env['CXXFILESUFFIX']
.EE

.IP QT_UICIMPLCOM
Command to generate cxx files from .ui files.

.IP QT_UICDECLCOM
Command to generate header files from .ui files.

.IP QT_MOCFROMHCOM
Command to generate a moc file from a header.

.IP QT_MOCFROMCXXCOM
Command to generate a moc file from a cpp file.

.IP RANLIB
The archive indexer.

.IP RANLIBFLAGS
General options passed to the archive indexer.

.IP RC
The resource compiler used by the RES builder.

.IP RCCOM
The command line used by the RES builder.

.IP RCFLAGS
The flags passed to the resource compiler by the RES builder.

.IP RCS
The RCS executable.
Note that this variable is not actually used
for the command to fetch source files from RCS;
see the
.B RCS_CO
construction variable, below.

.IP RCS_CO 
The RCS "checkout" executable,
used to fetch source files from RCS.

.IP RCS_COCOM
The command line used to
fetch (checkout) source files from RCS.

.IP RCS_COFLAGS
Options that are passed to the $RCS_CO command.

.IP RDirs
A function that converts a file name into a list of Dir instances by
searching the repositories. 

.IP RMIC
The Java RMI stub compiler.

.IP RMICCOM
The command line used to compile stub
and skeleton class files
from Java classes that contain RMI implementations.
Any options specified in the $RMICFLAGS construction variable
are included on this command line.

.IP RMICFLAGS
General options passed to the Java RMI stub compiler.

.IP SCANNERS
A list of the available implicit dependency scanners. [CScan] by default.

.IP SCCS
The SCCS executable.

.IP SCCSCOM
The command line used to
fetch source files from SCCS.

.IP SCCSFLAGS
General options that are passed to SCCS.

.IP SCCSGETFLAGS
Options that are passed specifically to the SCCS "get" subcommand.
This can be set, for example, to
.I -e
to check out editable files from SCCS.

.IP SHCC
The C compiler used for generating shared-library objects.

.IP SHCCCOM
The command line used to compile a C source file
to a shared-library object file.
Any options specified in the $SHCCFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP SHCCFLAGS
Options that are passed to the C compiler
to generate shared-library objects.

.IP SHCXX
The C++ compiler used for generating shared-library objects.

.IP SHCXXCOM
The command line used to compile a C++ source file
to a shared-library object file.
Any options specified in the $SHCXXFLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP SHCXXFLAGS
Options that are passed to the C++ compiler
to generate shared-library objects.

.IP SHELL
A string naming the shell program that will be passed to the 
.I SPAWN 
function. 
See the 
.I SPAWN 
construction variable for more information.

.IP SHF77
The Fortran compiler used for generating shared-library objects.

.IP SHF77COM
The command line used to compile a Fortran source file
to a shared-library object file.

.IP SHF77FLAGS
Options that are passed to the Fortran compiler
to generated shared-library objects.

.IP SHF77PPCOM
The command line used to compile a Fortran source file to a
shared-library object file
after first running the file through the C preprocessor.
Any options specified in the $SHF77FLAGS and $CPPFLAGS construction variables
are included on this command line.

.IP SHLIBPREFIX
The prefix used for shared library file names.

.IP SHLIBSUFFIX
The suffix used for shared library file names.

.IP SHLINK
The linker for programs that use shared libraries.

.IP SHLINKFLAGS
General user options passed to the linker for programs using shared libraries.
Note that this variable should
.I not
contain
.B -l
(or similar) options for linking with the libraries listed in $LIBS,
nor
.B -L
(or similar) include search path options
that scons generates automatically from $LIBPATH.
See
.BR _LIBFLAGS ,
above,
for the variable that expands to library-link options,
and
.BR _LIBDIRFLAGS ,
above,
for the variable that expands to library search path options.

.IP SHOBJPREFIX 
The prefix used for shared object file names.

.IP SHOBJSUFFIX 
The suffix used for shared object file names.

.IP SOURCE
A reserved variable name
that may not be set or used in a construction environment.
(See "Variable Substitution," below.)

.IP SOURCES
A reserved variable name
that may not be set or used in a construction environment.
(See "Variable Substitution," below.)

.IP SPAWN
A command interpreter function that will be called to execute command line
strings. The function must expect 4 arguments:

.ES
def spawn(shell, escape, cmd, args, env):
.EE
.IP
.I sh
is a string naming the shell program to use.
.I escape
is a function that can be called to escape shell special characters in
the command line. 
.I cmd
is the path to the command to be executed.
.I args
is that arguments to the command.
.I env
is a dictionary of the environment variables
in which the command should be executed.
'\"
'\".IP SVN
'\"The Subversion executable (usually named
'\".BR svn ).
'\"
'\".IP SVNCOM
'\"The command line used to
'\"fetch source files from a Subversion repository.
'\"
'\".IP SVNFLAGS
'\"General options that are passed to Subversion.

.IP SWIG
The scripting language wrapper and interface generator.

.IP SWIGCFILESUFFIX
The suffix that will be used for intermediate C
source files generated by
the scripting language wrapper and interface generator.
The default value is
.BR _wrap$CFILESUFFIX .
By default, this value is used whenever the
.B -c++
option is
.I not
specified as part of the
.B SWIGFLAGS
construction variable.

.IP SWIGCOM
The command line used to call
the scripting language wrapper and interface generator.

.IP SWIGCXXFILESUFFIX
The suffix that will be used for intermediate C++
source files generated by
the scripting language wrapper and interface generator.
The default value is
.BR _wrap$CFILESUFFIX .
By default, this value is used whenever the
.B -c++
option is specified as part of the
.B SWIGFLAGS
construction variable.

.IP SWIGFLAGS
General options passed to
the scripting language wrapper and interface generator.
This is where you should set
.BR -python ,
.BR -perl5 ,
.BR -tcl ,
or whatever other options you want to specify to SWIG.
If you set the
.B -c++
option in this variable,
.B scons
will, by default,
generate a C++ intermediate source file
with the extension that is specified as the
.B $CXXFILESUFFIX
variable.

.IP TAR
The tar archiver.

.IP TARCOM
The command line used to call the tar archiver.

.IP TARFLAGS
General options passed to the tar archiver.

.IP TARGET
A reserved variable name
that may not be set or used in a construction environment.
(See "Variable Substitution," below.)

.IP TARGETS
A reserved variable name
that may not be set or used in a construction environment.
(See "Variable Substitution," below.)

.IP TARSUFFIX 
The suffix used for tar file names.

.IP TEX
The TeX formatter and typesetter.

.IP TEXCOM
The command line used to call the TeX formatter and typesetter.

.IP TEXFLAGS
General options passed to the TeX formatter and typesetter.

.IP TOOLS
A list of the names of the Tool specifications
that are part of this construction environment.

.IP WIN32_INSERT_DEF
When this is set to true,
a library build of a WIN32 shared library (.dll file)
will also build a corresponding .def file at the same time,
if a .def file is not already listed as a build target.
The default is 0 (do not build a .def file).

.IP WIN32DEFPREFIX
The prefix used for WIN32 .def file names.

.IP WIN32DEFSUFFIX
The suffix used for WIN32 .def file names.

.IP YACC
The parser generator.

.IP YACCCOM
The command line used to call the parser generator
to generate a source file.

.IP YACCFLAGS
General options passed to the parser generator.
If $YACCFLAGS contains a \-d option,
SCons assumes that the call will also create a .h file
(if the yacc source file ends in a .y suffix)
or a .hpp file
(if the yacc source file ends in a .yy suffix)

.IP ZIP
The zip compression and file packaging utility.

.IP ZIPCOM
The command line used to call the zip utility.

.IP ZIPFLAGS
General options passed to the zip utility.

.LP
Construction variables can be retrieved and set using the 
.B Dictionary 
method of the construction environment:

.ES
dict = env.Dictionary()
dict["CC"] = "cc"
.EE

or using the [] operator:

.ES
env["CC"] = "cc"
.EE

Construction variables can also be passed to the construction environment
constructor:

.ES
env = Environment(CC="cc")
.EE

or when copying a construction environment using the 
.B Copy 
method:

.ES
env2 = env.Copy(CC="cl.exe")
.EE

.SS Configure Contexts

.B scons
supports
.I configure contexts,
an integrated mechanism similar to the
various AC_CHECK macros in GNU autoconf
for testing for the existence of C header
files, libraries, etc.
In contrast to autoconf,
.B scons
does not maintain an explicit cache of the tested values,
but uses its normal dependency tracking to keep the checked values
up to date. 
The following methods can be used to perform checks:

.TP
.RI Configure( env ", [" custom_tests ", " conf_dir ", " log_file ])
.TP
.RI env.Configure([ custom_tests ", " conf_dir ", " log_file ])
This creates a configure context, which can be used to perform checks.
.I env
specifies the environment for building the tests.
This environment may be modified when performing checks.
.I custom_tests
is a dictionary containing custom tests.
See also the section about custom tests below. 
By default, no custom tests are added to the configure context.
.I conf_dir
specifies a directory where the test cases are built.
Note that this directory is not used for building
normal targets.
The default value is the directory
#/.sconf_temp.
.I log_file
specifies a file which collects the output from commands
that are executed to check for the existence of header files, libraries, etc.
The default is the file #/config.log.
If you are using the
.B BuildDir
method,
you may want to specify a subdirectory under your build directory.

.EE
A created
.B Configure
instance has the following associated methods:

.TP 
.RI Configure.Finish( self )
This method should be called after configuration is done.
It returns the environment as modified
by the configuration checks performed.
After this method is called, no further checks can be performed
with this configuration context.
However, you can create a new 
.RI Configure 
context to perform additional checks.
Only one context should be active at a time.

The following Checks are predefined.
(This list will likely grow larger as time
goes by and developers contribute new useful tests.)

.TP
.RI Configure.CheckHeader( self ", " header ", [" include_quotes ", " language ])
Checks if 
.I header
is usable in the specified language.
.I header
may be a list,
in which case the last item in the list
is the header file to be checked,
and the previous list items are
header files whose
.B #include
lines should precede the
header line being checked for.
The optional argument 
.I include_quotes 
must be
a two character string, where the first character denotes the opening
quote and the second character denotes the closing quote.
By default, both characters  are " (double quote).
The optional argument
.I language
should be either
.B C
or
.B C++
and selects the compiler to be used for the check.
Returns 1 on success and 0 on failure.

.TP
.RI Configure.CheckCHeader( self ", " header ", [" include_quotes ])
This is a wrapper around
.B Configure.CheckHeader
which checks if 
.I header
is usable in the C language.
.I header
may be a list,
in which case the last item in the list
is the header file to be checked,
and the previous list items are
header files whose
.B #include
lines should precede the
header line being checked for.
The optional argument 
.I include_quotes 
must be
a two character string, where the first character denotes the opening
quote and the second character denotes the closing quote (both default
to \N'34').
Returns 1 on success and 0 on failure.

.TP
.RI Configure.CheckCXXHeader( self ", " header ", [" include_quotes ])
This is a wrapper around
.B Configure.CheckHeader
which checks if 
.I header
is usable in the C++ language.
.I header
may be a list,
in which case the last item in the list
is the header file to be checked,
and the previous list items are
header files whose
.B #include
lines should precede the
header line being checked for.
The optional argument 
.I include_quotes 
must be
a two character string, where the first character denotes the opening
quote and the second character denotes the closing quote (both default
to \N'34').
Returns 1 on success and 0 on failure. 

.TP
.RI Configure.CheckFunc( self ", " function_name ", [" language ])
Checks if the specified
C or C+++ function is available.
.I function_name
is the name of the function to check for.
The optional
.I language
argument should be
.B C
or
.B C++
and selects the compiler to be used for the check;
the default is "C".

.TP 
.RI Configure.CheckLib( self ", [" library ", " symbol ", " header ", " language ", " autoadd ])
Checks if 
.I library 
provides 
.IR symbol .
If the value of
.I autoadd
is 1 and the library provides the specified
.IR symbol ,
appends the library to the LIBS construction environment variable.
.I library 
may also be None (the default),
in which case 
.I symbol 
is checked with the current LIBS variable.
The default
.I symbol
is "main",
which just check if
you can link against the specified
.IR library .
The optional
.I language
argument should be
.B C
or
.B C++
and selects the compiler to be used for the check;
the default is "C".
The default value for
.I autoadd
is 1.
It is assumed, that the C-language is used.
This method returns 1 on success and 0 on error.

.TP 
.RI Configure.CheckLibWithHeader( self ", " library ", " header ", " language ", [" call ", " autoadd ])

In contrast to the 
.RI Configure.CheckLib 
call, this call provides a more sophisticated way to check against libraries.
Again, 
.I library
specifies the library to check. 
.I header
specifies a header to check for.
.I header
may be a list,
in which case the last item in the list
is the header file to be checked,
and the previous list items are
header files whose
.B #include
lines should precede the
header line being checked for.
.I language
may be one of 'C','c','CXX','cxx','C++' and 'c++'.
.I call
can be any valid expression (with a trailing ';'). The default is 'main();'.
.I autoadd
specifies whether to add the library to the environment (only if the check 
succeeds). This method returns 1 on success and 0 on error.

.TP
.RI Configure.CheckType( self ", " type_name ", [" includes ", " language ])
Checks for the existence of a type defined by
.BR typedef .
.I type_name
specifies the typedef name to check for.
.I includes
is a string containing one or more
.B #include
lines that will be inserted into the program
that will be run to test for the existence of the type.
The optional
.I language
argument should be
.B C
or
.B C++
and selects the compiler to be used for the check;
the default is "C".

.EE
Example of a typical Configure usage:

.ES
env = Environment()
conf = Configure( env )
if not conf.CheckCHeader( 'math.h' ):
    print 'We really need math.h!'
    Exit(1)
if conf.CheckLibWithHeader( 'qt', 'qapp.h', 'c++', 'QApplication qapp(0,0);' ):
    # do stuff for qt - usage, e.g.
    conf.env.Append( CPPFLAGS = '-DWITH_QT' )
env = conf.Finish() 
.EE

.EE
You can define your own custom checks. 
in addition to the predefined checks.
These are passed in a dictionary to the Configure function.
This dictionary maps the names of the checks
to user defined Python callables 
(either Python functions or class instances implementing the
.I __call__
method).
The first argument of the call is always a 
.I CheckContext
instance followed by the arguments,
which must be supplied by the user of the check.
These CheckContext instances define the following methods:

.TP 
.RI CheckContext.Message( self ", " text )

Usually called before the check is started. 
.I text
will be displayed to the user, e.g. 'Checking for library X...'

.TP
.RI CheckContext.Result( self, ", " res )

Usually called after the check is done. 
.I res
can be either an integer or a string. In the former case, 'ok' (res != 0) 
or 'failed' (res == 0) is displayed to the user, in the latter case the 
given string is displayed.

.TP
.RI CheckContext.TryCompile( self ", " text ", " extension )
Checks if a file with the specified 
.I extension
(e.g. '.c') containing 
.I text 
can be compiled using the environment's
.B Object 
builder. Returns 1 on success and 0 on failure.

.TP 
.RI CheckContext.TryLink( self ", " text ", " extension )
Checks, if a file with the specified
.I extension
(e.g. '.c') containing 
.I text 
can be compiled using the environment's
.B Program
builder. Returns 1 on success and 0 on failure.

.TP
.RI CheckContext.TryRun( self ", " text ", " extension )
Checks, if a file with the specified
.I extension
(e.g. '.c') containing 
.I text 
can be compiled using the environment's
.B Program
builder. On success, the program is run. If the program
executes successfully
(that is, its return status is 0),
a tuple
.I (1, outputStr)
is returned, where
.I outputStr
is the standard output of the
program.
If the program fails execution
(its return status is non-zero),
then (0, '') is returned.

.TP
.RI CheckContext.TryAction( self ", " action ", [" text ", " extension ])
Checks if the specified
.I action 
with an optional source file (contents
.I text
, extension 
.I extension
= ''
) can be executed. 
.I action 
may be anything which can be converted to a 
.B scons
.RI Action.
On success,
.I (1, outputStr)
is returned, where
.I outputStr
is the content of the target file.
On failure
.I (0, '')
is returned.

.TP
.RI CheckContext.TryBuild( self ", " builder ", [" text ", " extension ])
Low level implementation for testing specific builds;
the methods above are based on this method.
Given the Builder instance
.I builder
and the optional 
.I text
of a source file with optional
.IR extension ,
this method returns 1 on success and 0 on failure. In addition, 
.I self.lastTarget 
is set to the build target node, if the build was successful.

.EE
Example for implementing and using custom tests:

.ES
def CheckQt(context, qtdir):
    context.Message( 'Checking for qt ...' )
    lastLIBS = context.env['LIBS']
    lastLIBPATH = context.env['LIBPATH']
    lastCPPPATH= context.env['CPPPATH']
    context.env.Append(LIBS = 'qt', LIBPATH = qtdir + '/lib', CPPPATH = qtdir + '/include' )
    ret = context.TryLink("""
#include <qapp.h>
int main(int argc, char **argv) { 
  QApplication qapp(argc, argv);
  return 0;
}
""")
    if not ret:
        context.env.Replace(LIBS = lastLIBS, LIBPATH=lastLIBPATH, CPPPATH=lastCPPPATH)
    context.Result( ret )
    return ret

env = Environment()
conf = Configure( env, custom_tests = { 'CheckQt' : CheckQt } )
if not conf.CheckQt('/usr/lib/qt'):
    print 'We really need qt!'
    Exit(1)
env = conf.Finish() 
.EE

.SS Construction Variable Options

Often when building software, various options need to be specified at build
time that are not known when the SConstruct/SConscript files are
written. For example, libraries needed for the build may be in non-standard
locations, or site-specific compiler options may need to be passed to the
compiler. 
.B scons
provides a mechanism for overridding construction variables from the
command line or a text-based SConscript file through an Options
object. To create an Options object, call the Options() function:

.TP
.RI Options([ files "], [" args ])
This creates an Options object that will read construction variables from
the file or list of filenames specified in
.IR files .
If no files are specified,
or the
.I files
argument is
.BR None ,
then no files will be read.
The optional argument
.I args
is a dictionary of
values that will override anything read from the specified files;
it is primarily intended to be passed the
.B ARGUMENTS
dictionary that holds variables
specified on the command line.
Example:

.ES
opts = Options('custom.py')
opts = Options('overrides.py', ARGUMENTS)
opts = Options(None, {FOO:'expansion', BAR:7})
.EE

Options objects have the following methods:

.TP
.RI Add( key ", [" help ", " default ", " validator ", " converter ])
This adds a customizable construction variable to the Options object. 
.I key
is the name of the variable. 
.I help 
is the help text for the variable.
.I default 
is the default value of the variable.
.I validator
is called to validate the value of the variable, and should take three
arguments: key, value, and environment
.I converter
is called to convert the value before putting it in the environment, and
should take a single argument: value. Example:

.ES
opts.Add('CC', 'The C compiler')
.EE

.TP
.RI AddOptions( list )
A wrapper script that adds
multiple customizable construction variables
to an Options object.
.I list
is a list of tuple or list objects
that contain the arguments
for an individual call to the
.B Add
method.

.ES
opt.AddOptions(
       ('debug', '', 0),
       ('CC', 'The C compiler'),
       ('VALIDATE', 'An option for testing validation',
        'notset', validator, None),
    )
.EE

.TP
.RI Update( env ", [" args ])
This updates a construction environment
.I env
with the customized construction variables. Normally this method is not
called directly, but is called indirectly by passing the Options object to
the Environment() function:

.ES
env = Environment(options=opts)
.EE

.TP
.RI Save( filename ", " env )
This saves the currently set options into a script file named  
.I filename
that can be used on the next invocation to automatically load the current
settings.  This method combined with the Options method can be used to
support caching of options between runs.

.ES
env = Environment()
opts = Options(['options.cache', 'custom.py'])
opts.Add(...)
opts.Update(env)
opts.Save('options.cache', env)
.EE

.TP
.RI GenerateHelpText( env ", [" sort ])
This generates help text documenting the customizable construction
variables suitable to passing in to the Help() function. 
.I env
is the construction environment that will be used to get the actual values
of customizable variables. Calling with 
an optional
.I sort
function
will cause the output to be sorted
by the specified argument.
The specific
.I sort
function
should take two arguments
and return
-1, 0 or 1
(like the standard Python
.I cmp
function).

.ES
Help(opts.GenerateHelpText(env))
Help(opts.GenerateHelpText(env, sort=cmp))
.EE

The text based SConscript file is executed as a Python script, and the
global variables are queried for customizable construction
variables. Example:

.ES
CC = 'my_cc'
.EE

To make it more convenient to work with customizable Options,
.B scons
provides a number of functions
that make it easy to set up
various types of Options:

.TP
.RI BoolOption( key ", " help ", " default )
Return a tuple of arguments
to set up a Boolean option.
The option will use
the specified name
.IR key ,
have a default value of
.IR default ,
and display the specified
.I help
text.
The option will interpret the values
.BR y ,
.BR yes ,
.BR t ,
.BR true ,
.BR 1 ,
.B on
and
.B all
as true,
and the values
.BR n ,
.BR no ,
.BR f ,
.BR false ,
.BR 0 ,
.B off
and
.B none
as false.

.TP
.RI EnumOption( key ", " help ", " default ", " allowed_values ", [" map ", " ignorecase ])
Return a tuple of arguments
to set up an option
whose value may be one
of a specified list of legal enumerated values.
The option will use
the specified name
.IR key ,
have a default value of
.IR default ,
and display the specified
.I help
text.
The option will only support those
values in the
.I allowed_values
list.
The optional
.I map
argument is a dictionary
that can be used to convert
input values into specific legal values
in the
.I allowed_values
list.
If the value of
.I ignore_case
is
.B 0
(the default),
then the values are case-sensitive.
If the value of
.I ignore_case
is
.BR 1 ,
then values will be matched
case-insensitive.
If the value of
.I ignore_case
is
.BR 1 ,
then values will be matched
case-insensitive,
and all input values will be
converted to lower case.

.TP
.RI ListOption( key ", " help ", " default ", " names )
Return a tuple of arguments
to set up an option
whose value may be one or more
of a specified list of legal enumerated values.
The option will use
the specified name
.IR key ,
have a default value of
.IR default ,
and display the specified
.I help
text.
The option will only support the values
.BR all ,
.BR none ,
or the values in the
.I names
list.
More than one value may be specified,
with all values separated by commas.

.TP
.RI PackageOption( key ", " help ", " default )
Return a tuple of arguments
to set up an option
whose value is a path name
of a package that may be
enabled, disabled or 
given an explicit path name.
The option will use
the specified name
.IR key ,
have a default value of
.IR default ,
and display the specified
.I help
text.
The option will support the values
.BR yes ,
.BR true ,
.BR on ,
.BR enable
or
.BR search ,
in which case the specified
.I default
will be used,
or the option may be set to an
arbitrary string
(typically the path name to a package
that is being enabled).
The option will also support the values
.BR no ,
.BR flase ,
.BR off
or
.BR disable
to disable use of the specified option.

.TP
.RI PathOption( key ", " help ", " default )
Return a tuple of arguments
to set up an option
whose value is expected to be a path name.
The option will use
the specified name
.IR key ,
have a default value of
.IR default ,
and display the specified
.I help
text.

.RE
These functions make it
convenient to create a number
of options with consistent behavior
in a single call to the
.B AddOptions
method:

.ES
opts.AddOptions(
    BoolOption('warnings', 'compilation with -Wall and similiar', 1),
    EnumOption('debug', 'debug output and symbols', 'no'
               allowed_values=('yes', 'no', 'full'),
               map={}, ignorecase=0),  # case sensitive
    ListOption('shared',
               'libraries to build as shared libraries',
               'all',
               names = list_of_libs),
    PackageOption('x11',
                  'use X11 installed here (yes = search some places)',
                  'yes'),
    PathOption('qtdir', 'where the root of Qt is installed', qtdir),
)
.EE

.SH EXTENDING SCONS
.SS Builder Objects
.B scons
can be extended by adding new builders to a construction
environment using the 
.B Builder 
function.
The
.B Builder
function accepts the following arguments:

.IP action
The command line string used to build the target from the source. 
.B action
can also be:
a list of strings representing the command
to be executed and its arguments
(suitable for enclosing white space in an argument),
a dictionary
mapping source file name suffixes to
any combination of command line strings
(if the builder should accept multiple source file extensions),
a Python function;
an Action object
(see the next section);
or a list of any of the above.

An action function
takes three arguments:
.I source 
- a list of source nodes, 
.I target
- a list of target nodes,
.I env
- the construction environment.

.IP multi
Specifies whether this builder is allowed to be called multiple times for
the same target file(s). The default is 0, which means the builder
can not be called multiple times for the same target file(s). Calling a
builder multiple times for the same target simply adds additional source
files to the target; it is not allowed to change the environment associated
with the target, specify addition environment overrides, or associate a different
builder with the target. 

.IP prefix 
The prefix that will be prepended to the target file name.
This may be a simple string,  or a callable object that takes
two arguments, a construction environment and a list of sources,
and returns a prefix.

.ES
b = Builder("build_it < $SOURCE > $TARGET"
            prefix = "file-")

def gen_prefix(env, sources):
    return "file-" + env['PLATFORM'] + '-'
b = Builder("build_it < $SOURCE > $TARGET"
            prefix = gen_prefix)
.EE

.IP suffix
The suffix that will be appended to the target file name.
This may be a simple string, or a callable object that takes
two arguments, a construction environment and a list of sources,
and returns a suffix.
If the suffix is a string, then
.B scons
will append a '.' to the beginning of the
suffix if it's not already there.
The string returned by callable object
is untouched and must append its own '.'
to the beginning if one is desired.

.ES
b = Builder("build_it < $SOURCE > $TARGET"
            suffix = "file-"

def gen_suffix(env, sources):
    return "." + env['PLATFORM'] + "-file"
b = Builder("build_it < $SOURCE > $TARGET"
            suffix = gen_suffix)
.EE

.IP src_suffix
The expected source file name suffix.

.IP src_builder
Specifies a builder to use when a source file name suffix does not match
any of the suffixes of the builder. Using this argument produces a
multi-stage builder.

.IP emitter
A function to manipulate the target and source
lists before dependencies are established
and the target(s) are actually built.
.B emitter
can also be string containing a construction variable to expand
to an emitter function,
or a dictionary mapping source file suffixes
to emitter functions.
(Only the suffix of the first source file
is used to select the actual emitter function
from an emitter dictionary.)

An emitter function
takes three arguments:
.I source 
- a list of source nodes, 
.I target
- a list of target nodes,
.I env
- the construction environment.
An emitter must return a tuple containing two lists,
the list of targets to be built by this builder,
and the list of sources for this builder.

Example:

.ES
def e(target, source, env):
    return (target + ['foo.foo'], source + ['foo.src'])

# Simple association of an emitter function with a Builder.
b = Builder("my_build < $TARGET > $SOURCE",
            emitter = e)

# Calling an emitter through a construction variable.
env = Environment(MY_EMITTER = e)
b = Builder("my_build < $TARGET > $SOURCE",
            emitter = '$MY_EMITTER')

# Associating multiple emitters with different file
# suffixes using a dictionary.
def e_suf1(target, source, env):
    return (target + ['another_target_file'], source)
def e_suf2(target, source, env):
    return (target, source + ['another_source_file'])
b = Builder("my_build < $TARGET > $SOURCE",
            emitter = {'.suf1' : e_suf1,
                       '.suf2' : e_suf2})
.EE

.IP generator
A function that returns a list of actions that will be executed to build
the target(s) from the source(s).
The returned action(s) may be
an Action object, or anything that
can be converted into an Action object
(see the next section).

The generator function
takes four arguments:
.I source 
- a list of source nodes, 
.I target
- a list of target nodes,
.I env
- the construction environment,
.I for_signature
- a Boolean value that specifies
whether the generator is being called
for generating a build signature
(as opposed to actually executing the command).
Example:

.ES
def g(source, target, env, for_signature):
    return [["gcc", "-c", "-o"] + target + source] 

b = Builder(generator=g)
.EE

The 
.I generator
and
.I action
arguments must not both be used for the same Builder.

.IP env
A construction environment that can be used
to fetch source code using this Builder.
(Note that this environment is
.I not
used for normal builds of normal target files,
which use the environment that was
used to call the Builder for the target file.)

.IP overrides
A dictionary of construction variables
that will be set in the executing
construction environment when this
Builder is invoked.
The canonical example here would be
to set a construction variable to 
the repository of a source code system.

Any additional keyword arguments supplied
when a Builder object is called
will be associated with the target
(and any other files built as a
result of the call).

.ES
b = Builder(action="build < $SOURCE > $TARGET")
env = Environment(BUILDERS = {'MyBuild' : b})
env.MyBuild('foo.out', 'foo.in', my_arg = 'xyzzy')
.EE

These extra keyword arguments are passed to the
following functions:
command generator functions,
function Actions,
and emitter functions.

.SS Action Objects

The Builder function will turn its
.B action
keyword argument into an appropriate
internal Action object.
Occasionally, it may be more efficient
to create an explicit Action object
and use it to initialize multiple
Builder objects,
rather than let each separate Builder object
create a separate Action.

The Action method takes one or two arguments
and returns an appropriate object for the action
represented by the type of the first argument:

.IP Action
If the first argument is already an Action object,
the object is simply returned.

.IP String
If the first argument is a string,
a command-line Action is returned.

.ES
Action('$CC -c -o $TARGET $SOURCES')
.EE

.\" XXX From Gary Ruben, 23 April 2002:
.\" What would be useful is a discussion of how you execute command
.\" shell commands ie. what is the process used to spawn the shell, pass
.\" environment variables to it etc., whether there is one shell per
.\" environment or one per command etc.  It might help to look at the Gnu
.\" make documentation to see what they think is important to discuss about
.\" a build system. I'm sure you can do a better job of organising the
.\" documentation than they have :-)


.IP List
If the first argument is a list,
then a list of Action objects is returned.
An Action object is created as necessary
for each element in the list.
If an element
.I within
the list is itself a list,
the internal list is the
command and arguments to be executed via
the command line.
This allows white space to be enclosed
in an argument by defining
a command in a list within a list:

.ES
Action([['cc', '-c', '-DWHITE SPACE', '-o', '$TARGET', '$SOURCES']])
.EE

.IP Function
If the first argument is a Python function,
a function Action is returned.
The Python function takes three keyword arguments,
.B target
(a Node object representing the target file),
.B source
(a Node object representing the source file)
and
.B env
(the construction environment
used for building the target file).
The
.B target
and
.B source
arguments may be lists of Node objects if there is
more than one target file or source file.
The actual target and source file name(s) may
be retrieved from their Node objects
via the built-in Python str() function:

.ES
target_file_name = str(target)
source_file_names = map(lambda x: str(x), source)
.EE
.IP
The function should return
.B 0
or
.B None
to indicate a successful build of the target file(s).
The function may raise an exception
or return a non-zero exit status
to indicate an unsuccessful build.

.ES
def build_it(target = None, source = None, env = None):
    # build the target from the source
    return 0
 
a = Action(build_it)
.EE

The second, optional argument
is a Python function that returns
a string to be printed to describe the action being executed.
Like the function to build a file,
this function takes three arguments:
.B target
(a Node object representing the target file),
.B source
(a Node object representing the source file)
and
.BR env
(a construction environment).
The
.B target
and
.B source
arguments may be lists of Node objects if there is
more than one target file or source file.
Examples:

.ES
def build_it(target, source, env):
    # build the target from the source
    return 0

def string_it(target, source, env):
    return "building '%s' from '%s'" % (target[0], source[0])

# Use a positional argument.
a = Action(build_it, string_it)

# Alternatively, use a keyword argument.
a = Action(build_it, strfunction=string_it)
.EE

The third, also optional argument
is a list of construction variables
whose values will be included
in the signature of the Action
when deciding whether a target should
be rebuilt because the action changed.
This is necessary whenever you want a target to
be rebuilt when a specific
construction variable changes,
because the underlying Python code for a function
will not change when the value of the construction variable does.

.ES
def build_it(target, source, env):
    # build the target from the 'XXX' construction variable
    open(target[0], 'w').write(env['XXX'])
    return 0

def string_it(target, source):
    return "building '%s' from '%s'" % (target[0], source[0])

# Use positional arguments.
a = Action(build_it, string_it, ['XXX'])

# Alternatively, use a keyword argument.
a = Action(build_it, varlist=['XXX'])
.EE
.PP
If the action argument is not one of the above,
None is returned.

.SS Variable Substitution

Before executing a command,
.B scons
performs construction variable interpolation on the strings that make up
the command line of builders.
Variables are introduced by a
.B $
prefix.
Besides construction variables, scons provides the following
variables for each command execution:

.IP TARGET
The file name of the target being built, or the file name of the first 
target if multiple targets are being built.

.IP TARGETS
The file names of all targets being built.

.IP SOURCE
The file name of the source of the build command, or the file name of the
first source if multiple sources are being built.

.IP SOURCES
The file names of the sources of the build command.

(Note that the above variables are reserved
and may not be set in a construction environment.)

.LP 
For example, given the construction variable CC='cc', targets=['foo'], and
sources=['foo.c', 'bar.c']:

.ES
action='$CC -c -o $TARGET $SOURCES'
.EE

would produce the command line:

.ES
cc -c -o foo foo.c bar.c
.EE

Variable names may be surrounded by curly braces ({})
to separate the name from the trailing characters.
Within the curly braces, a variable name may have
a Python slice subscript appended to select one
or more items from a list.
In the previous example, the string:

.ES
${SOURCES[1]}
.EE

would produce:

.ES
bar.c
.EE

Additionally, a variable name may
have the following special
modifiers appended within the enclosing curly braces
to modify the interpolated string:

.IP base
The base path of the file name,
including the directory path
but excluding any suffix.

.IP dir
The name of the directory in which the file exists.

.IP file
The file name,
minus any directory portion.

.IP filebase
Just the basename of the file,
minus any suffix
and minus the directory.

.IP suffix
Just the file suffix.

.IP abspath
The absolute path name of the file.

.IP posix
The POSIX form of the path,
with directories separated by
.B /
(forward slashes)
not backslashes.
This is sometimes necessary on Win32 systems
when a path references a file on other (POSIX) systems.

.IP srcpath
The directory and file name to the source file linked to this file
through BuildDir.  If this file isn't linked, it just returns the
directory and filename unchanged.

.IP srcdir
The directory containing the source file linked to this file
through BuildDir.  If this file isn't linked, it just returns the
directory part of the filename.

.LP
For example, the specified target will
expand as follows for the corresponding modifiers:

.ES
$TARGET              => sub/dir/file.x
${TARGET.base}       => sub/dir/file
${TARGET.dir}        => sub/dir
${TARGET.file}       => file.x
${TARGET.filebase}   => file
${TARGET.suffix}     => .x
${TARGET.abspath}    => /top/dir/sub/dir/file.x

BuildDir('sub/dir','src')
$SOURCE              => sub/dir/file.x
${SOURCE.srcpath}    => src/file.x
${SOURCE.srcdir}     => src
.EE

Lastly, a variable name
may be a callable Python function
associated with a
construction variable in the environment.
The function should
take four arguments:
.I target
- a list of target nodes,
.I source 
- a list of source nodes, 
.I env
- the construction environment,
.I for_signature
- a Boolean value that specifies
whether the function is being called
for generating a build signature.
SCons will insert whatever
the called function returns
into the expanded string:

.ES
def foo(target, source, env, for_signature):
    return "bar"

# Will expand $BAR to "bar baz"
env=Environment(FOO=foo, BAR="$FOO baz")
.EE

You can use this feature to pass arguments to a
Python function by creating a callable class
that stores one or more arguments in an object,
and then uses them when the
.B __call__()
method is called.
Note that in this case,
the entire variable expansion must
be enclosed by curly braces
so that the arguments will
be associated with the
instantiation of the class:

.ES
class foo:
    def __init__(self, arg):
        self.arg = arg

    def __call__(self, target, source, env):
        return arg + " bar"

# Will expand $BAR to "my argument bar baz"
env=Environment(FOO=foo, BAR="${FOO('my argument')} baz")
.EE

.LP
The special pseudo-variables
.B "$("
and
.B "$)"
may be used to surround parts of a command line
that may change
.I without
causing a rebuild--that is,
which are not included in the signature
of target files built with this command.
All text between
.B "$("
and
.B "$)"
will be removed from the command line
before it is added to file signatures,
and the
.B "$("
and
.B "$)"
will be removed before the command is executed.
For example, the command line:

.ES
echo Last build occurred $( $TODAY $). > $TARGET
.EE

.LP
would execute the command:

.ES
echo Last build occurred $TODAY. > $TARGET
.EE

.LP
but the command signature added to any target files would be:

.ES
echo Last build occurred  . > $TARGET
.EE

SCons uses the following rules when converting construction variables into
command lines:

.IP String
When the value is a string it is interpreted as a space delimited list of
command line arguments. 

.IP List
When the value is a list it is interpreted as a list of command line
arguments. Each element of the list is converted to a string.

.IP Other
Anything that is not a list or string is converted to a string and
interpreted as a single command line argument.

.IP Newline
Newline characters (\\n) delimit lines. The newline parsing is done after
all other parsing, so it is not possible for arguments (e.g. file names) to
contain embedded newline characters. This limitation will likely go away in
a future version of SCons.

.SS Scanner Objects

You can use the
.B Scanner
function to define
objects to scan
new file types for implicit dependencies.
Scanner accepts the following arguments:

.IP function
A Python function that will process
the Node (file)
and return a list of strings (file names)
representing the implicit
dependencies found in the contents.
The function takes three or four arguments:

    def scanner_function(node, env, path):

    def scanner_function(node, env, path, arg):

The
.B node
argument is the internal
SCons node representing the file.
Use
.B str(node)
to fetch the name of the file, and
.B node.get_contents()
to fetch contents of the file.

The
.B env
argument is the construction environment for the scan.
Fetch values from it using the
.B env.Dictionary()
method.

The
.B path
argument is a tuple (or list)
of directories that can be searched
for files.
This will usually be the tuple returned by the
.B path_function
argument (see below).

The
.B arg
argument is the argument supplied
when the scanner was created, if any.

.IP name
The name of the Scanner.
This is mainly used
to identify the Scanner internally.

.IP argument
An optional argument that, if specified,
will be passed to the scanner function
(described above)
and the path function
(specified below).

.IP skeys
An optional list that can be used to
determine which scanner should be used for
a given Node.
In the usual case of scanning for file names,
this array will be a list of suffixes
for the different file types that this
Scanner knows how to scan.

.IP path_function
A Python function that takes
two or three arguments:
a construction environment, directory Node,
and optional argument supplied
when the scanner was created.
The
.B path_function
returns a tuple of directories
that can be searched for files to be returned
by this Scanner object.

.IP node_class
The class of Node that should be returned
by this Scanner object.
Any strings or other objects returned
by the scanner function
that are not of this class
will be run through the
.B node_factory
function.

.IP node_factory
A Python function that will take a string
or other object
and turn it into the appropriate class of Node
to be returned by this Scanner object.

.IP scan_check
An optional Python function that takes a Node (file)
as an argument and returns whether the
Node should, in fact,
be scanned for dependencies.
This check can be used to eliminate unnecessary
calls to the scanner function when,
for example, the underlying file
represented by a Node does not yet exist.

.IP recursive
An optional flag that
specifies whether this scanner should be re-invoked
on the dependency files returned by the scanner.
When this flag is not set,
the Node subsystem will
only invoke the scanner on the file being scanned,
and not (for example) also on the files
specified by the #include lines
in the file being scanned.

.SH SYSTEM-SPECIFIC BEHAVIOR
SCons and its configuration files are very portable,
due largely to its implementation in Python.
There are, however, a few portability
issues waiting to trap the unwary.
.SS .C file suffix
SCons handles the upper-case
.B .C
file suffix differently,
depending on the capabilities of
the underlying system.
On a case-sensitive system
such as Linux or UNIX,
SCons treats a file with a 
.B .C
suffix as a C++ source file.
On a case-insensitive system
such as Windows,
SCons treats a file with a 
.B .C
suffix as a C source file.
.SS .F file suffix
SCons handles the upper-case
.B .F
file suffix differently,
depending on the capabilities of
the underlying system.
On a case-sensitive system
such as Linux or UNIX,
SCons treats a file with a 
.B .F
suffix as a Fortran source file
that is to be first run through
the standard C preprocessor.
On a case-insensitive system
such as Windows,
SCons treats a file with a 
.B .F
suffix as a Fortran source file that should
.I not
be run through the C preprocessor.
.SS WIN32:  Cygwin Tools and Cygwin Python vs. Windows Pythons
Cygwin supplies a set of tools and utilities
that let users work on a
Windows system using a more POSIX-like environment.
The Cygwin tools, including Cygwin Python,
do this, in part,
by sharing an ability to interpret UNIX-like path names.
For example, the Cygwin tools
will internally translate a Cygwin path name
like /cygdrive/c/mydir
to an equivalent Windows pathname
of C:/mydir (equivalent to C:\\mydir).

Versions of Python
that are built for native Windows execution,
such as the python.org and ActiveState versions,
do not have the Cygwin path name semantics.
This means that using a native Windows version of Python
to build compiled programs using Cygwin tools
(such as gcc, bison, and flex)
may yield unpredictable results.
"Mixing and matching" in this way
can be made to work,
but it requires careful attention to the use of path names
in your SConscript files.

In practice, users can sidestep
the issue by adopting the following rules:
When using gcc,
use the Cygwin-supplied Python interpreter
to run SCons;
when using Microsoft Visual C/C++
(or some other Windows compiler)
use the python.org or ActiveState version of Python
to run SCons.
.SS WIN32:  scons.bat file
On WIN32 systems,
SCons is executed via a wrapper
.B scons.bat
file.
This has (at least) two ramifications:

First, Windows command-line users
that want to use variable assignment
on the command line
may have to put double quotes
around the assignments:

.ES
scons "FOO=BAR" "BAZ=BLEH"
.EE

Second, the Cygwin shell does not
recognize this file as being the same
as an
.B scons
command issued at the command-line prompt.
You can work around this either by
executing
.B scons.bat
from the Cygwin command line,
or by creating a wrapper shell
script named
.B scons .

.SS MinGW

The MinGW bin directory must be in your PATH environment variable or the
PATH variable under the ENV construction variable for SCons
to detect and use the MinGW tools. When running under the native Windows
Python interpreter, SCons will prefer the MinGW tools over the Cygwin
tools, if they are both installed, regardless of the order of the bin
directories in the PATH variable. If you have both MSVC and MinGW
installed and you want to use MinGW instead of MSVC,
then you must explictly tell SCons to use MinGW by passing 

.ES
tools=['mingw']
.EE

to the Environment() function, because SCons will prefer the MSVC tools
over the MinGW tools.

.SH EXAMPLES

To help you get started using SCons,
this section contains a brief overview of some common tasks.

.SS Basic Compilation From a Single Source File

.ES
env = Environment()
env.Program(target = 'foo', source = 'foo.c')
.EE

Note:  Build the file by specifying
the target as an argument
("scons foo" or "scons foo.exe").
or by specifying a dot ("scons .").

.SS Basic Compilation From Multiple Source Files

.ES
env = Environment()
env.Program(target = 'foo', source = Split('f1.c f2.c f3.c'))
.EE

.SS Setting a Compilation Flag

.ES
env = Environment(CCFLAGS = '-g')
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Search The Local Directory For .h Files

Note:  You do
.I not
need to set CCFLAGS to specify -I options by hand.
SCons will construct the right -I options from CPPPATH.

.ES
env = Environment(CPPPATH = ['.'])
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Search Multiple Directories For .h Files

.ES
env = Environment(CPPPATH = ['include1', 'include2'])
env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Building a Static Library

.ES
env = Environment()
env.StaticLibrary(target = 'foo', source = Split('l1.c l2.c'))
env.StaticLibrary(target = 'bar', source = ['l3.c', 'l4.c'])
.EE

.SS Building a Shared Library

.ES
env = Environment()
env.SharedLibrary(target = 'foo', source = ['l5.c', 'l6.c'])
env.SharedLibrary(target = 'bar', source = Split('l7.c l8.c'))
.EE

.SS Linking a Local Library Into a Program

.ES
env = Environment(LIBS = 'mylib', LIBPATH = ['.'])
env.Library(target = 'mylib', source = Split('l1.c l2.c'))
env.Program(target = 'prog', source = ['p1.c', 'p2.c'])
.EE

.SS Defining Your Own Builder Object

Notice that when you invoke the Builder,
you can leave off the target file suffix,
and SCons will add it automatically.

.ES
bld = Builder(action = 'pdftex < $SOURCES > $TARGET'
              suffix = '.pdf',
              src_suffix = '.tex')
env = Environment(BUILDERS = {'PDFBuilder' : bld})
env.PDFBuilder(target = 'foo.pdf', source = 'foo.tex')

# The following creates "bar.pdf" from "bar.tex"
env.PDFBuilder(target = 'bar', source = 'bar')
.EE

Note also that the above initialization
overwrites the default Builder objects,
so the Environment created above
can not be used call Builders like env.Program(),
env.Object(), env.StaticLibrary(), etc.

.SS Adding Your Own Builder Object to an Environment

.ES
bld = Builder(action = 'pdftex < $SOURCES > $TARGET'
              suffix = '.pdf',
              src_suffix = '.tex')
env = Environment()
env.Append(BUILDERS = {'PDFBuilder' : bld})
env.PDFBuilder(target = 'foo.pdf', source = 'foo.tex')
env.Program(target = 'bar', source = 'bar.c')
.EE

You also can use other Pythonic techniques to add
to the BUILDERS construction variable, such as:

.ES
env = Environment()
env['BUILDERS]['PDFBuilder'] = bld
.EE

.SS Defining Your Own Scanner Object

.ES
import re

include_re = re.compile(r'^include\\s+(\\S+)$', re.M)

def kfile_scan(node, env, path, arg):
    contents = node.get_contents()
    includes = include_re.findall(contents)
    return includes

kscan = Scanner(name = 'kfile',
                function = kfile_scan,
                argument = None,
                skeys = ['.k'])
scanners = Environment().Dictionary('SCANNERS')
env = Environment(SCANNERS = scanners + [kscan])

env.Command('foo', 'foo.k', 'kprocess < $SOURCES > $TARGET')

bar_in = File('bar.in')
env.Command('bar', bar_in, 'kprocess $SOURCES > $TARGET')
bar_in.target_scanner = kscan
.EE

.SS Creating a Hierarchical Build

Notice that the file names specified in a subdirectory's
SConscript
file are relative to that subdirectory.

.ES
SConstruct:

    env = Environment()
    env.Program(target = 'foo', source = 'foo.c')

    SConscript('sub/SConscript')

sub/SConscript:

    env = Environment()
    # Builds sub/foo from sub/foo.c
    env.Program(target = 'foo', source = 'foo.c')

    SConscript('dir/SConscript')

sub/dir/SConscript:

    env = Environment()
    # Builds sub/dir/foo from sub/dir/foo.c
    env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Sharing Variables Between SConscript Files

You must explicitly Export() and Import() variables that
you want to share between SConscript files.

.ES
SConstruct:

    env = Environment()
    env.Program(target = 'foo', source = 'foo.c')

    Export("env")
    SConscript('subdirectory/SConscript')

subdirectory/SConscript:

    Import("env")
    env.Program(target = 'foo', source = 'foo.c')
.EE

.SS Building Multiple Variants From the Same Source

Use the BuildDir() method to establish
one or more separate build directories for
a given source directory,
then use the SConscript() method
to specify the SConscript files
in the build directories:

.ES
SConstruct:

    ccflags = '-DFOO'
    Export("ccflags")
    BuildDir('foo', 'src')
    SConscript('foo/SConscript')

    ccflags = '-DBAR'
    Export("ccflags")
    BuildDir('bar', 'src')
    SConscript('bar/SConscript')

src/SConscript:

    Import("ccflags")
    env = Environment(CCFLAGS = ccflags)
    env.Program(target = 'src', source = 'src.c')
.EE

Note the use of the Export() method
to set the "ccflags" variable to a different
value for each variant build.

.SS Hierarchical Build of Two Libraries Linked With a Program

.ES
SConstruct:

    env = Environment(LIBPATH = ['#libA', '#libB'])
    Export('env')
    SConscript('libA/SConscript')
    SConscript('libB/SConscript')
    SConscript('Main/SConscript')

libA/SConscript:

    Import('env')
    env.Library('a', Split('a1.c a2.c a3.c'))

libB/SConscript:                                                  

    Import('env')
    env.Library('b', Split('b1.c b2.c b3.c'))

Main/SConscript:

    Import('env')
    e = env.Copy(LIBS = ['a', ','b'])
    e.Program('foo', Split('m1.c m2.c m3.c'))
.EE

The '#' in the LIBPATH directories specify that they're relative to the
top-level directory, so they don't turn into "Main/libA" when they're
used in Main/SConscript.

Specifying only 'a' and 'b' for the library names
allows SCons to append the appropriate library
prefix and suffix for the current platform
(for example, 'liba.a' on POSIX systems,
'a.lib' on Windows).

.SS Customizing contruction variables from the command line.

The following would allow the C compiler to be specified on the command
line or in the file custom.py. 

.ES
opts = Options('custom.py')
opts.Add('CC', 'The C compiler.')
env = Environment(options=opts)
Help(opts.GenerateHelpText(env))
.EE

The user could specify the C compiler on the command line:

.ES
scons "CC=my_cc"
.EE

or in the custom.py file:

.ES
CC = 'my_cc'
.EE

or get documentation on the options:

.ES
$ scons -h

CC: The C compiler.
    default: None
    actual: cc

.EE

.SS Using Microsoft Visual C++ precompiled headers

Since windows.h includes everything and the kitchen sink, it can take quite
some time to compile it over and over again for a bunch of object files, so
Microsoft provides a mechanism to compile a set of headers once and then
include the previously compiled headers in any object file. This
technology is called precompiled headers. The general recipe is to create a
file named "StdAfx.cpp" that includes a single header named "StdAfx.h", and
then include every header you want to precompile in "StdAfx.h", and finally
include "StdAfx.h" as the first header in all the source files you are
compiling to object files. For example:

StdAfx.h:
.ES
#include <windows.h>
#include <my_big_header.h>
.EE

StdAfx.cpp:
.ES
#include <StdAfx.h>
.EE

Foo.cpp:
.ES
#include <StdAfx.h>

/* do some stuff */
.EE

Bar.cpp:
.ES
#include <StdAfx.h>

/* do some other stuff */
.EE

SConstruct:
.ES
env=Environment()
env['PCHSTOP'] = 'StdAfx.h'
env['PCH'] = env.PCH('StdAfx.cpp')[0]
env.Program('MyApp', ['Foo.cpp', 'Bar.cpp'])
.EE

For more information see the document for the PCH builder, and the PCH and
PCHSTOP construction variables. To learn about the details of precompiled
headers consult the MSDN documention for /Yc, /Yu, and /Yp.

.SS Using Microsoft Visual C++ external debugging information

Since including debugging information in programs and shared libraries can
cause their size to increase significantly, Microsoft provides a mechanism
for including the debugging information in an external file called a PDB
file. SCons supports PDB files through the PDB construction
variable. 

SConstruct:
.ES
env=Environment()
env['PDB'] = 'MyApp.pdb'
env.Program('MyApp', ['Foo.cpp', 'Bar.cpp'])
.EE

For more information see the document for the PDB construction variable.

.SH ENVIRONMENT

.IP SCONS_LIB_DIR
Specifies the directory that contains the SCons Python module directory
(e.g. /home/aroach/scons-src-0.01/src/engine).

.IP SCONSFLAGS
A string of options that will be used by scons in addition to those passed
on the command line.

.SH "SEE ALSO"
.B scons
User Manual,
.B scons
Design Document,
.B scons
source code.

.SH AUTHORS
Steven Knight <knight@baldmt.com>
.br
Anthony Roach <aroach@electriceyeball.com>

