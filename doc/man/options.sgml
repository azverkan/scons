<!--

  Copyright 2001 Steven Knight

-- >

<para>

  In general, &scons; supports the same command-line options as GNU
  &Make;, and many of those supported by &Cons;.

</para>

<variablelist>

  <varlistentry>
    <term>
      <option>-b</option>
    </term>
    <listitem>
      <para>

        Ignored for compatibility with non-GNU versions of
	<application>make</application>.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-c</option>,
      <option>--clean</option>,
      <option>--remove</option>
    </term>
    <listitem>
      <para>

        Clean up by removing all target files for which a construction
        command is specified.

      </para>
    </listitem>
  </varlistentry>

 <!--

  <varlistentry>
    <term>
      <option>- -cache-disable</option>,
      <option>- -no-cache</option>
    </term>
    <listitem>
      <para>

        Disable caching.  Will neither retrieve files from cache nor flush
        files to cache.  Has no effect if use of caching is not specified
        in a configuration file.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
     <option>- -cache-force</option>,
     <option>- -cache-populate</option>
    </term>
    <listitem>
      <para>

        Populate a cache by forcing any already-existing up-to-date
        target files to the cache, in addition to files built by this
        invocation.  This is useful to populate a new cache with
        appropriate target files, or to make available in the cache
        any target files recently built with caching disabled via the
        <option>- -cache-disable</option> option.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>- -cache-show</option>
    </term>
    <listitem>
      <para>

        When retrieving a target file from a cache, show the command
        that would have been executed to build the file.  This produces
        consistent output for build logs, regardless of whether a target
        file was rebuilt or retrieved from cache.

      </para>
    </listitem>
  </varlistentry>

 -->

  <varlistentry>
    <term>
      <option>-C</option> <replaceable>directory</replaceable>,
      <option>--directory=</option><replaceable>directory</replaceable>
    </term>
    <listitem>
      <para>

        Change to the specified <replaceable>directory</replaceable>
        before searching for the <filename>SConstruct</filename>,
        <filename>Sconstruct</filename> or
        <filename>sconstruct</filename> file, or doing anything
        else.  Multiple <option>-C</option> options are interpreted
        relative to the previous one, and the right-most
        <option>-C</option> option wins.  (This option is nearly
        equivalent to <literal>-f directory/SConstruct</literal>,
        except that it will search for <filename>SConstruct</filename>,
        <filename>Sconstruct</filename>, or
        <filename>sconstruct</filename> in the specified directory.)

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
     <option>-d</option>
    </term>
    <listitem>
      <para>

        Display dependencies while building target files.  Useful for
        figuring out why a specific file is being rebuilt, as well as
        general debugging of the build process.

      </para>
    </listitem>
  </varlistentry>

 <!--

  <varlistentry>
    <term>
     <option>- -debug</option>=<replaceable>flags</replaceable>
    </term>
    <listitem>
      <para>

        Print debugging information. ???

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term> <option>-e</option>,
     <option>- -environment-overrides</option>
    </term>
    <listitem>
      <para>

        Variables from the execution environment override construction
        variables from the configuration files.

      </para>
    </listitem>
  </varlistentry>

 -->

  <varlistentry>
    <term>
      <option>-f</option> <replaceable>file</replaceable>,
      <option>--file</option>=<replaceable>file</replaceable>,
      <option>--makefile</option>=<replaceable>file</replaceable>,
      <option>--sconstruct</option>=<replaceable>file</replaceable>
    </term>
    <listitem>
      <para>

        Use <replaceable>file</replaceable> as the initial configuration
        file.  If <replaceable>file</replaceable> is in another directory,
        &scons; will change to that directory before building targets.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-h</option>,
      <option>--help</option>
    </term>
    <listitem>
      <para>

        Print a local help message for this build, if one is defined in
        the configuration file(s), plus a line that describes the -H
        option for command-line option help.  If no local help message
        is defined, prints the standard help message about command-line
        options.  Exits after displaying the appropriate message.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-H</option>,
      <option>--help-options</option>
    </term>
    <listitem>
      <para>

        Print the standard help message about command-line options and
        exit.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-i</option>,
      <option>--ignore-errors</option>,
    </term>
    <listitem>
      <para>

        Ignore all errors from commands executed to rebuild files.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-I</option> <replaceable>directory</replaceable>,
      <option>--include-dir</option>=<replaceable>directory</replaceable>
    </term>
    <listitem>
      <para>

        Specifies a <replaceable>directory</replaceable> to search for
        imported Python modules.  If several <option>-I</option> options
        are used, the directories are searched in the order specified.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-j</option> <replaceable>N</replaceable>,
      <option>--jobs</option>=<replaceable>N</replaceable>
    </term>
    <listitem>
      <para>

        Specifies the number of jobs (commands) to run simultaneously.
	If there is more than one <option>-j</option> option,
	the last one is effective.
	<!--
	??? If the <option>-j</option> option
	is specified without an argument,
	&scons; will not limit the number of
	simultaneous jobs.
	-->

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-k</option>,
      <option>--keep-going</option>,
    </term>
    <listitem>
      <para>

        Continue as much as possible after an error.  The target that
        failed and those that depend on it will not be remade, but other
        targets specified on the command line will still be processed.

      </para>
    </listitem>
  </varlistentry>

 <!--

  <varlistentry>
    <term>
      <option>-l</option>,
      <option>- -load-average</option>=<replaceable>N</replaceable>,
      <option>- -max-load</option>=<replaceable>N</replaceable>
    </term>
    <listitem>
      <para>

	No new jobs (commands) will be started if
	there are other jobs running and the system load
	average is at least <replaceable>N</replaceable>
	(a floating-point number).

	<!- -
        ???
	With no argument, removes a previous load limit.
	- ->

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>- -list-derived</option>
    </term>
    <listitem>
      <para>

        List derived files (targets, dependencies) that would be built,
        but do not build them.
	[XXX This can probably go away with the right
	combination of other options.  Revisit this issue.]

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>- -list-actions</option>
    </term>
    <listitem>
      <para>

        List derived files that would be built, with the actions
        (commands) that build them.  Does not build the files.
	[XXX This can probably go away with the right
	combination of other options.  Revisit this issue.]

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>- -list-where</option>
    </term>
    <listitem>
      <para>

        List derived files that would be built, plus where the file is
        defined (file name and line number).  Does not build the files.
	[XXX This can probably go away with the right
	combination of other options.  Revisit this issue.]

      </para>
    </listitem>
  </varlistentry>

 -->

  <varlistentry>
    <term>
      <option>-m</option>
    </term>
    <listitem>
      <para>

        Ignored for compatibility with non-GNU versions of
	<application>make</application>.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-n</option>,
      <option>--just-print</option>,
      <option>--dry-run</option>,
      <option>--recon</option>
    </term>
    <listitem>
      <para>

        No execute.  Print the commands that would be executed to build
        any out-of-date target files, but do not execute the commands.

      </para>
    </listitem>
  </varlistentry>

 <!--

  <varlistentry>
    <term>
      <option>-o</option> <replaceable>file</replaceable>,
      <option>- -old-file</option>=<replaceable>file</replaceable>,
      <option>- -assume-old</option>=<replaceable>file</replaceable>
    </term>
    <listitem>
      <para>

        Do not rebuild <replaceable>file</replaceable>, and do
        not rebuild anything due to changes in the contents of
        <replaceable>file</replaceable>.

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>- -override</option> <replaceable>file</replaceable>
    </term>
    <listitem>
      <para>

        Read values to override specific build environment variables
        from the specified <replaceable>file</replaceable>.

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>-p</option>
    </term>
    <listitem>
      <para>

        Print the data base (construction environments,
	Builder and Scanner objects) that are defined
	after reading the configuration files.
	After printing, a normal build is performed
	as usual, as specified by other command-line options.
        This also prints version information
	printed by the <option>-v</option> option.

	<!- -
	???
	To print the data base without trying
	to rebuild any files,
	use <literal>scons -p -f /dev/null</literal>.
	- ->

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>-q</option>,
      <option>- -question</option>
    </term>
    <listitem>
      <para>

        Do not run any commands, or print anything.  Just return an exit
        status that is zero if the specified targets are already up to
        date, nonzero otherwise.

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>-r</option>,
      <option>-R</option>,
      <option>- -no-builtin-rules</option>,
      <option>- -no-builtin-variables</option>
    </term>
    <listitem>
      <para>

        Clear the default construction variables.  Construction
        environments that are created will be completely empty.

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>- -random</option>
    </term>
    <listitem>
      <para>

        Build dependencies in a random order.  This is useful when
        building multiple trees simultaneously with caching enabled as a
        way to prevent multiple builds from simultaneously trying to build
        or retrieve the same target files.

      </para>
    </listitem>
  </varlistentry>

 -->

  <varlistentry>
    <term>
      <option>-s</option>,
      <option>--silent</option>,
      <option>--quiet</option>
    </term>
    <listitem>
      <para>

        Silent.  Do not print commands that are executed to rebuild
        target files.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-S</option>,
      <option>--no-keep-going</option>,
      <option>--stop</option>
    </term>
    <listitem>
      <para>

        Ignored for compatibility with GNU <application>make</application>.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-t</option>,
      <option>--touch</option>
    </term>
    <listitem>
      <para>

        Ignored for compatibility with GNU
        <application>make</application>.  (Touching a file to make it
        appear up-to-date is unnecessary when using &scons;.)

      </para>
    </listitem>
  </varlistentry>

 <!--

  <varlistentry>
    <term>
      <option>-u</option>
    </term>
    <listitem>
      <para>

        Traverse up directories until an <filename>SConstruct</filename>
        or <filename>sconstruct</filename> file is found, and use that
        as the top of the directory tree.  Only targets at or below the
        current directory will be built.

      </para>
    </listitem>
  </varlistentry>

 -->

  <varlistentry>
    <term>
      <option>-v</option>,
      <option>--version</option>,
    </term>
    <listitem>
      <para>

        Print the &scons; version, copyright information,
	list of authors, and any other relevant information.
	Then exit.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>-w</option>,
      <option>--print-directory</option>,
    </term>
    <listitem>
      <para>

        Print a message containing the working directory before and
        after other processing.

      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>
      <option>--no-print-directory</option>
    </term>
    <listitem>
      <para>

        Turn off -w, even if it was turned on implicitly.

      </para>
    </listitem>
  </varlistentry>

 <!--

  <varlistentry>
    <term>
      <option>- -write-filenames</option> <replaceable>file</replaceable>
    </term>
    <listitem>
      <para>

        Write all filenames considered into
        <replaceable>file</replaceable>.

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>-W</option> <replaceable>file</replaceable>,
      <option>- -what-if</option>=<replaceable>file</replaceable>,
      <option>- -new-file</option>=<replaceable>file</replaceable>,
      <option>- -assume-new</option>=<replaceable>file</replaceable>
    </term>
    <listitem>
      <para>

        Pretend that the target <replaceable>file</replaceable> has been
        modified.  When used with the <option>-n</option> option, this
        show you what would be rebuilt if you were to modify that file.
        Without <option>-n</option>... what? XXX

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>- -warn-undefined-variables</option>
    </term>
    <listitem>
      <para>

        Warn when an undefined variable is referenced.

      </para>
    </listitem>
  </varlistentry>

 -->

 <!--

  <varlistentry>
    <term>
      <option>-Y</option> <replaceable>repository</replaceable>,
      <option>- -repository</option> <replaceable>repository</replaceable>
    </term>
    <listitem>
      <para>

        Search the specified repository for any input and target
        files not found in the local directory hierarchy.  Multiple
        <option>-Y</option> options may specified, in which case the
        repositories are searched in the order specified.

      </para>
    </listitem>
  </varlistentry>

 -->

</variablelist>
