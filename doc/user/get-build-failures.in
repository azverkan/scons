<!--

  __COPYRIGHT__

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

   <para>

   SCons, like most build tools, returns zero status to
   the shell on success and nonzero status on failure.
   Sometimes it's useful to give more information about
   the build status at the end of the run, for instance
   to print an informative message, send an email, or
   page the poor slob who broke the build.

   </para>

   <para>

   SCons provides a &GetBuildFailures; method that
   you can use in a python <function>atexit</function> function
   to get a list of objects describing the actions that failed
   while attempting to build targets.  There can be more
   than one if you're using <literal>-j</literal>.  Here's a 
   simple example:

   </para>

   <scons_example name="ex1">
      <file name="SConstruct" printme="1">
import atexit

def print_build_failures():
    from SCons.Script import GetBuildFailures
    for bf in GetBuildFailures():
        print "%s failed: %s" % (bf.node, bf.errstr)
atexit.register(print_build_failures)
      </file>
   </scons_example>

   <para>

   This registers <function>print_build_failures</function>
   as an <function>atexit</function> callback, to be called
   before &SCons; exits.  When that function is called,
   it gets the list of failed objects.  See the man page
   for the detailed contents of the returned objects; some
   of the more useful are 
   <literal>.node</literal>,
   <literal>.errstr</literal>,
   <literal>.filename</literal>, and
   <literal>.command</literal>.
   The <literal>filename</literal> is not necessarily
   the same file as the <literal>node</literal>; the
   <literal>node</literal> is the target that was
   being built when the error occurred, while the 
   <literal>filename</literal>is the file or dir that
   actually caused the error.
   Note: only call &GetBuildFailures; at the end of the
   build; calling it at any other time is undefined.

   </para>

   <para>   

   Here is a more complete example showing how to
   turn each element of &GetBuildFailures; into a string:

   </para>

   <scons_example name="ex2">
      <file name="SConstruct" printme="1">

# Make the build fail if we pass fail=1 on the command line
if ARGUMENTS.get('fail', 0):
    Command('target', 'source', ['/bin/false'])

def bf_to_str(bf):
    """Convert an element of GetBuildFailures() to a string
    in a useful way."""
    import SCons.Errors
    if bf is None: # unknown targets product None in list
        return '(unknown tgt)'
    elif isinstance(bf, SCons.Errors.StopError):
        return str(bf)
    elif bf.node:
        return str(bf.node) + ': ' + bf.errstr
    elif bf.filename:
        return bf.filename + ': ' + bf.errstr
    return 'unknown failure: ' + bf.errstr
import atexit

def build_status():
    """Convert the build status to a 2-tuple, (status, msg)."""
    from SCons.Script import GetBuildFailures
    bf = GetBuildFailures()
    if bf:
        # bf is normally a list of build failures; if an element is None,
        # it's because of a target that scons doesn't know anything about.
        status = 'failed'
        failures_message = "\n".join(["Failed building %s" % bf_to_str(x)
                           for x in bf if x is not None])
    else:
        # if bf is None, the build completed successfully.
        status = 'ok'
        failures_message = ''
    return (status, failures_message)

def display_build_status():
    """Display the build status.  Called by atexit.
    Here you could do all kinds of complicated things."""
    status, failures_message = build_status()
    if status == 'failed':
       print "FAILED!!!!"  # could display alert, ring bell, etc.
    elif status == 'ok':
       print "Build succeeded."
    print failures_message

atexit.register(display_build_status)
      </file>
   </scons_example>

   <para>
   
   When this runs, you'll see the appropriate output:

   </para>

   <scons_output example="ex2">
         <scons_output_command>scons -Q</scons_output_command>
         <scons_output_command>scons -Q fail=1</scons_output_command>
   </scons_output>
