<!--

  Copyright (c) 2001, 2002, 2003 Steven Knight

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

<!--

=head2 The C<AfterBuild> method

The C<AfterBuild> method evaluates the specified perl string after
building the given file or files (or finding that they are up to date).
The eval will happen once per specified file.  C<AfterBuild> is called
as follows:

  AfterBuild $env 'foo.o', qq(print "foo.o is up to date!\n");

The perl string is evaluated in the C<script> package, and has access
to all variables and subroutines defined in the F<Conscript> file in
which the C<AfterBuild> method is called.

-->

 <para>

 By default, &SCons; removes targets before building them.
 Sometimes, however, this is not what you want.
 For example, you may want to update a library incrementally,
 not by having it deleted and then rebuilt from all
 of the constituent object files.
 In such cases, you can use the
 &Precious; method to prevent
 &SCons; from removing the target before it is built:

 </para>

 <scons_example name="ex1">
   <file name="SConstruct" printme="1">
    env = Environment()
    lib = env.Library('foo', ['f1.c', 'f2.c', 'f3.c'])
    env.Precious(lib)
   </file>
   <file name="f1.c">
   int f1() { }
   </file>
   <file name="f2.c">
   int f2() { }
   </file>
   <file name="f3.c">
   int f3() { }
   </file>
 </scons_example>

 <para>

 Although the output doesn't look any different,
 &SCons; does not, in fact,
 delete the target library before rebuilding it:

 </para>

 <scons_output example="ex1">
    <command>scons -Q</command>
 </scons_output>

 <para>

 &SCons; will, however, still delete files marked as &Precious;
 when the <literal>-c</literal> option is used.

 </para>
