<!--

  __COPYRIGHT__

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

 <para>

 If &SCons; is unaware that a build step produces an extra file,
 the &SideEffect; method can be used to identify it,
 so that the file can be used as a dependency in subsequent build steps.
 However, the primary use for the &SideEffect; method
 is to prevent two build steps from simultaneously manipluating the same file.

 </para>

 <para>

 If more than one build step creates or manipulates the same file,
 it can cause unpleasant results if both buid steps are run at the same time.
 The shared file is declared as a side-effect of building the primary targets
 and &SCons; will prevent the two build steps from running in parallel.

 </para>

 <para>

 In this example, the <filename>SConscript</filename> uses
 &SideEffect; to inform &SCons; about the additional output file.

 </para>

 <programlisting>
    env = Environment()
    env.Command('file2', 'log', 'cat &gt;$TARGET $SOURCE')
    env.SideEffect('log', env.Command('file1', [],
        'echo &gt;$TARGET data1; echo &gt;log updated file1'))
 </programlisting>

 <para>

 Even when run in parallel mode, &SCons; will run the two steps in order:

 </para>

 <screen>
    % <userinput>scons -Q --jobs=2</userinput>
    echo &gt; file1 data1; echo &gt;log updated file1
 </screen>

 <para>

 If the same file is modified by two build steps,
 &SideEffect; will cause the steps to be run separately:

 </para>

 <programlisting>
    env = Environment()
    f1 = env.Command('file1', [],
        'echo &gt;$TARGET data1; echo &gt;&gt;log updated file1')
    f2 = env.Command('file2', [],
        'echo &gt;$TARGET data2; echo &gt;&gt;log updated file2')
    env.SideEffect('log', f1 + f2)
 </programlisting>

 <screen>
    % <userinput>scons -Q --jobs=2</userinput>
    echo &gt; file1 data1; echo &gt;&gt;log updated file1
    echo &gt; file2 data2; echo &gt;&gt;log updated file2
 </screen>

 <para>

 Despite the <filename>--jobs=2</filename> in the command line,
 the two build steps are run sequentially.

 </para>

 <para>

 The name used as a side-effect need not ever exist:

 </para>

 <programlisting>
    env = Environment()
    f1 = env.Command('file1', [], 'echo &gt;$TARGET data1')
    env.SideEffect('log', f1)
    f2 = env.Command('file2', [], 'echo &gt;$TARGET data2')
    env.SideEffect('log', f2)
 </programlisting>

 <screen>
    % <userinput>scons -Q --jobs=2</userinput>
    echo &gt; file1 data1
    echo &gt; file2 data2
 </screen>

 <para>

 Again, the two build steps are run sequentially.

 </para>
