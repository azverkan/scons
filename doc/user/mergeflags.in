<!--

  __COPYRIGHT__

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

-->

 <para>

 &SCons; construction environments have a &MergeFlags; method
 that merges a dictionary of values into the construction environment.
 &MergeFlags; treats the values as a list of options
 and will not duplicate the option
 if it already exists in the construction environment variable.

 </para>

 <para>

 &MergeFlags; tries to be intellegent about merging options.
 If the variable name ents in <varname>PATH</varname>,
 the leftmost occurence of the option is kept,
 otherwise, the rightmost occurence is kept.
 This corresponds to the semantics of most option lists:
 in a list of directory paths, the first occurence "wins"
 while in a list of command-line flags, the last occurence "wins."

 </para>

 <scons_example name="MergeFlags1">
   <file name="SConstruct" printme="1">
    env = Environment()
    env.Append(CCFLAGS = '-option -O3 -O1')
    flags = { 'CCFLAGS' : '-whatever -O3' }
    env.MergeFlags(flags)
    print env['CCFLAGS']
   </file>
 </scons_example>

 <scons_output example="MergeFlags1">
    <scons_output_command>scons -Q</scons_output_command>
 </scons_output>

 <para>

 Note that since <varname>CCFLAGS</varname> is a <varname>CLVar</varname>,
 the options are automatically converted into a list.

 </para>

 <scons_example name="MergeFlags2">
   <file name="SConstruct" printme="1">
    env = Environment()
    env.Append(CPPPATH = ['/include', '/usr/local/include', '/usr/include'])
    flags = { 'CPPPATH' : ['/usr/opt/include', '/usr/local/include'] }
    env.MergeFlags(flags)
    print env['CPPPATH']
   </file>
 </scons_example>

 <scons_output example="MergeFlags2">
    <scons_output_command>scons -Q</scons_output_command>
 </scons_output>

 <para>

 Note that <varname>CPPPATH</varname> is not a <varname>CLVar</varname>,
 it must be initialized as a list.

 </para>

 <para>

 If &MergeFlags; is passed anything other than a dictionary,
 it calls &ParseFlags; to convert it into a dictionary.

 </para>

 <scons_example name="MergeFlags3">
   <file name="SConstruct" printme="1">
    env = Environment()
    env.Append(CCFLAGS = '-option -O3 -O1')
    env.Append(CPPPATH = ['/include', '/usr/local/include', '/usr/include'])
    env.MergeFlags('-whatever -I/usr/opt/include -O3 -I/usr/local/include')
    print env['CCFLAGS']
    print env['CPPPATH']
   </file>
 </scons_example>

 <scons_output example="MergeFlags3">
    <scons_output_command>scons -Q</scons_output_command>
 </scons_output>

 <para>

 In the combined example above,
 &ParseFlags; has sorted the options into their corresponding variables
 and returned a dictionary for &MergeFlags; to apply
 to the <varname>Environment</varname>.

 </para>
